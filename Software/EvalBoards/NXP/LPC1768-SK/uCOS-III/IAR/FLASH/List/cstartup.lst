###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  21:02:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\cstartup.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\cstartup.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\IAR\cstartup.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2012; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                         EXCEPTION VECTORS
     18          *
     19          *                                        IAR Development Kits
     20          *                                               on the
     21          *
     22          *                                            NXP LPC1768
     23          *                                      LPC1766-SK KICKSTART KIT
     24          *
     25          * Filename      : app_vect.c
     26          * Version       : V1.00
     27          * Programmer(s) : FT
     28          *                 DC
     29          *********************************************************************************************************
     30          */
     31          
     32          #include  <cpu.h>
     33          #include  <os_cpu.h>
     34          #include  <os_csp.h>
     35          #include  <lib_def.h>
     36          
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                            LOCAL DEFINES
     41          *********************************************************************************************************
     42          */
     43          
     44          
     45          /*
     46          *********************************************************************************************************
     47          *                                          LOCAL DATA TYPES
     48          *********************************************************************************************************
     49          */
     50          
     51          typedef  union {
     52              CPU_FNCT_VOID   Fnct;
     53              void           *Ptr;
     54          } APP_INTVECT_ELEM;
     55          
     56          /*
     57          *********************************************************************************************************
     58          *                                            LOCAL TABLES
     59          *********************************************************************************************************
     60          */
     61          
     62          
     63          /*
     64          *********************************************************************************************************
     65          *                                       LOCAL GLOBAL VARIABLES
     66          *********************************************************************************************************
     67          */
     68          
     69          
     70          /*
     71          *********************************************************************************************************
     72          *                                      LOCAL FUNCTION PROTOTYPES
     73          *********************************************************************************************************
     74          */
     75          
     76          #pragma language=extended
     77          #pragma segment="CSTACK"
     78          
     79          static  void  App_NMI_ISR        (void);
     80          
     81          static  void  App_Fault_ISR      (void);
     82          
     83          static  void  App_BusFault_ISR   (void);
     84          
     85          static  void  App_UsageFault_ISR (void);
     86          
     87          static  void  App_MemFault_ISR   (void);
     88          
     89          static  void  App_Spurious_ISR   (void);
     90          void  __iar_program_start(void);
     91          
     92          void TIMER0_IRQHandler(void);
     93          void TIMER1_IRQHandler(void);
     94          void TIMER2_IRQHandler(void);
     95          
     96          void TIMER3_IRQHandler(void);
     97          void UART0_IRQHandler (void);
     98          void UART1_IRQHandler(void);
     99          void UART2_IRQHandler(void);
    100          void UART3_IRQHandler(void);
    101          
    102          /*
    103          *********************************************************************************************************
    104          *                                     LOCAL CONFIGURATION ERRORS
    105          *********************************************************************************************************
    106          */
    107          
    108          /*
    109          *********************************************************************************************************
    110          *                                  EXCEPTION / INTERRUPT VECTOR TABLE
    111          *
    112          * Note(s) : (1) The Cortex-M3 may have up to 256 external interrupts, which are the final entries in the
    113          *               vector table.  The LPC17xx has 34 external interrupt vectors.
    114          *********************************************************************************************************
    115          */
    116          

   \                                 In section .intvec, align 4, root
    117          __root  const  APP_INTVECT_ELEM  __vector_table[] @ ".intvec" = {
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), __iar_program_start, App_NMI_ISR, App_Fault_ISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 App_MemFault_ISR, App_BusFault_ISR, App_UsageFault_ISR
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 App_Spurious_ISR, OS_CPU_PendSVHandler, OS_CPU_SysTickHandler
   \              0x........   
   \              0x........   
   \   00000040   0x........         DC32 OS_CPU_IntHandler, TIMER0_IRQHandler, TIMER1_IRQHandler
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 TIMER2_IRQHandler, TIMER3_IRQHandler, UART0_IRQHandler
   \              0x........   
   \              0x........   
   \   00000058   0x........         DC32 UART1_IRQHandler, UART2_IRQHandler, UART3_IRQHandler
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000070   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   0000007C   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000088   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   00000094   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000A0   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000AC   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000B8   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
   \              0x........   
   \   000000C4   0x........         DC32 OS_CPU_IntHandler, OS_CPU_IntHandler
   \              0x........   
    118              { .Ptr = (void *)__sfe( "CSTACK" )},                        /*  0, SP start value.                                */
    119              __iar_program_start,                                        /*  1, PC start value.                                */
    120              App_NMI_ISR,                                                /*  2, NMI.                                           */
    121              App_Fault_ISR,                                              /*  3, Hard Fault.                                    */
    122              App_MemFault_ISR,                                           /*  4, Memory Management.                             */
    123              App_BusFault_ISR,                                           /*  5, Bus Fault.                                     */
    124              App_UsageFault_ISR,                                         /*  6, Usage Fault.                                   */
    125              App_Spurious_ISR,                                           /*  7, Reserved.                                      */
    126              App_Spurious_ISR,                                           /*  8, Reserved.                                      */
    127              App_Spurious_ISR,                                           /*  9, Reserved.                                      */
    128              App_Spurious_ISR,                                           /* 10, Reserved.                                      */
    129              App_Spurious_ISR,                                           /* 11, SVCall.                                        */
    130              App_Spurious_ISR,                                           /* 12, Debug Monitor.                                 */
    131              App_Spurious_ISR,                                           /* 13, Reserved.                                      */
    132              OS_CPU_PendSVHandler,                                       /* 14, PendSV Handler.                                */
    133              OS_CPU_SysTickHandler,                                      /* 15, uC/OS-III Tick ISR Handler.                    */
    134          
    135              OS_CPU_IntHandler,                                                  /* 16, INTISR[  0]  WatchDog Timer                    */
    136              TIMER0_IRQHandler,                                               /* 17, INTISR[  1]  Timer 0 (Match 0-3 Capture 0-3).  */
    137              TIMER1_IRQHandler,                                               /* 18, INTISR[  2]  Timer 1 (Match 0-3 Capture 0-3).  */
    138              TIMER2_IRQHandler,                                               /* 19, INTISR[  3]  Timer 2 (Match 0-3 Capture 0-3).  */
    139              TIMER3_IRQHandler,                                               /* 20, INTISR[  4]  Timer 3 (Match 0-3 Capture 0-3).  */
    140              UART0_IRQHandler,                                                /* 21, INTISR[  5]  UART 0  (RLS, THRE, RDA, CTI)     */
    141              UART1_IRQHandler,                                                /* 22, INTISR[  6]  UART 1  (RLS, THRE, RDA, CTI)     */
    142              UART2_IRQHandler,                                               /* 23, INTISR[  7]  UART 2  (RLS, THRE, RDA, CTI)     */
    143              UART3_IRQHandler,                                                /* 24, INTISR[  8]  UART 3  (RLS, THRE, RDA, CTI)     */
    144              OS_CPU_IntHandler,                                                 /* 25, INTISR[  9]  PWM Interrupt                     */
    145              OS_CPU_IntHandler,                                                 /* 26, INTISR[ 10]  I2C0   (RLS, THRE, RDA, CTI)      */
    146              OS_CPU_IntHandler,                                                 /* 27, INTISR[ 11]  I2C1   (RLS, THRE, RDA, CTI)      */
    147              OS_CPU_IntHandler,                                                 /* 28, INTISR[ 12]  I2C2   (RLS, THRE, RDA, CTI)      */
    148              OS_CPU_IntHandler,                                                  /* 29, INTISR[ 13]  SPI0    (SPIF, MODF)              */
    149              OS_CPU_IntHandler,                                                 /* 30, INTISR[ 14]  SSP0                              */
    150              OS_CPU_IntHandler,                                                 /* 31, INTISR[ 15]  SSP1                              */
    151              OS_CPU_IntHandler,                                                 /* 32, INTISR[ 15]  PLL lock (PLOCK)                  */
    152              OS_CPU_IntHandler,                                                  /* 33, INTISR[ 15]  Real Time Clock Interrupt         */
    153              OS_CPU_IntHandler,                                                /* 34, INTISR[  7]  External interrupt 0 (EINT0)      */
    154              OS_CPU_IntHandler,                                                /* 35, INTISR[  8]  External interrupt 0 (EINT0)      */
    155              OS_CPU_IntHandler,                                                /* 36, INTISR[  9]  External interrupt 0 (EINT0)      */
    156              OS_CPU_IntHandler,                                                /* 37, INTISR[ 10]  External interrupt 0 (EINT0).     */
    157              OS_CPU_IntHandler,                                                  /* 38, INTISR[ 11]  A/D Converter 0 end of conversion */
    158              OS_CPU_IntHandler,                                                  /* 39, INTISR[ 12]  Brown out detect                  */
    159              OS_CPU_IntHandler,                                                  /* 40, INTISR[ 12]  USB Interrupts, DMA Interrupt     */
    160              OS_CPU_IntHandler,                                                  /* 41, INTISR[ 12]  CAN Interrupt                     */
    161              OS_CPU_IntHandler,                                                  /* 42, INTISR[ 12]  IntSattus of DMA channel 0/1      */
    162              OS_CPU_IntHandler,                                                  /* 23, INTISR[ 12]  SI (state change)                 */
    163              OS_CPU_IntHandler,                                                 /* 44, INTISR[ 12]  Ethernet Interrupt                */
    164              OS_CPU_IntHandler,                                                  /* 45, INTISR[ 12]  Repetitive interrupt timer        */
    165              OS_CPU_IntHandler,                                                /* 46, INTISR[ 12]  Motor Control PWM                 */
    166              OS_CPU_IntHandler,                                                  /* 47, INTISR[ 12]  Quadrature Encoder                */
    167              OS_CPU_IntHandler,                                                 /* 48, INTISR[ 12]  PLL1 lock (PLOCK)                 */
    168              OS_CPU_IntHandler,                                          /* 49, INTISR[ 12]  USB Activity                      */
    169              OS_CPU_IntHandler                                          /* 50, INTISR[ 12]  CAN Activity                      */
    170          };
    171          
    172          
    173          /*
    174          *********************************************************************************************************
    175          *                                            App_NMI_ISR()
    176          *
    177          * Description : Handle Non-Maskable Interrupt (NMI).
    178          *
    179          * Argument(s) : none.
    180          *
    181          * Return(s)   : none.
    182          *
    183          * Caller(s)   : This is an ISR.
    184          *
    185          * Note(s)     : (1) Since the NMI is not being used, this serves merely as a catch for a spurious
    186          *                   exception.
    187          *********************************************************************************************************
    188          */
    189          

   \                                 In section .text, align 2, keep-with-next
    190          static  void  App_NMI_ISR (void)
    191          {
    192              while (DEF_TRUE) {
   \                     App_NMI_ISR: (+1)
   \                     ??App_NMI_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_NMI_ISR_0
    193                  ;
    194              }
    195          }
    196          
    197          
    198          /*
    199          *********************************************************************************************************
    200          *                                             App_Fault_ISR()
    201          *
    202          * Description : Handle hard fault.
    203          *
    204          * Argument(s) : none.
    205          *
    206          * Return(s)   : none.
    207          *
    208          * Caller(s)   : This is an ISR.
    209          *
    210          * Note(s)     : none.
    211          *********************************************************************************************************
    212          */
    213          

   \                                 In section .text, align 2, keep-with-next
    214          static  void  App_Fault_ISR (void)
    215          {
    216              while (DEF_TRUE) {
   \                     App_Fault_ISR: (+1)
   \                     ??App_Fault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Fault_ISR_0
    217                  ;
    218              }
    219          }
    220          
    221          
    222          /*
    223          *********************************************************************************************************
    224          *                                           App_BusFault_ISR()
    225          *
    226          * Description : Handle bus fault.
    227          *
    228          * Argument(s) : none.
    229          *
    230          * Return(s)   : none.
    231          *
    232          * Caller(s)   : This is an ISR.
    233          *
    234          * Note(s)     : none.
    235          *********************************************************************************************************
    236          */
    237          

   \                                 In section .text, align 2, keep-with-next
    238          static  void  App_BusFault_ISR (void)
    239          {
    240              while (DEF_TRUE) {
   \                     App_BusFault_ISR: (+1)
   \                     ??App_BusFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_BusFault_ISR_0
    241                  ;
    242              }
    243          }
    244          
    245          
    246          /*
    247          *********************************************************************************************************
    248          *                                          App_UsageFault_ISR()
    249          *
    250          * Description : Handle usage fault.
    251          *
    252          * Argument(s) : none.
    253          *
    254          * Return(s)   : none.
    255          *
    256          * Caller(s)   : This is an ISR.
    257          *
    258          * Note(s)     : none.
    259          *********************************************************************************************************
    260          */
    261          

   \                                 In section .text, align 2, keep-with-next
    262          static  void  App_UsageFault_ISR (void)
    263          {
    264              while (DEF_TRUE) {
   \                     App_UsageFault_ISR: (+1)
   \                     ??App_UsageFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_UsageFault_ISR_0
    265                  ;
    266              }
    267          }
    268          
    269          
    270          /*
    271          *********************************************************************************************************
    272          *                                           App_MemFault_ISR()
    273          *
    274          * Description : Handle memory fault.
    275          *
    276          * Argument(s) : none.
    277          *
    278          * Return(s)   : none.
    279          *
    280          * Caller(s)   : This is an ISR.
    281          *
    282          * Note(s)     : none.
    283          *********************************************************************************************************
    284          */
    285          

   \                                 In section .text, align 2, keep-with-next
    286          static  void  App_MemFault_ISR (void)
    287          {
    288              while (DEF_TRUE) {
   \                     App_MemFault_ISR: (+1)
   \                     ??App_MemFault_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_MemFault_ISR_0
    289                  ;
    290              }
    291          }
    292          
    293          
    294          /*
    295          *********************************************************************************************************
    296          *                                           App_Spurious_ISR()
    297          *
    298          * Description : Handle spurious interrupt.
    299          *
    300          * Argument(s) : none.
    301          *
    302          * Return(s)   : none.
    303          *
    304          * Caller(s)   : This is an ISR.
    305          *
    306          * Note(s)     : none.
    307          *********************************************************************************************************
    308          */
    309          

   \                                 In section .text, align 2, keep-with-next
    310          static  void  App_Spurious_ISR (void)
    311          {
    312              while (DEF_TRUE) {
   \                     App_Spurious_ISR: (+1)
   \                     ??App_Spurious_ISR_0: (+1)
   \   00000000   0xE7FE             B.N      ??App_Spurious_ISR_0
    313                  ;
    314              }
    315          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_BusFault_ISR
       0   App_Fault_ISR
       0   App_MemFault_ISR
       0   App_NMI_ISR
       0   App_Spurious_ISR
       0   App_UsageFault_ISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  App_BusFault_ISR
       2  App_Fault_ISR
       2  App_MemFault_ISR
       2  App_NMI_ISR
       2  App_Spurious_ISR
       2  App_UsageFault_ISR
     204  __vector_table

 
 204 bytes in section .intvec
  12 bytes in section .text
 
  12 bytes of CODE  memory
 204 bytes of CONST memory

Errors: none
Warnings: none
