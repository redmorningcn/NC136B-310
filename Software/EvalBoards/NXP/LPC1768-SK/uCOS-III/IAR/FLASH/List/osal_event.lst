###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Aug/2017  16:25:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal_event.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal_event.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\osal_event.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\osal_event.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal_event.c
      1          /*******************************************************************************
      2           *   Filename:      @osal_event.c
      3           *   Revised:
      4           *   Revision:
      5           *   Writer:        @Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <osal.h>
     20          #include <osal_event.h>
     21          #include <osal_memory.h>
     22          
     23          #if OSAL_EVENT_EN > 0
     24          /*******************************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*******************************************************************************
     29           * TYPEDEFS
     30           */
     31          
     32          /*******************************************************************************
     33           * MACROS
     34           */
     35          
     36          /*******************************************************************************
     37           * LOCAL VARIABLES
     38           */
     39          
     40          /*******************************************************************************
     41           * GLOBAL VARIABLES
     42           */

   \                                 In section .bss, align 4
     43          OsalTadkREC_t   *TaskHead;      //the point to link'head
   \                     TaskHead:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          OsalTadkREC_t   *TaskActive;
   \                     TaskActive:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          osalTid           Task_id;
   \                     Task_id:
   \   00000000                      DS8 4
     46          
     47          #if OSAL_MEM_EN == 0

   \                                 In section .bss, align 4
     48          OsalTadkREC_t   Task[OSAL_MAX_TASKS];
   \                     Task:
   \   00000000                      DS8 240
     49          #endif
     50          
     51          /***********************************************
     52          * 描述： OS接口
     53          */
     54          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )

   \                                 In section .bss, align 4
     55          OS_SEM           Osal_EvtSem;               // 信号量
   \                     Osal_EvtSem:
   \   00000000                      DS8 40
     56          #endif
     57          
     58          /*******************************************************************************
     59           * LOCAL FUNCTIONS
     60           */
     61          
     62          /*******************************************************************************
     63           * GLOBAL FUNCTIONS
     64           */
     65          
     66          /*******************************************************************************
     67           * EXTERN VARIABLES
     68           */
     69          
     70           /*******************************************************************************
     71           * EXTERN FUNCTIONS
     72           */
     73          
     74          /*******************************************************************************
     75           * @fn       osal_init_TaskHead
     76           *
     77           * @brief   init task link's head
     78           *
     79           * @param   none
     80           *
     81           * @return
     82           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     83          void  osal_init_TaskHead(void )
     84          {
     85          #if OSAL_MEM_EN == 0
     86              INT8U       idx;
     87              for ( idx = 0; idx < OSAL_MAX_TASKS; idx++ ) {
   \                     osal_init_TaskHead: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??osal_init_TaskHead_0: (+1)
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x280A             CMP      R0,#+10
   \   00000008   0xDA2B             BGE.N    ??osal_init_TaskHead_1
     88                  Task[idx].next              = (void *)NULL;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x....             LDR.N    R2,??DataTable4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2318             MOVS     R3,#+24
   \   00000012   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000016   0x6011             STR      R1,[R2, #+0]
     89                  Task[idx].events            = 0;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x....             LDR.N    R2,??DataTable4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2318             MOVS     R3,#+24
   \   00000020   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000024   0x6151             STR      R1,[R2, #+20]
     90                  Task[idx].taskID            = 0;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x....             LDR.N    R2,??DataTable4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2318             MOVS     R3,#+24
   \   0000002E   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000032   0x60D1             STR      R1,[R2, #+12]
     91                  Task[idx].taskPriority      = 0;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x....             LDR.N    R2,??DataTable4
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2318             MOVS     R3,#+24
   \   0000003C   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000040   0x7411             STRB     R1,[R2, #+16]
     92                  Task[idx].pfnInit           = (void *)0;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR.N    R2,??DataTable4
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x2318             MOVS     R3,#+24
   \   0000004A   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000004E   0x6051             STR      R1,[R2, #+4]
     93                  Task[idx].pfnEventProcessor = (void *)0;
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x....             LDR.N    R2,??DataTable4
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x2318             MOVS     R3,#+24
   \   00000058   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000005C   0x6091             STR      R1,[R2, #+8]
     94              }
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0xE7D0             B.N      ??osal_init_TaskHead_0
     95          #endif
     96              TaskHead    = (OsalTadkREC_t *)NULL;
   \                     ??osal_init_TaskHead_1: (+1)
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x....             LDR.N    R2,??DataTable4_1
   \   00000066   0x6011             STR      R1,[R2, #+0]
     97              TaskActive  = (OsalTadkREC_t *)NULL;
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x....             LDR.N    R2,??DataTable4_2
   \   0000006C   0x6011             STR      R1,[R2, #+0]
     98              Task_id     = 0;
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x....             LDR.N    R2,??DataTable4_3
   \   00000072   0x6011             STR      R1,[R2, #+0]
     99          
    100           }
   \   00000074   0x4770             BX       LR               ;; return
    101          
    102          /*******************************************************************************
    103           * @fn       osal_Task_init
    104           *
    105           * @brief   init task
    106           *
    107           * @param   none
    108           *
    109           * @return
    110           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    111          void  osal_Task_init(void)
    112          {
   \                     osal_Task_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    113              TaskActive = TaskHead;
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable4_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
    114          
    115              while(TaskActive) {
   \                     ??osal_Task_init_0: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable4_2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD00E             BEQ.N    ??osal_Task_init_1
    116                  if(TaskActive->pfnInit) {
   \   00000012   0x....             LDR.N    R0,??DataTable4_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??osal_Task_init_2
    117                       TaskActive->pfnInit();
   \   0000001C   0x....             LDR.N    R0,??DataTable4_2
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x4780             BLX      R0
    118                  }
    119                  TaskActive = TaskActive->next;
   \                     ??osal_Task_init_2: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable4_2
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x....             LDR.N    R1,??DataTable4_2
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   \   0000002E   0xE7EC             B.N      ??osal_Task_init_0
    120              }
    121              TaskActive = (OsalTadkREC_t *)NULL;
   \                     ??osal_Task_init_1: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable4_2
   \   00000034   0x6008             STR      R0,[R1, #+0]
    122          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    123          /*******************************************************************************
    124          * 修改记录：20140510 增加INT8U id参数，用以任务ID自由分配取代任务ID系统分配
    125          */

   \                                 In section .text, align 2, keep-with-next
    126           void  osal_add_Task(pTaskInitFn pfnInit,
    127                            pTaskEventHandlerFn pfnEventProcessor,
    128                            INT8U taskPriority,INT8U id)
    129          {
   \                     osal_add_Task: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    130              OsalTadkREC_t  *TaskNew;
    131              OsalTadkREC_t  *TaskSech;
    132              OsalTadkREC_t  **TaskPTR;
    133          #if OSAL_MEM_EN > 0
    134              TaskNew = osal_mem_alloc(sizeof( OsalTadkREC_t));
    135          #else
    136              INT8U           idx;
    137              for ( idx = 0; idx < OSAL_MAX_TASKS; idx++ ) {//查找空闲的任务资源，如找到则进行分配；
   \   00000002   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000006   0x4667             MOV      R7,R12
   \                     ??osal_add_Task_0: (+1)
   \   00000008   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000A   0x2F0A             CMP      R7,#+10
   \   0000000C   0xDA16             BGE.N    ??osal_add_Task_1
    138                  if ( !Task[idx].pfnEventProcessor ) {
   \   0000000E   0x.... 0x....      LDR.W    R12,??DataTable4
   \   00000012   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000014   0xF05F 0x0E18      MOVS     LR,#+24
   \   00000018   0xFB0E 0xCC07      MLA      R12,LR,R7,R12
   \   0000001C   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \   00000020   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000024   0xD108             BNE.N    ??osal_add_Task_2
    139                      TaskNew = &Task[idx];
   \   00000026   0x.... 0x....      LDR.W    R12,??DataTable4
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0xF05F 0x0E18      MOVS     LR,#+24
   \   00000030   0xFB0E 0xCC07      MLA      R12,LR,R7,R12
   \   00000034   0x4664             MOV      R4,R12
    140                      break;
   \   00000036   0xE001             B.N      ??osal_add_Task_1
    141                  }
    142              }
   \                     ??osal_add_Task_2: (+1)
   \   00000038   0x1C7F             ADDS     R7,R7,#+1
   \   0000003A   0xE7E5             B.N      ??osal_add_Task_0
    143          #endif
    144              if(TaskNew) {
   \                     ??osal_add_Task_1: (+1)
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD023             BEQ.N    ??osal_add_Task_3
    145                  TaskNew->pfnInit =                      pfnInit;
   \   00000040   0x6060             STR      R0,[R4, #+4]
    146                  TaskNew->pfnEventProcessor =            pfnEventProcessor;
   \   00000042   0x60A1             STR      R1,[R4, #+8]
    147                  TaskNew->taskID =                       id;//Task_id++;
   \   00000044   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000046   0x60E3             STR      R3,[R4, #+12]
    148                  TaskNew->events =                       0;
   \   00000048   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000004C   0xF8C4 0xC014      STR      R12,[R4, #+20]
    149                  TaskNew->taskPriority =                 taskPriority;
   \   00000050   0x7422             STRB     R2,[R4, #+16]
    150                  TaskNew->next =                         (OsalTadkREC_t *)NULL;
   \   00000052   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000056   0xF8C4 0xC000      STR      R12,[R4, #+0]
    151          
    152                  TaskPTR = &TaskHead;
   \   0000005A   0x.... 0x....      LDR.W    R12,??DataTable4_1
   \   0000005E   0x4666             MOV      R6,R12
    153                  TaskSech = TaskHead;                      
   \   00000060   0x.... 0x....      LDR.W    R12,??DataTable4_1
   \   00000064   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000068   0x4665             MOV      R5,R12
    154          
    155                  while(TaskSech)  {
   \                     ??osal_add_Task_4: (+1)
   \   0000006A   0x2D00             CMP      R5,#+0
   \   0000006C   0xD00B             BEQ.N    ??osal_add_Task_5
    156                      if(TaskNew->taskPriority > TaskSech->taskPriority) {
   \   0000006E   0xF895 0xC010      LDRB     R12,[R5, #+16]
   \   00000072   0xF894 0xE010      LDRB     LR,[R4, #+16]
   \   00000076   0x45F4             CMP      R12,LR
   \   00000078   0xD202             BCS.N    ??osal_add_Task_6
    157                          TaskNew->next = TaskSech;
   \   0000007A   0x6025             STR      R5,[R4, #+0]
    158                          *TaskPTR = TaskNew;
   \   0000007C   0x6034             STR      R4,[R6, #+0]
    159                          return;
   \   0000007E   0xE003             B.N      ??osal_add_Task_7
    160                      }
    161                      TaskPTR = &TaskSech->next;
   \                     ??osal_add_Task_6: (+1)
   \   00000080   0x002E             MOVS     R6,R5
    162                      TaskSech = TaskSech->next;
   \   00000082   0x682D             LDR      R5,[R5, #+0]
   \   00000084   0xE7F1             B.N      ??osal_add_Task_4
    163                  }
    164                  *TaskPTR = TaskNew;
   \                     ??osal_add_Task_5: (+1)
   \   00000086   0x6034             STR      R4,[R6, #+0]
    165              }
    166              return;
   \                     ??osal_add_Task_3: (+1)
   \                     ??osal_add_Task_7: (+1)
   \   00000088   0xBDF0             POP      {R4-R7,PC}       ;; return
    167          }
    168          
    169          /*******************************************************************************
    170           * @fn      osalNextActiveTask
    171           *
    172           * @brief   This function will return the next active task.
    173           *
    174           * NOTE:    Task queue is in priority order. We can stop at the
    175           *          first task that is "ready" (events element non-zero)
    176           *
    177           * @param   none
    178           *
    179           * @return  pointer to the found task, NULL if not found
    180           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          OsalTadkREC_t *osalNextActiveTask( void )
    182          {
    183              OsalTadkREC_t  *TaskSech;
    184          
    185              // Start at the beginning
    186              TaskSech = TaskHead;
   \                     osalNextActiveTask: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0001             MOVS     R1,R0
    187          
    188              // When found or not
    189              while (  TaskSech )  {
   \                     ??osalNextActiveTask_0: (+1)
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD006             BEQ.N    ??osalNextActiveTask_1
    190                  if ( TaskSech->events)  {
   \   0000000A   0x6948             LDR      R0,[R1, #+20]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??osalNextActiveTask_2
    191                      // task is highest priority that is ready
    192                      return  TaskSech;
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xE002             B.N      ??osalNextActiveTask_3
    193                  }
    194                  TaskSech =  TaskSech->next;
   \                     ??osalNextActiveTask_2: (+1)
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0xE7F6             B.N      ??osalNextActiveTask_0
    195              }
    196              return NULL;
   \                     ??osalNextActiveTask_1: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??osalNextActiveTask_3: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    197          }
    198          
    199          /*******************************************************************************
    200           * @fn      osalFindActiveTask
    201           *
    202           * @brief   This function will return the taskid task.
    203           *
    204           * NOTE:    Task queue is in priority order. We can stop at the
    205           *          first task that is "ready" (events element non-zero)
    206           *
    207           * @param   task_id
    208           *
    209           * @return  pointer to the found task, NULL if not found
    210           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    211          OsalTadkREC_t *osalFindTask( osalTid taskID )
    212          {
   \                     osalFindTask: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    213              OsalTadkREC_t *TaskSech;
    214              TaskSech = TaskHead;
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0002             MOVS     R2,R0
    215              while(TaskSech) {
   \                     ??osalFindTask_0: (+1)
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD006             BEQ.N    ??osalFindTask_1
    216                  if(TaskSech->taskID == taskID) {
   \   0000000C   0x68D0             LDR      R0,[R2, #+12]
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD101             BNE.N    ??osalFindTask_2
    217                          return (TaskSech);
   \   00000012   0x0010             MOVS     R0,R2
   \   00000014   0xE002             B.N      ??osalFindTask_3
    218                  }
    219                  TaskSech = TaskSech->next;
   \                     ??osalFindTask_2: (+1)
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0xE7F6             B.N      ??osalFindTask_0
    220              }
    221              return ((OsalTadkREC_t *)NULL);
   \                     ??osalFindTask_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??osalFindTask_3: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    222          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     Task

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     TaskHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     TaskActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     Task_id
    223          /*******************************************************************************
    224           * 				end of file                                    *
    225           *******************************************************************************/
    226          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   osalFindTask
       0   osalNextActiveTask
       8   osal_Task_init
         8   -- Indirect call
      20   osal_add_Task
       0   osal_init_TaskHead


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      40  Osal_EvtSem
     240  Task
       4  TaskActive
       4  TaskHead
       4  Task_id
      30  osalFindTask
      28  osalNextActiveTask
      56  osal_Task_init
     138  osal_add_Task
     118  osal_init_TaskHead

 
 292 bytes in section .bss
 386 bytes in section .text
 
 386 bytes of CODE memory
 292 bytes of DATA memory

Errors: none
Warnings: none
