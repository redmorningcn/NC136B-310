###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  14:51:30
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_led.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_led.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_task_osal_led.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_task_osal_led.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_led.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_led.c
      3           *   Revised:        All copyrights reserved to redmorningcn.
      4           *   Revision:       v1.0
      5           *   Writer:	     redmoringcn.
      6           *
      7           *   Description:    双击选中 led 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Led 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 LED 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_LED_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_LED_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskLedCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Led ）
     17           *
     18           *   Notes:
     19           *     				E-mail: redmorningcn@qq.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          #include <global.h>
     29          #include <app_ctrl.h>
     30          //#include <iap.h>
     31          
     32          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     33          const  CPU_CHAR  *app_task_led__c = "$Id: $";
     34          #endif
     35          
     36          #define APP_TASK_LED_EN     DEF_ENABLED
     37          #if APP_TASK_LED_EN == DEF_ENABLED
     38          /*******************************************************************************
     39           * CONSTANTS
     40           */
     41          #define CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ * 2u)
     42          
     43          /*******************************************************************************
     44           * MACROS
     45           */
     46          //#define     BSP_LED_NUM         8
     47          ////LED点亮次数 
     48          //#define     LED_TOGGLE_CNT      15
     49          
     50          
     51          /*******************************************************************************
     52           * TYPEDEFS
     53           */
     54          
     55          /*******************************************************************************
     56           * LOCAL VARIABLES
     57           */
     58          //
     59          //uint8   LedWorkTimes[BSP_LED_NUM + 1] = 0;
     60          
     61          #if ( OSAL_EN == DEF_ENABLED )
     62          #else
     63          /***********************************************
     64          * 描述： 任务控制块（TCB）
     65          */
     66          static  OS_TCB   AppTaskLedTCB;
     67          
     68          /***********************************************
     69          * 描述： 任务堆栈（STACKS）
     70          */
     71          //static  CPU_STK  AppTaskLedStk[ APP_TASK_LED_STK_SIZE ];
     72          
     73          #endif
     74          /*******************************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          /*******************************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          #if ( OSAL_EN == DEF_ENABLED )
     82          #else
     83          static  void    AppTaskLed           (void *p_arg);
     84          #endif
     85          
     86          /*******************************************************************************
     87           * GLOBAL FUNCTIONS
     88           */
     89          
     90          /*******************************************************************************
     91           * EXTERN VARIABLES
     92           */
     93          extern  stcSysCtrl  sCtrl;
     94          
     95          /*******************************************************************************/
     96          
     97          
     98          /*******************************************************************************
     99           * 名    称： AppTaskLed
    100           * 功    能： 控制任务
    101           * 入口参数： p_arg - 由任务创建函数传入
    102           * 出口参数： 无
    103           * 作　 　者： wumingshen.
    104           * 创建日期： 2015-02-05
    105           * 修    改：
    106           * 修改日期：
    107           *******************************************************************************/
    108          
    109          //#if ( OSAL_EN == DEF_ENABLED )

   \                                 In section .text, align 2, keep-with-next
    110          osalEvt  TaskLedEvtProcess(INT8U task_id, osalEvt task_event)
    111          //#else
    112          //static  void  AppTaskLed (void *p_arg)
    113          //#endif
    114          {
   \                     TaskLedEvtProcess: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    115          //    OS_ERR      err;
    116          //    INT32U      ticks;
    117          //    INT32S      dly;
    118          //    CPU_SR_ALLOC();
    119          //    
    120          //    /***********************************************
    121          //    * 描述：Task body, always written as an infinite loop.
    122          //    */
    123          //#if ( OSAL_EN == DEF_ENABLED )
    124          //#else
    125          //    TaskInitLed();
    126          //    
    127          //    while (DEF_TRUE) {
    128          //#endif
    129          //        /***********************************************
    130          //        * 描述： 本任务看门狗标志置位
    131          //        */
    132          //        OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    133          //                     (OS_FLAGS     ) WDT_FLAG_LED,
    134          //                     (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    135          //                     (CPU_TS       ) 0,
    136          //                     (OS_ERR      *) &err);
    137          //        /***********************************************
    138          //        * 描述： 得到系统当前时间
    139          //        */
    140          //        ticks = OSTimeGet(&err);
    141          //        
    142          //#if ( OSAL_EN == DEF_ENABLED )
    143                  if( task_event & OS_EVT_LED_TICKS ) {
   \   00000006   0x07E8             LSLS     R0,R5,#+31
   \   00000008   0xD57D             BPL.N    ??TaskLedEvtProcess_0
    144          //#else
    145          //#endif
    146                      static  uint8   mode = 0;
    147                      /***********************************************
    148                      * 描述： 开机显示
    149                      */
    150                      while(mode < 9)
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2809             CMP      R0,#+9
   \   00000010   0xDA11             BGE.N    ??TaskLedEvtProcess_1
    151                      {
    152                          mode++;
   \   00000012   0x....             LDR.N    R0,??DataTable0
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable0
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    153                          BSP_LED_On(mode);
   \   0000001C   0x....             LDR.N    R0,??DataTable0
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       BSP_LED_On
    154                          osal_start_timerEx( OS_TASK_ID_LED,
    155                                              OS_EVT_LED_TICKS,
    156                                              600);
   \   00000024   0xF44F 0x7216      MOV      R2,#+600
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2006             MOVS     R0,#+6
   \   0000002C   0x.... 0x....      BL       osal_start_timerEx
    157                          return ( task_event ^ OS_EVT_LED_TICKS );
   \   00000030   0xF095 0x0001      EORS     R0,R5,#0x1
   \   00000034   0xE068             B.N      ??TaskLedEvtProcess_2
    158                      }
    159          
    160                      
    161                      /***********************************************
    162                      * 描述： MTR接口通讯指示,有通讯数据，指示灯闪烁
    163                      */
    164                      //if(sCtrl.Mtr.pch->RxBufByteCtr){
    165                      if(sCtrl.Mtr.ConnectFlag){
   \                     ??TaskLedEvtProcess_1: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable0_1
   \   00000038   0xF890 0x03AC      LDRB     R0,[R0, #+940]
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x09C0             LSRS     R0,R0,#+7
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD003             BEQ.N    ??TaskLedEvtProcess_3
    166                          BSP_LED_Toggle(1);  //对应指示灯点亮
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       BSP_LED_Toggle
   \   0000004C   0xE002             B.N      ??TaskLedEvtProcess_4
    167                      }else{
    168                          BSP_LED_Off(1);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_3: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       BSP_LED_Off
    169                      }
    170                      
    171                      
    172                      /***********************************************
    173                      * 描述： OTR接口通讯指示,有通讯数据，指示灯闪烁
    174                      */
    175                      if(sCtrl.Otr.ConnectFlag){
   \                     ??TaskLedEvtProcess_4: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable0_1
   \   00000056   0xF890 0x066E      LDRB     R0,[R0, #+1646]
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x09C0             LSRS     R0,R0,#+7
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD003             BEQ.N    ??TaskLedEvtProcess_5
    176                          BSP_LED_Toggle(2);  //对应指示灯点亮
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       BSP_LED_Toggle
   \   0000006A   0xE002             B.N      ??TaskLedEvtProcess_6
    177                      }else{
    178                          BSP_LED_Off(2);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_5: (+1)
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0x.... 0x....      BL       BSP_LED_Off
    179                      }
    180                      
    181                      /***********************************************
    182                      * 描述： DTU借口通讯指示,有通讯数据，指示灯闪烁
    183                      */
    184                      if(sCtrl.Dtu.ConnectFlag){
   \                     ??TaskLedEvtProcess_6: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable0_1
   \   00000074   0xF890 0x050D      LDRB     R0,[R0, #+1293]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x09C0             LSRS     R0,R0,#+7
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD003             BEQ.N    ??TaskLedEvtProcess_7
    185                          BSP_LED_Toggle(3);  //对应指示灯点亮
   \   00000082   0x2003             MOVS     R0,#+3
   \   00000084   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000088   0xE002             B.N      ??TaskLedEvtProcess_8
    186                      }else{
    187                          BSP_LED_Off(3);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_7: (+1)
   \   0000008A   0x2003             MOVS     R0,#+3
   \   0000008C   0x.... 0x....      BL       BSP_LED_Off
    188                      }
    189                      
    190                      /***********************************************
    191                      * 描述： 有速度信号，指示灯闪烁。如果无速度信号，
    192                      * 在取计算值超时清零。
    193                      */
    194                      if(sCtrl.sRec.Myspeed1){
   \                     ??TaskLedEvtProcess_8: (+1)
   \   00000090   0x....             LDR.N    R0,??DataTable0_1
   \   00000092   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD003             BEQ.N    ??TaskLedEvtProcess_9
    195                          BSP_LED_Toggle(4);  //对应指示灯点亮
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x.... 0x....      BL       BSP_LED_Toggle
   \   000000A0   0xE002             B.N      ??TaskLedEvtProcess_10
    196                      }else{
    197                          BSP_LED_Off(4);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_9: (+1)
   \   000000A2   0x2004             MOVS     R0,#+4
   \   000000A4   0x.... 0x....      BL       BSP_LED_Off
    198                      }
    199                      
    200                      /***********************************************
    201                      * 描述： 有速度信号，指示灯闪烁
    202                      * 无信号时，在取计算值超时清零。
    203                      */
    204                      if(sCtrl.sRec.Myspeed2){
   \                     ??TaskLedEvtProcess_10: (+1)
   \   000000A8   0x....             LDR.N    R0,??DataTable0_1
   \   000000AA   0xF8B0 0x0052      LDRH     R0,[R0, #+82]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD003             BEQ.N    ??TaskLedEvtProcess_11
    205                          BSP_LED_Toggle(5);  //对应指示灯点亮
   \   000000B2   0x2005             MOVS     R0,#+5
   \   000000B4   0x.... 0x....      BL       BSP_LED_Toggle
   \   000000B8   0xE002             B.N      ??TaskLedEvtProcess_12
    206                      }else{
    207                          BSP_LED_Off(5);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_11: (+1)
   \   000000BA   0x2005             MOVS     R0,#+5
   \   000000BC   0x.... 0x....      BL       BSP_LED_Off
    208                      }
    209                      
    210                      /***********************************************
    211                      * 描述： 有速度信号，指示灯闪烁
    212                      * 无信号时，在取计算值超时时清零。
    213                      */
    214                      if(sCtrl.sRec.MyEngRotSpd){
   \                     ??TaskLedEvtProcess_12: (+1)
   \   000000C0   0x....             LDR.N    R0,??DataTable0_1
   \   000000C2   0xF9B0 0x0082      LDRSH    R0,[R0, #+130]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD003             BEQ.N    ??TaskLedEvtProcess_13
    215                          BSP_LED_Toggle(6);  //对应指示灯点亮
   \   000000CA   0x2006             MOVS     R0,#+6
   \   000000CC   0x.... 0x....      BL       BSP_LED_Toggle
   \   000000D0   0xE002             B.N      ??TaskLedEvtProcess_14
    216                      }else{
    217                          BSP_LED_Off(6);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_13: (+1)
   \   000000D2   0x2006             MOVS     R0,#+6
   \   000000D4   0x.... 0x....      BL       BSP_LED_Off
    218                      }
    219                      
    220                      /***********************************************
    221                      * 描述： 工况有信号
    222                      * 
    223                      */
    224                      if(sCtrl.sRec.MyLocoWorkState){
   \                     ??TaskLedEvtProcess_14: (+1)
   \   000000D8   0x....             LDR.N    R0,??DataTable0_1
   \   000000DA   0xF890 0x0099      LDRB     R0,[R0, #+153]
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD003             BEQ.N    ??TaskLedEvtProcess_15
    225                          BSP_LED_Toggle(7);  //对应指示灯点亮
   \   000000E2   0x2007             MOVS     R0,#+7
   \   000000E4   0x.... 0x....      BL       BSP_LED_Toggle
   \   000000E8   0xE002             B.N      ??TaskLedEvtProcess_16
    226                      }else{
    227                          BSP_LED_Off(7);     //对应指示灯点关闭
   \                     ??TaskLedEvtProcess_15: (+1)
   \   000000EA   0x2007             MOVS     R0,#+7
   \   000000EC   0x.... 0x....      BL       BSP_LED_Off
    228                      }
    229                      
    230                      /***********************************************
    231                      * 描述： 运行指示灯
    232                      */
    233                      BSP_LED_Toggle(8);
   \                     ??TaskLedEvtProcess_16: (+1)
   \   000000F0   0x2008             MOVS     R0,#+8
   \   000000F2   0x.... 0x....      BL       BSP_LED_Toggle
    234          //            LedWorkTimes[8] = LED_TOGGLE_CNT;
    235          
    236                      /***********************************************
    237                      * 描述： 根据工作次数，点亮相应的指示。
    238                      */
    239          //            for(uint8 i=1;i<BSP_LED_NUM+1;i++){
    240          //                if(LedWorkTimes[i]){
    241          //                    LedWorkTimes[i]--;
    242          //                    BSP_LED_Toggle(i);  //对应指示灯点亮
    243          //                }else{
    244          //                    BSP_LED_Off(i);     //对应指示灯点关闭
    245          //                }
    246          //            }
    247          
    248                      /***********************************************
    249                      * 描述： 定时器重启
    250                      */
    251                      osal_start_timerEx( OS_TASK_ID_LED,
    252                                          OS_EVT_LED_TICKS,
    253                                          100);
   \   000000F6   0x2264             MOVS     R2,#+100
   \   000000F8   0x2101             MOVS     R1,#+1
   \   000000FA   0x2006             MOVS     R0,#+6
   \   000000FC   0x.... 0x....      BL       osal_start_timerEx
    254                      return ( task_event ^ OS_EVT_LED_TICKS );
   \   00000100   0xF095 0x0001      EORS     R0,R5,#0x1
   \   00000104   0xE000             B.N      ??TaskLedEvtProcess_2
    255                  }
    256                  
    257                  return  task_event;
   \                     ??TaskLedEvtProcess_0: (+1)
   \   00000106   0x0028             MOVS     R0,R5
   \                     ??TaskLedEvtProcess_2: (+1)
   \   00000108   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    258          }

   \                                 In section .bss, align 1
   \                     ??mode:
   \   00000000                      DS8 1
    259          
    260          
    261          /*******************************************************************************
    262           * 名    称：APP_LedInit
    263           * 功    能：任务初始化
    264           * 入口参数：无
    265           * 出口参数：无
    266           * 作　 　者：redmorningcn.
    267           * 创建日期：2017-05-15
    268           * 修    改：
    269           * 修改日期：
    270           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    271          void TaskInitLed(void)
    272          {    
   \                     TaskInitLed: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    273          //    /***********************************************
    274          //    * 描述： 初始化本任务用到的相关硬件
    275          //    */
    276          //    BSP_LedInit();
    277          
    278              /***********************************************
    279              * 描述： 在看门狗标志组注册本任务的看门狗标志
    280              */
    281              //WdtFlags |= WDT_FLAG_LED;
    282              /*************************************************
    283              * 描述：启动事件查询
    284              */
    285          //    for(uint8 i = 0; i< 8;i++)
    286          //    {
    287          //        LedWorkTimes[i] = 0;
    288          //    }
    289          //    
    290              osal_start_timerEx( OS_TASK_ID_LED,
    291                                  OS_EVT_LED_TICKS,
    292                                  1000);
   \   00000002   0xF44F 0x727A      MOV      R2,#+1000
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2006             MOVS     R0,#+6
   \   0000000A   0x.... 0x....      BL       osal_start_timerEx
    293          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ??mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     sCtrl
    294          
    295          /*******************************************************************************
    296           * 				                    end of file                                *
    297           *******************************************************************************/
    298          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TaskInitLed
         8   -> osal_start_timerEx
      16   TaskLedEvtProcess
        16   -> BSP_LED_Off
        16   -> BSP_LED_On
        16   -> BSP_LED_Toggle
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      16  TaskInitLed
     266  TaskLedEvtProcess
       1  mode

 
   1 byte  in section .bss
 290 bytes in section .text
 
 290 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
