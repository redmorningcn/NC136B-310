###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       30/Sep/2017  11:25:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\SlaveConTask\csnr.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\SlaveConTask\csnr.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\csnr.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\csnr.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\SlaveConTask\csnr.c
      1          #include <includes.h>
      2          
      3          
      4          #define         FRAM_HERD0     		0x10         	//报文头
      5          #define         FRAM_HERD1     		0x28       		//报文头				
      6          #define     	HOST_ID      		10				//上位机地址	  		   
      7          #define   		DEVICE_ID0      	15				//本机地址0	
      8          #define   		DEVICE_ID1      	15				//本机地址1	
      9          	   
     10          #define			RS485_CHK_SUM		0x02			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     11          #define			RS485_CHK_CRC		0x01			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     12          #define			RS485_CHK_RESUM		0x03			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     13          
     14          #define         FRAM_END0     		0x10         	//报文尾
     15          #define         FRAM_END1     		0x2C       		//报文尾	
     16          
     17          ////////////////////////////////////mdk 0
     18          
     19           
     20          
     21          ////////////////////////////////////////////
     22          

   \                                 In section .bss, align 1
     23          unsigned char   l_recslaveaddr = 0;
   \                     l_recslaveaddr:
   \   00000000                      DS8 1
     24          
     25          //----------------------------------------------------------------------------
     26          // 名    称：   
     27          // 功    能：   接
     28          // 入口参数：   无
     29          // 出口参数：   无
     30          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     31          unsigned char  CSNR_GetData(unsigned char	*RecBuf,unsigned char RecLen,unsigned char	*DataBuf,unsigned char	*InfoLen)
     32          {
   \                     CSNR_GetData: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x4693             MOV      R11,R2
     33              unsigned short		i,j,k;
     34              unsigned char			SumCheck8;
     35              unsigned char			Tmp;
     36              unsigned short		RecCRC16,Check16;
     37          	
     38          		unsigned char 		SourceAddr;	
     39          		unsigned char			DataLen;
     40          
     41          	
     42          //	*InfoLen  = 0；
     43          	
     44          	if(RecLen < 10)  //(8+4)
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D0A             CMP      R5,#+10
   \   00000010   0xDA01             BGE.N    ??CSNR_GetData_0
     45          			return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE0C7             B.N      ??CSNR_GetData_1
     46            
     47          	for(j = 0;j < RecLen ;j++ )														//去重复通讯首字节
   \                     ??CSNR_GetData_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4682             MOV      R10,R0
   \                     ??CSNR_GetData_2: (+1)
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x4582             CMP      R10,R0
   \   00000026   0xD224             BCS.N    ??CSNR_GetData_3
     48          	{
     49          		if(	 	RecBuf[j] 	== FRAM_HERD0
     50          			&& 	RecBuf[j+1] == FRAM_HERD0
     51          		   )
   \   00000028   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000002C   0xF81A 0x0004      LDRB     R0,[R10, R4]
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xD11B             BNE.N    ??CSNR_GetData_4
   \   00000034   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000038   0xEB1A 0x0004      ADDS     R0,R10,R4
   \   0000003C   0x7840             LDRB     R0,[R0, #+1]
   \   0000003E   0x2810             CMP      R0,#+16
   \   00000040   0xD114             BNE.N    ??CSNR_GetData_4
     52          		{
     53          			for(k = j;k < RecLen; k++)
   \   00000042   0x46D1             MOV      R9,R10
   \                     ??CSNR_GetData_5: (+1)
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x4581             CMP      R9,R0
   \   00000050   0xD20C             BCS.N    ??CSNR_GetData_4
     54          			{
     55          				Tmp	 = RecBuf[k+1];
   \   00000052   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000056   0xEB19 0x0004      ADDS     R0,R9,R4
   \   0000005A   0x7840             LDRB     R0,[R0, #+1]
   \   0000005C   0x0007             MOVS     R7,R0
     56          				
     57          				RecBuf[k] = Tmp;
   \   0000005E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000062   0xF809 0x7004      STRB     R7,[R9, R4]
     58          			}
   \   00000066   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000006A   0xE7EB             B.N      ??CSNR_GetData_5
     59          		}
     60          	}
   \                     ??CSNR_GetData_4: (+1)
   \   0000006C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000070   0xE7D3             B.N      ??CSNR_GetData_2
     61          	
     62              for(i = 0; i < RecLen - (8+4);i++)												//循环遍历
   \                     ??CSNR_GetData_3: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x0006             MOVS     R6,R0
   \                     ??CSNR_GetData_6: (+1)
   \   00000076   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000078   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007A   0xF1B5 0x000C      SUBS     R0,R5,#+12
   \   0000007E   0x4286             CMP      R6,R0
   \   00000080   0xF280 0x808E      BGE.W    ??CSNR_GetData_7
     63              {
     64          		if(		((RecBuf[i+0]) == FRAM_HERD0) 
     65          			&& 	((RecBuf[i+1]) == FRAM_HERD1)		
     66          		  )																		//报头
   \   00000084   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000086   0x5D30             LDRB     R0,[R6, R4]
   \   00000088   0x2810             CMP      R0,#+16
   \   0000008A   0xF040 0x8087      BNE.W    ??CSNR_GetData_8
   \   0000008E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000090   0x1930             ADDS     R0,R6,R4
   \   00000092   0x7840             LDRB     R0,[R0, #+1]
   \   00000094   0x2828             CMP      R0,#+40
   \   00000096   0xF040 0x8081      BNE.W    ??CSNR_GetData_8
     67          		{
     68          			DataLen = RecBuf[i+6];
   \   0000009A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009C   0x1930             ADDS     R0,R6,R4
   \   0000009E   0x7980             LDRB     R0,[R0, #+6]
   \   000000A0   0x4680             MOV      R8,R0
     69          			//PrintfCOM0(("\r\n DataLen %d,%x,%x",DataLen,RecBuf[i+10+DataLen],RecBuf[i+11+DataLen]);
     70          			if(		
     71          					//	(RecBuf[i+2] != DeviceID) 				||
     72          					  //	(RecBuf[i+3] != HOST_ID) 				||
     73          						 (i+10+DataLen)  > RecLen							||
     74          				 		(RecBuf[i+10+DataLen] 	!= FRAM_END0)	||
     75          				 	 	(RecBuf[i+11+DataLen] 	!= FRAM_END1)
     76          			 )
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000AA   0xEB18 0x0006      ADDS     R0,R8,R6
   \   000000AE   0x300A             ADDS     R0,R0,#+10
   \   000000B0   0x4285             CMP      R5,R0
   \   000000B2   0xDB11             BLT.N    ??CSNR_GetData_9
   \   000000B4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000B6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000BA   0xEB18 0x0006      ADDS     R0,R8,R6
   \   000000BE   0x1900             ADDS     R0,R0,R4
   \   000000C0   0x7A80             LDRB     R0,[R0, #+10]
   \   000000C2   0x2810             CMP      R0,#+16
   \   000000C4   0xD108             BNE.N    ??CSNR_GetData_9
   \   000000C6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000CC   0xEB18 0x0006      ADDS     R0,R8,R6
   \   000000D0   0x1900             ADDS     R0,R0,R4
   \   000000D2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000D4   0x282C             CMP      R0,#+44
   \   000000D6   0xD000             BEQ.N    ??CSNR_GetData_10
     77          			 {	
     78          //			 	i = i + 10 + DataLen;											//地址不对或帧尾错误，跳过此帧
     79          			 	continue;
   \                     ??CSNR_GetData_9: (+1)
   \   000000D8   0xE060             B.N      ??CSNR_GetData_8
     80          			 }
     81          			
     82          			 
     83          			SumCheck8 = GetCheckSumNR((unsigned char *)&RecBuf[i+2],5);		   				//索引区校验
   \                     ??CSNR_GetData_10: (+1)
   \   000000DA   0x2105             MOVS     R1,#+5
   \   000000DC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000DE   0x1930             ADDS     R0,R6,R4
   \   000000E0   0x1C80             ADDS     R0,R0,#+2
   \   000000E2   0x.... 0x....      BL       GetCheckSumNR
   \   000000E6   0xF88D 0x0001      STRB     R0,[SP, #+1]
     84          			
     85          			if(		SumCheck8 != 	RecBuf[i+7] )
   \   000000EA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000EE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000F0   0x1931             ADDS     R1,R6,R4
   \   000000F2   0x79C9             LDRB     R1,[R1, #+7]
   \   000000F4   0x4288             CMP      R0,R1
   \   000000F6   0xD151             BNE.N    ??CSNR_GetData_8
     86          			{	
     87          				continue;
     88          			}
     89          			 
     90          			SourceAddr = RecBuf[i+2];	
   \                     ??CSNR_GetData_11: (+1)
   \   000000F8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000FA   0x1930             ADDS     R0,R6,R4
   \   000000FC   0x7880             LDRB     R0,[R0, #+2]
   \   000000FE   0xF88D 0x0000      STRB     R0,[SP, #+0]
     91          			l_recslaveaddr = RecBuf[i+3];	
   \   00000102   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000104   0x1930             ADDS     R0,R6,R4
   \   00000106   0x78C0             LDRB     R0,[R0, #+3]
   \   00000108   0x....             LDR.N    R1,??DataTable1
   \   0000010A   0x7008             STRB     R0,[R1, #+0]
     92          			//PrintfCOM0(("\r\n 号 %x",RecBuf[i+4]);				
     93          			DataLen = RecBuf[i+6];
   \   0000010C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000010E   0x1930             ADDS     R0,R6,R4
   \   00000110   0x7980             LDRB     R0,[R0, #+6]
   \   00000112   0x4680             MOV      R8,R0
     94          			*InfoLen = DataLen; 
   \   00000114   0x9804             LDR      R0,[SP, #+16]
   \   00000116   0xF880 0x8000      STRB     R8,[R0, #+0]
     95          			
     96          			 
     97          			RecCRC16 = ((unsigned short)RecBuf[i+8+DataLen]) *256 + RecBuf[i+9+DataLen];	//校验	
   \   0000011A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000011C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000120   0xEB18 0x0006      ADDS     R0,R8,R6
   \   00000124   0x1900             ADDS     R0,R0,R4
   \   00000126   0x7A00             LDRB     R0,[R0, #+8]
   \   00000128   0xF44F 0x7180      MOV      R1,#+256
   \   0000012C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000012E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000132   0xEB18 0x0206      ADDS     R2,R8,R6
   \   00000136   0x1912             ADDS     R2,R2,R4
   \   00000138   0x7A52             LDRB     R2,[R2, #+9]
   \   0000013A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000013E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     98          
     99          			switch(RecBuf[i+5]>>4)													//校验和算法判断
   \   00000142   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000144   0x1930             ADDS     R0,R6,R4
   \   00000146   0x7940             LDRB     R0,[R0, #+5]
   \   00000148   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014A   0x0900             LSRS     R0,R0,#+4
   \   0000014C   0x2801             CMP      R0,#+1
   \   0000014E   0xD004             BEQ.N    ??CSNR_GetData_12
   \   00000150   0xD310             BCC.N    ??CSNR_GetData_13
   \   00000152   0x2803             CMP      R0,#+3
   \   00000154   0xD00E             BEQ.N    ??CSNR_GetData_14
   \   00000156   0xD20D             BCS.N    ??CSNR_GetData_13
    100          			{
    101          					case	RS485_CHK_SUM:
    102          									//Check16 = GetCheckSum16(&RecBuf[i+2],6+DataLen);
    103          									////PrintfCOM0(("\r\n 16位校验和！");
    104          									break;
   \                     ??CSNR_GetData_15: (+1)
   \   00000158   0xE00C             B.N      ??CSNR_GetData_13
    105          					case	RS485_CHK_CRC:
    106          									Check16 = GetCrc16Check(&RecBuf[i+2],6+DataLen);
   \                     ??CSNR_GetData_12: (+1)
   \   0000015A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015E   0xF118 0x0106      ADDS     R1,R8,#+6
   \   00000162   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000164   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000166   0x1930             ADDS     R0,R6,R4
   \   00000168   0x1C80             ADDS     R0,R0,#+2
   \   0000016A   0x.... 0x....      BL       GetCrc16Check
   \   0000016E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    107          									////PrintfCOM0(("\r\n CRC校验！");
    108          									break;
   \   00000172   0xE7FF             B.N      ??CSNR_GetData_13
    109          					case	RS485_CHK_RESUM:
    110          									break;
    111          			}
    112          			
    113          			if(	RecCRC16  ==	Check16 )
   \                     ??CSNR_GetData_14: (+1)
   \                     ??CSNR_GetData_13: (+1)
   \   00000174   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000178   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000017C   0x4288             CMP      R0,R1
   \   0000017E   0xD10D             BNE.N    ??CSNR_GetData_8
    114          			{
    115          				 memcpy(DataBuf,&RecBuf[i+8],DataLen);				//数据拷贝
   \   00000180   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000184   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000186   0x1930             ADDS     R0,R6,R4
   \   00000188   0x3008             ADDS     R0,R0,#+8
   \   0000018A   0x9002             STR      R0,[SP, #+8]
   \   0000018C   0x4642             MOV      R2,R8
   \   0000018E   0x9902             LDR      R1,[SP, #+8]
   \   00000190   0x4658             MOV      R0,R11
   \   00000192   0x.... 0x....      BL       __aeabi_memcpy
    116          				 
    117          				 //return	1;				//SourceAddr
    118          				 return		SourceAddr;
   \   00000196   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000019A   0xE004             B.N      ??CSNR_GetData_1
    119          			}
    120          		}
    121          	}
   \                     ??CSNR_GetData_8: (+1)
   \   0000019C   0x1C76             ADDS     R6,R6,#+1
   \   0000019E   0xE76A             B.N      ??CSNR_GetData_6
    122          		
    123          		DataLen = 0;
   \                     ??CSNR_GetData_7: (+1)
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x4680             MOV      R8,R0
    124              return	0;
   \   000001A4   0x2000             MOVS     R0,#+0
   \                     ??CSNR_GetData_1: (+1)
   \   000001A6   0xB005             ADD      SP,SP,#+20
   \   000001A8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    125          }
    126          
    127          extern  MODBUS_CH   *g_pch; 
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void	DataSend_CSNR(unsigned char SourceAddr,unsigned char DistAddr,unsigned char	*DataBuf,unsigned int	DataLen)
    130          {
   \                     DataSend_CSNR: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xF5AD 0x7D02      SUB      SP,SP,#+520
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0015             MOVS     R5,R2
   \   0000000C   0x001E             MOVS     R6,R3
    131          	unsigned char	SndBuf[256] = {0};
   \   0000000E   0xA841             ADD      R0,SP,#+260
   \   00000010   0xF44F 0x7180      MOV      R1,#+256
   \   00000014   0x.... 0x....      BL       __aeabi_memclr4
    132          	unsigned char	SndBufTmp[256] = {0};
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0xF44F 0x7180      MOV      R1,#+256
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr4
    133          	unsigned char	SumCheck8;
    134          	unsigned short	Crc16;
    135          	unsigned short	AddHeadNum;
    136          	unsigned short	i;
    137          	unsigned char	ByteStation;
    138          	static	unsigned char FramNum =0;						//序号
    139          	
    140          	ByteStation = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x4682             MOV      R10,R0
    141          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   00000026   0x2010             MOVS     R0,#+16
   \   00000028   0xA941             ADD      R1,SP,#+260
   \   0000002A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000002E   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   00000032   0xF11A 0x0A01      ADDS     R10,R10,#+1
    142          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   00000036   0x2028             MOVS     R0,#+40
   \   00000038   0xA941             ADD      R1,SP,#+260
   \   0000003A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000003E   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   00000042   0xF11A 0x0A01      ADDS     R10,R10,#+1
    143          	SndBuf[ByteStation++] = SourceAddr;	 
   \   00000046   0xF89D 0x0208      LDRB     R0,[SP, #+520]
   \   0000004A   0xA941             ADD      R1,SP,#+260
   \   0000004C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000050   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   00000054   0xF11A 0x0A01      ADDS     R10,R10,#+1
    144          	SndBuf[ByteStation++] = DistAddr;				//地址
   \   00000058   0xA841             ADD      R0,SP,#+260
   \   0000005A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000005E   0xF80A 0x4000      STRB     R4,[R10, R0]
   \   00000062   0xF11A 0x0A01      ADDS     R10,R10,#+1
    145          	SndBuf[ByteStation++] = FramNum++;	
   \   00000066   0x....             LDR.N    R0,??DataTable1_1
   \   00000068   0x7800             LDRB     R0,[R0, #+0]
   \   0000006A   0xA941             ADD      R1,SP,#+260
   \   0000006C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000070   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   00000074   0x....             LDR.N    R0,??DataTable1_1
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x....             LDR.N    R1,??DataTable1_1
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
   \   0000007E   0xF11A 0x0A01      ADDS     R10,R10,#+1
    146          	SndBuf[ByteStation++] = RS485_CHK_CRC<<4;	
   \   00000082   0x2010             MOVS     R0,#+16
   \   00000084   0xA941             ADD      R1,SP,#+260
   \   00000086   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000008A   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   0000008E   0xF11A 0x0A01      ADDS     R10,R10,#+1
    147          	SndBuf[ByteStation++] = DataLen;
   \   00000092   0xA841             ADD      R0,SP,#+260
   \   00000094   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000098   0xF80A 0x6000      STRB     R6,[R10, R0]
   \   0000009C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    148          	
    149          //	SumCheck8 = GetCheckSum(&SndBuf[2],5);		   	//索引区校验
    150          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	//索引区校验
   \   000000A0   0x2105             MOVS     R1,#+5
   \   000000A2   0xF50D 0x7083      ADD      R0,SP,#+262
   \   000000A6   0x.... 0x....      BL       GetCheckSumNR
   \   000000AA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    151          
    152          	SndBuf[ByteStation++] = SumCheck8;
   \   000000AE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B2   0xA941             ADD      R1,SP,#+260
   \   000000B4   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000B8   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   000000BC   0xF11A 0x0A01      ADDS     R10,R10,#+1
    153          
    154          	memcpy(&SndBuf[8],DataBuf,DataLen);
   \   000000C0   0xF50D 0x7B86      ADD      R11,SP,#+268
   \   000000C4   0x0032             MOVS     R2,R6
   \   000000C6   0x0029             MOVS     R1,R5
   \   000000C8   0x4658             MOV      R0,R11
   \   000000CA   0x.... 0x....      BL       __aeabi_memcpy
    155          
    156          	Crc16 = GetCrc16Check(&SndBuf[2],6+DataLen);
   \   000000CE   0x1DB1             ADDS     R1,R6,#+6
   \   000000D0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D2   0xF50D 0x7083      ADD      R0,SP,#+262
   \   000000D6   0x.... 0x....      BL       GetCrc16Check
   \   000000DA   0x0007             MOVS     R7,R0
    157          
    158          	//memcpy(&SndBuf[2+6+DataLen],(unsigned char *)&Crc16,sizeof(Crc16));
    159          	
    160          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000DC   0xA841             ADD      R0,SP,#+260
   \   000000DE   0x1830             ADDS     R0,R6,R0
   \   000000E0   0x7247             STRB     R7,[R0, #+9]
    161          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000E2   0x0038             MOVS     R0,R7
   \   000000E4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E6   0x0A00             LSRS     R0,R0,#+8
   \   000000E8   0xA941             ADD      R1,SP,#+260
   \   000000EA   0x1871             ADDS     R1,R6,R1
   \   000000EC   0x7208             STRB     R0,[R1, #+8]
    162          
    163          	SndBufTmp[0] = SndBuf[0];						//准备数据发送
   \   000000EE   0xF89D 0x0104      LDRB     R0,[SP, #+260]
   \   000000F2   0xF88D 0x0004      STRB     R0,[SP, #+4]
    164          	SndBufTmp[1] = SndBuf[1];
   \   000000F6   0xF89D 0x0105      LDRB     R0,[SP, #+261]
   \   000000FA   0xF88D 0x0005      STRB     R0,[SP, #+5]
    165          	
    166          	AddHeadNum = 0;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x4680             MOV      R8,R0
    167          	for(i = 2; i< 2+6+DataLen + 2;i++ )				//数据，补移位 FRAM_HERD0
   \   00000102   0x2002             MOVS     R0,#+2
   \   00000104   0x4681             MOV      R9,R0
   \                     ??DataSend_CSNR_0: (+1)
   \   00000106   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000010A   0xF116 0x000A      ADDS     R0,R6,#+10
   \   0000010E   0x4581             CMP      R9,R0
   \   00000110   0xD222             BCS.N    ??DataSend_CSNR_1
    168          	{
    169          		SndBufTmp[i+AddHeadNum] = SndBuf[i];
   \   00000112   0xA841             ADD      R0,SP,#+260
   \   00000114   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000118   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000011C   0xA901             ADD      R1,SP,#+4
   \   0000011E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000122   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000126   0xEB18 0x0209      ADDS     R2,R8,R9
   \   0000012A   0x5450             STRB     R0,[R2, R1]
    170          		
    171          		if(SndBuf[i] == FRAM_HERD0)
   \   0000012C   0xA841             ADD      R0,SP,#+260
   \   0000012E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000132   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000136   0x2810             CMP      R0,#+16
   \   00000138   0xD10B             BNE.N    ??DataSend_CSNR_2
    172          		{
    173          			SndBufTmp[i+AddHeadNum+1] = FRAM_HERD0;
   \   0000013A   0xA801             ADD      R0,SP,#+4
   \   0000013C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000140   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000144   0xEB18 0x0109      ADDS     R1,R8,R9
   \   00000148   0x1808             ADDS     R0,R1,R0
   \   0000014A   0x2110             MOVS     R1,#+16
   \   0000014C   0x7041             STRB     R1,[R0, #+1]
    174          			AddHeadNum++;
   \   0000014E   0xF118 0x0801      ADDS     R8,R8,#+1
    175          		}
    176          	}
   \                     ??DataSend_CSNR_2: (+1)
   \   00000152   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000156   0xE7D6             B.N      ??DataSend_CSNR_0
    177          
    178          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum] = FRAM_END0;
   \                     ??DataSend_CSNR_1: (+1)
   \   00000158   0x2010             MOVS     R0,#+16
   \   0000015A   0xA901             ADD      R1,SP,#+4
   \   0000015C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000160   0xEB18 0x0206      ADDS     R2,R8,R6
   \   00000164   0x1851             ADDS     R1,R2,R1
   \   00000166   0x7288             STRB     R0,[R1, #+10]
    179          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum+1] = FRAM_END1;      
   \   00000168   0x202C             MOVS     R0,#+44
   \   0000016A   0xA901             ADD      R1,SP,#+4
   \   0000016C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000170   0xEB18 0x0206      ADDS     R2,R8,R6
   \   00000174   0x1851             ADDS     R1,R2,R1
   \   00000176   0x72C8             STRB     R0,[R1, #+11]
    180          	
    181              
    182              CPU_INT16U nbr_bytes= (2+6+DataLen + 2 +AddHeadNum +2);
   \   00000178   0xEB18 0x0006      ADDS     R0,R8,R6
   \   0000017C   0xF110 0x0B0C      ADDS     R11,R0,#+12
    183              if ( nbr_bytes < MB_DATA_NBR_REGS * 2 ) {        
   \   00000180   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000184   0xF1BB 0x0FFA      CMP      R11,#+250
   \   00000188   0xDA06             BGE.N    ??DataSend_CSNR_3
    184                  NMB_Tx(g_pch,
    185                         (CPU_INT08U  *)SndBufTmp,
    186                         (CPU_INT16U   )nbr_bytes);
   \   0000018A   0x465A             MOV      R2,R11
   \   0000018C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000018E   0xA901             ADD      R1,SP,#+4
   \   00000190   0x....             LDR.N    R0,??DataTable1_2
   \   00000192   0x6800             LDR      R0,[R0, #+0]
   \   00000194   0x.... 0x....      BL       NMB_Tx
    187              }
    188          //	//地址判断
    189          //	if((DistAddr & 0xA0) == 0xA0)
    190          //	{
    191          //		//SendCOM1(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ;
    192          //      
    193          //	}
    194          //	else if((DistAddr & 0xC0) == 0xC0)
    195          //	{
    196          //        //SendCOM2(SndBufTmp, 2+6+DataLen + 2 +AddHeadNum +2) ; 
    197          //	}
    198          }
   \                     ??DataSend_CSNR_3: (+1)
   \   00000198   0xF50D 0x7D03      ADD      SP,SP,#+524
   \   0000019C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 1
   \                     ??FramNum:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     l_recslaveaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ??FramNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     g_pch

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   CSNR_GetData
        56   -> GetCheckSumNR
        56   -> GetCrc16Check
        56   -> __aeabi_memcpy
     560   DataSend_CSNR
       560   -> GetCheckSumNR
       560   -> GetCrc16Check
       560   -> NMB_Tx
       560   -> __aeabi_memclr4
       560   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
     256  ?_0
     256  ?_1
     428  CSNR_GetData
     416  DataSend_CSNR
       1  FramNum
       1  l_recslaveaddr

 
   2 bytes in section .bss
 512 bytes in section .rodata
 856 bytes in section .text
 
 856 bytes of CODE  memory
 512 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: 2
