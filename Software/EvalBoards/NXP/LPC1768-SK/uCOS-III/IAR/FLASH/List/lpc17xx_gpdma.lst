###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  21:02:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_gpdma.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_gpdma.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_gpdma.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_gpdma.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_gpdma.c
      1          /**********************************************************************
      2          * $Id$		lpc17xx_gpdma.c				2010-03-21
      3          *//**
      4          * @file		lpc17xx_gpdma.c
      5          * @brief	Contains all functions support for GPDMA firmware
      6          * 			library on LPC17xx
      7          * @version	2.1
      8          * @date		25. July. 2011
      9          * @author	NXP MCU SW Application Team
     10          *
     11          * Copyright(C) 2010, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          * Permission to use, copy, modify, and distribute this software and its
     26          * documentation is hereby granted, under NXP Semiconductors'
     27          * relevant copyright in the software, without fee, provided that it
     28          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     29          * copyright, permission, and disclaimer notice must appear in all copies of
     30          * this code.
     31          **********************************************************************/
     32          
     33          /* Peripheral group ----------------------------------------------------------- */
     34          /** @addtogroup GPDMA
     35           * @{
     36           */
     37          
     38          /* Includes ------------------------------------------------------------------- */
     39          #include "lpc17xx_gpdma.h"
     40          #include "lpc17xx_clkpwr.h"
     41          
     42          /* If this source file built with example, the LPC17xx FW library configuration
     43           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     44           * otherwise the default FW library configuration file must be included instead
     45           */
     46          #ifdef __BUILD_WITH_EXAMPLE__
     47          #include "lpc17xx_libcfg.h"
     48          #else
     49          #include "lpc17xx_libcfg_default.h"
     50          #endif /* __BUILD_WITH_EXAMPLE__ */
     51          
     52          #ifdef _GPDMA
     53          
     54          
     55          /* Private Variables ---------------------------------------------------------- */
     56          /** @defgroup GPDMA_Private_Variables GPDMA Private Variables
     57           * @{
     58           */
     59          
     60          /**
     61           * @brief Lookup Table of Connection Type matched with
     62           * Peripheral Data (FIFO) register base address
     63           */
     64          //#ifdef __IAR_SYSTEMS_ICC__

   \                                 In section .data, align 4
     65          volatile const void *GPDMA_LUTPerAddr[] = {
   \                     GPDMA_LUTPerAddr:
   \   00000000   0x40088008         DC32 40088008H, 40088008H, 40030008H, 40030008H, 40034004H, 400A8008H
   \              0x40088008   
   \              0x40030008   
   \              0x40030008   
   \              0x40034004   
   \              0x400A8008   
   \   00000018   0x400A800C         DC32 400A800CH, 4008C000H, 4000C000H, 4000C000H, 40010000H, 40010000H
   \              0x4008C000   
   \              0x4000C000   
   \              0x4000C000   
   \              0x40010000   
   \              0x40010000   
   \   00000030   0x40098000         DC32 40098000H, 40098000H, 4009C000H, 4009C000H, 40004018H, 4000401CH
   \              0x40098000   
   \              0x4009C000   
   \              0x4009C000   
   \              0x40004018   
   \              0x4000401C   
   \   00000048   0x40008018         DC32 40008018H, 4000801CH, 40090018H, 4009001CH, 40094018H, 4009401CH
   \              0x4000801C   
   \              0x40090018   
   \              0x4009001C   
   \              0x40094018   
   \              0x4009401C   
     66          		(&LPC_SSP0->DR),				// SSP0 Tx
     67          		(&LPC_SSP0->DR),				// SSP0 Rx
     68          		(&LPC_SSP1->DR),				// SSP1 Tx
     69          		(&LPC_SSP1->DR),				// SSP1 Rx
     70          		(&LPC_ADC->ADGDR),			// ADC
     71          		(&LPC_I2S->I2STXFIFO), 		// I2S Tx
     72          		(&LPC_I2S->I2SRXFIFO), 		// I2S Rx
     73          		(&LPC_DAC->DACR),				// DAC
     74          		(&LPC_UART0->/*RBTHDLR.*/THR),	// UART0 Tx
     75          		(&LPC_UART0->/*RBTHDLR.*/RBR),	// UART0 Rx
     76          		(&LPC_UART1->/*RBTHDLR.*/THR),	// UART1 Tx
     77          		(&LPC_UART1->/*RBTHDLR.*/RBR),	// UART1 Rx
     78          		(&LPC_UART2->/*RBTHDLR.*/THR),	// UART2 Tx
     79          		(&LPC_UART2->/*RBTHDLR.*/RBR),	// UART2 Rx
     80          		(&LPC_UART3->/*RBTHDLR.*/THR),	// UART3 Tx
     81          		(&LPC_UART3->/*RBTHDLR.*/RBR),	// UART3 Rx
     82          		(&LPC_TIM0->MR0),				// MAT0.0
     83          		(&LPC_TIM0->MR1),				// MAT0.1
     84          		(&LPC_TIM1->MR0),				// MAT1.0
     85          		(&LPC_TIM1->MR1),				// MAT1.1
     86          		(&LPC_TIM2->MR0),				// MAT2.0
     87          		(&LPC_TIM2->MR1),				// MAT2.1
     88          		(&LPC_TIM3->MR0),				// MAT3.0
     89          		(&LPC_TIM3->MR1)				// MAT3.1
     90          };
     91          //#else
     92          //const uint32_t GPDMA_LUTPerAddr[] = {
     93          //		((uint32_t)&LPC_SSP0->DR), 				// SSP0 Tx
     94          //		((uint32_t)&LPC_SSP0->DR), 				// SSP0 Rx
     95          //		((uint32_t)&LPC_SSP1->DR),				// SSP1 Tx
     96          //		((uint32_t)&LPC_SSP1->DR),				// SSP1 Rx
     97          //		((uint32_t)&LPC_ADC->ADGDR),			// ADC
     98          //		((uint32_t)&LPC_I2S->I2STXFIFO), 		// I2S Tx
     99          //		((uint32_t)&LPC_I2S->I2SRXFIFO), 		// I2S Rx
    100          //		((uint32_t)&LPC_DAC->DACR),				// DAC
    101          //		((uint32_t)&LPC_UART0->/*RBTHDLR.*/THR),	// UART0 Tx
    102          //		((uint32_t)&LPC_UART0->/*RBTHDLR.*/RBR),	// UART0 Rx
    103          //		((uint32_t)&LPC_UART1->/*RBTHDLR.*/THR),	// UART1 Tx
    104          //		((uint32_t)&LPC_UART1->/*RBTHDLR.*/RBR),	// UART1 Rx
    105          //		((uint32_t)&LPC_UART2->/*RBTHDLR.*/THR),	// UART2 Tx
    106          //		((uint32_t)&LPC_UART2->/*RBTHDLR.*/RBR),	// UART2 Rx
    107          //		((uint32_t)&LPC_UART3->/*RBTHDLR.*/THR),	// UART3 Tx
    108          //		((uint32_t)&LPC_UART3->/*RBTHDLR.*/RBR),	// UART3 Rx
    109          //		((uint32_t)&LPC_TIM0->MR0),				// MAT0.0
    110          //		((uint32_t)&LPC_TIM0->MR1),				// MAT0.1
    111          //		((uint32_t)&LPC_TIM1->MR0),				// MAT1.0
    112          //		((uint32_t)&LPC_TIM1->MR1),				// MAT1.1
    113          //		((uint32_t)&LPC_TIM2->MR0),				// MAT2.0
    114          //		((uint32_t)&LPC_TIM2->MR1),				// MAT2.1
    115          //		((uint32_t)&LPC_TIM3->MR0),				// MAT3.0
    116          //		((uint32_t)&LPC_TIM3->MR1)				// MAT3.1
    117          //};
    118          //#endif
    119          /**
    120           * @brief Lookup Table of GPDMA Channel Number matched with
    121           * GPDMA channel pointer
    122           */

   \                                 In section .data, align 4
    123          const LPC_GPDMACH_TypeDef *pGPDMACh[8] = {
   \                     pGPDMACh:
   \   00000000   0x50004100         DC32 50004100H, 50004120H, 50004140H, 50004160H, 50004180H, 500041A0H
   \              0x50004120   
   \              0x50004140   
   \              0x50004160   
   \              0x50004180   
   \              0x500041A0   
   \   00000018   0x500041C0         DC32 500041C0H, 500041E0H
   \              0x500041E0   
    124          		LPC_GPDMACH0,	// GPDMA Channel 0
    125          		LPC_GPDMACH1,	// GPDMA Channel 1
    126          		LPC_GPDMACH2,	// GPDMA Channel 2
    127          		LPC_GPDMACH3,	// GPDMA Channel 3
    128          		LPC_GPDMACH4,	// GPDMA Channel 4
    129          		LPC_GPDMACH5,	// GPDMA Channel 5
    130          		LPC_GPDMACH6,	// GPDMA Channel 6
    131          		LPC_GPDMACH7	// GPDMA Channel 7
    132          };
    133          /**
    134           * @brief Optimized Peripheral Source and Destination burst size
    135           */

   \                                 In section .rodata, align 4
    136          const uint8_t GPDMA_LUTPerBurst[] = {
   \                     GPDMA_LUTPerBurst:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x01    
   \              0x00 0x04    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00               DC8 0
    137          		GPDMA_BSIZE_4,				// SSP0 Tx
    138          		GPDMA_BSIZE_4,				// SSP0 Rx
    139          		GPDMA_BSIZE_4,				// SSP1 Tx
    140          		GPDMA_BSIZE_4,				// SSP1 Rx
    141          		GPDMA_BSIZE_1,				// ADC
    142          		GPDMA_BSIZE_32, 			// I2S channel 0
    143          		GPDMA_BSIZE_32, 			// I2S channel 1
    144          		GPDMA_BSIZE_1,				// DAC
    145          		GPDMA_BSIZE_1,				// UART0 Tx
    146          		GPDMA_BSIZE_1,				// UART0 Rx
    147          		GPDMA_BSIZE_1,				// UART1 Tx
    148          		GPDMA_BSIZE_1,				// UART1 Rx
    149          		GPDMA_BSIZE_1,				// UART2 Tx
    150          		GPDMA_BSIZE_1,				// UART2 Rx
    151          		GPDMA_BSIZE_1,				// UART3 Tx
    152          		GPDMA_BSIZE_1,				// UART3 Rx
    153          		GPDMA_BSIZE_1,				// MAT0.0
    154          		GPDMA_BSIZE_1,				// MAT0.1
    155          		GPDMA_BSIZE_1,				// MAT1.0
    156          		GPDMA_BSIZE_1,				// MAT1.1
    157          		GPDMA_BSIZE_1,				// MAT2.0
    158          		GPDMA_BSIZE_1,				// MAT2.1
    159          		GPDMA_BSIZE_1,				// MAT3.0
    160          		GPDMA_BSIZE_1				// MAT3.1
    161          };
    162          /**
    163           * @brief Optimized Peripheral Source and Destination transfer width
    164           */

   \                                 In section .rodata, align 4
    165          const uint8_t GPDMA_LUTPerWid[] = {
   \                     GPDMA_LUTPerWid:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02         
   \   00000017   0x02               DC8 2
    166          		GPDMA_WIDTH_BYTE,				// SSP0 Tx
    167          		GPDMA_WIDTH_BYTE,				// SSP0 Rx
    168          		GPDMA_WIDTH_BYTE,				// SSP1 Tx
    169          		GPDMA_WIDTH_BYTE,				// SSP1 Rx
    170          		GPDMA_WIDTH_WORD,				// ADC
    171          		GPDMA_WIDTH_WORD, 				// I2S channel 0
    172          		GPDMA_WIDTH_WORD, 				// I2S channel 1
    173          		GPDMA_WIDTH_BYTE,				// DAC
    174          		GPDMA_WIDTH_BYTE,				// UART0 Tx
    175          		GPDMA_WIDTH_BYTE,				// UART0 Rx
    176          		GPDMA_WIDTH_BYTE,				// UART1 Tx
    177          		GPDMA_WIDTH_BYTE,				// UART1 Rx
    178          		GPDMA_WIDTH_BYTE,				// UART2 Tx
    179          		GPDMA_WIDTH_BYTE,				// UART2 Rx
    180          		GPDMA_WIDTH_BYTE,				// UART3 Tx
    181          		GPDMA_WIDTH_BYTE,				// UART3 Rx
    182          		GPDMA_WIDTH_WORD,				// MAT0.0
    183          		GPDMA_WIDTH_WORD,				// MAT0.1
    184          		GPDMA_WIDTH_WORD,				// MAT1.0
    185          		GPDMA_WIDTH_WORD,				// MAT1.1
    186          		GPDMA_WIDTH_WORD,				// MAT2.0
    187          		GPDMA_WIDTH_WORD,				// MAT2.1
    188          		GPDMA_WIDTH_WORD,				// MAT3.0
    189          		GPDMA_WIDTH_WORD				// MAT3.1
    190          };
    191          
    192          /**
    193           * @}
    194           */
    195          
    196          /* Public Functions ----------------------------------------------------------- */
    197          /** @addtogroup GPDMA_Public_Functions
    198           * @{
    199           */
    200          
    201          /********************************************************************//**
    202           * @brief 		Initialize GPDMA controller
    203           * @param 		None
    204           * @return 		None
    205           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    206          void GPDMA_Init(void)
    207          {
   \                     GPDMA_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    208          	/* Enable GPDMA clock */
    209          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCGPDMA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x5000      MOVS     R0,#+536870912
   \   00000008   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    210          
    211          	// Reset all channel configuration register
    212          	LPC_GPDMACH0->DMACCConfig = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0x50004110
   \   00000012   0x6008             STR      R0,[R1, #+0]
    213          	LPC_GPDMACH1->DMACCConfig = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable4_1  ;; 0x50004130
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    214          	LPC_GPDMACH2->DMACCConfig = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0x50004150
   \   00000022   0x6008             STR      R0,[R1, #+0]
    215          	LPC_GPDMACH3->DMACCConfig = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable4_3  ;; 0x50004170
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    216          	LPC_GPDMACH4->DMACCConfig = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable4_4  ;; 0x50004190
   \   00000032   0x6008             STR      R0,[R1, #+0]
    217          	LPC_GPDMACH5->DMACCConfig = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable4_5  ;; 0x500041b0
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    218          	LPC_GPDMACH6->DMACCConfig = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable4_6  ;; 0x500041d0
   \   00000042   0x6008             STR      R0,[R1, #+0]
    219          	LPC_GPDMACH7->DMACCConfig = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable4_7  ;; 0x500041f0
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    220          
    221          	/* Clear all DMA interrupt and error flag */
    222          	LPC_GPDMA->DMACIntTCClear = 0xFF;
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable4_8  ;; 0x50004008
   \   00000052   0x6008             STR      R0,[R1, #+0]
    223          	LPC_GPDMA->DMACIntErrClr = 0xFF;
   \   00000054   0x20FF             MOVS     R0,#+255
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable4_9  ;; 0x50004010
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    224          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    225          
    226          /********************************************************************//**
    227           * @brief 		Setup GPDMA channel peripheral according to the specified
    228           *               parameters in the 0..
    229           * @param[in]	GPDMAChannelConfig Pointer to a GPDMA_CH_CFG_Type
    230           * 									structure that contains the configuration
    231           * 									information for the specified GPDMA channel peripheral.
    232           * @return		ERROR if selected channel is enabled before
    233           * 				or SUCCESS if channel is configured successfully
    234           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    235          Status GPDMA_Setup(GPDMA_Channel_CFG_Type *GPDMAChannelConfig)
    236          {
   \                     GPDMA_Setup: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0001             MOVS     R1,R0
    237          	LPC_GPDMACH_TypeDef *pDMAch;
    238          	uint32_t tmp1, tmp2;
    239          
    240          	if (LPC_GPDMA->DMACEnbldChns & (GPDMA_DMACEnbldChns_Ch(GPDMAChannelConfig->ChannelNum))) {
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable4_10  ;; 0x5000401c
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2501             MOVS     R5,#+1
   \   0000000C   0x680E             LDR      R6,[R1, #+0]
   \   0000000E   0x40B5             LSLS     R5,R5,R6
   \   00000010   0x4028             ANDS     R0,R5,R0
   \   00000012   0x0600             LSLS     R0,R0,#+24
   \   00000014   0xD001             BEQ.N    ??GPDMA_Setup_0
    241          		// This channel is enabled, return ERROR, need to release this channel first
    242          		return ERROR;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE10B             B.N      ??GPDMA_Setup_1
    243          	}
    244          
    245          	// Get Channel pointer
    246          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[GPDMAChannelConfig->ChannelNum];
   \                     ??GPDMA_Setup_0: (+1)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable4_11
   \   0000001E   0x680D             LDR      R5,[R1, #+0]
   \   00000020   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000024   0x0002             MOVS     R2,R0
    247          
    248          	// Reset the Interrupt status
    249          	LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(GPDMAChannelConfig->ChannelNum);
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x680D             LDR      R5,[R1, #+0]
   \   0000002A   0x40A8             LSLS     R0,R0,R5
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x.... 0x....      LDR.W    R5,??DataTable4_8  ;; 0x50004008
   \   00000032   0x6028             STR      R0,[R5, #+0]
    250          	LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(GPDMAChannelConfig->ChannelNum);
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x680D             LDR      R5,[R1, #+0]
   \   00000038   0x40A8             LSLS     R0,R0,R5
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R5,??DataTable4_9  ;; 0x50004010
   \   00000040   0x6028             STR      R0,[R5, #+0]
    251          
    252          	// Clear DMA configure
    253          	pDMAch->DMACCControl = 0x00;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x60D0             STR      R0,[R2, #+12]
    254          	pDMAch->DMACCConfig = 0x00;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x6110             STR      R0,[R2, #+16]
    255          
    256          	/* Assign Linker List Item value */
    257          	pDMAch->DMACCLLI = GPDMAChannelConfig->DMALLI;
   \   0000004A   0x6A08             LDR      R0,[R1, #+32]
   \   0000004C   0x6090             STR      R0,[R2, #+8]
    258          
    259          	/* Set value to Channel Control Registers */
    260          	switch (GPDMAChannelConfig->TransferType)
   \   0000004E   0x6948             LDR      R0,[R1, #+20]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD005             BEQ.N    ??GPDMA_Setup_2
   \   00000054   0x2802             CMP      R0,#+2
   \   00000056   0xD044             BEQ.N    ??GPDMA_Setup_3
   \   00000058   0xD319             BCC.N    ??GPDMA_Setup_4
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD06B             BEQ.N    ??GPDMA_Setup_5
   \   0000005E   0xE097             B.N      ??GPDMA_Setup_6
    261          	{
    262          	// Memory to memory
    263          	case GPDMA_TRANSFERTYPE_M2M:
    264          		// Assign physical source and destination address
    265          		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_2: (+1)
   \   00000060   0x68C8             LDR      R0,[R1, #+12]
   \   00000062   0x6010             STR      R0,[R2, #+0]
    266          		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   00000064   0x6908             LDR      R0,[R1, #+16]
   \   00000066   0x6050             STR      R0,[R2, #+4]
    267          		pDMAch->DMACCControl
    268          				= GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize) \
    269          						| GPDMA_DMACCxControl_SBSize(GPDMA_BSIZE_32) \
    270          						| GPDMA_DMACCxControl_DBSize(GPDMA_BSIZE_32) \
    271          						| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth) \
    272          						| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth) \
    273          						| GPDMA_DMACCxControl_SI \
    274          						| GPDMA_DMACCxControl_DI \
    275          						| GPDMA_DMACCxControl_I;
   \   00000068   0x6848             LDR      R0,[R1, #+4]
   \   0000006A   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000006C   0x0D00             LSRS     R0,R0,#+20
   \   0000006E   0x7A0D             LDRB     R5,[R1, #+8]
   \   00000070   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000074   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   00000078   0x7A0D             LDRB     R5,[R1, #+8]
   \   0000007A   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000007E   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   00000082   0xF040 0x400C      ORR      R0,R0,#0x8C000000
   \   00000086   0xF450 0x3010      ORRS     R0,R0,#0x24000
   \   0000008A   0x60D0             STR      R0,[R2, #+12]
    276          		break;
   \   0000008C   0xE082             B.N      ??GPDMA_Setup_7
    277          	// Memory to peripheral
    278          	case GPDMA_TRANSFERTYPE_M2P:
    279          		// Assign physical source
    280          		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_4: (+1)
   \   0000008E   0x68C8             LDR      R0,[R1, #+12]
   \   00000090   0x6010             STR      R0,[R2, #+0]
    281          		// Assign peripheral destination address
    282          		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000092   0x....             LDR.N    R0,??DataTable4_12
   \   00000094   0x69CD             LDR      R5,[R1, #+28]
   \   00000096   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000009A   0x6050             STR      R0,[R2, #+4]
    283          		pDMAch->DMACCControl
    284          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    285          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    286          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    287          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    288          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    289          						| GPDMA_DMACCxControl_SI \
    290          						| GPDMA_DMACCxControl_I;
   \   0000009C   0x6848             LDR      R0,[R1, #+4]
   \   0000009E   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000A0   0x0D00             LSRS     R0,R0,#+20
   \   000000A2   0x....             LDR.N    R5,??DataTable4_13
   \   000000A4   0x69CE             LDR      R6,[R1, #+28]
   \   000000A6   0x5D75             LDRB     R5,[R6, R5]
   \   000000A8   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000AC   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   000000B0   0x....             LDR.N    R5,??DataTable4_13
   \   000000B2   0x69CE             LDR      R6,[R1, #+28]
   \   000000B4   0x5D75             LDRB     R5,[R6, R5]
   \   000000B6   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000BA   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   000000BE   0x....             LDR.N    R5,??DataTable4_14
   \   000000C0   0x69CE             LDR      R6,[R1, #+28]
   \   000000C2   0x5D75             LDRB     R5,[R6, R5]
   \   000000C4   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000C8   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   000000CC   0x....             LDR.N    R5,??DataTable4_14
   \   000000CE   0x69CE             LDR      R6,[R1, #+28]
   \   000000D0   0x5D75             LDRB     R5,[R6, R5]
   \   000000D2   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000D6   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   000000DA   0xF050 0x4004      ORRS     R0,R0,#0x84000000
   \   000000DE   0x60D0             STR      R0,[R2, #+12]
    291          		break;
   \   000000E0   0xE058             B.N      ??GPDMA_Setup_7
    292          	// Peripheral to memory
    293          	case GPDMA_TRANSFERTYPE_P2M:
    294          		// Assign peripheral source address
    295          		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_3: (+1)
   \   000000E2   0x....             LDR.N    R0,??DataTable4_12
   \   000000E4   0x698D             LDR      R5,[R1, #+24]
   \   000000E6   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000EA   0x6010             STR      R0,[R2, #+0]
    296          		// Assign memory destination address
    297          		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   000000EC   0x6908             LDR      R0,[R1, #+16]
   \   000000EE   0x6050             STR      R0,[R2, #+4]
    298          		pDMAch->DMACCControl
    299          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    300          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    301          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    302          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    303          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    304          						| GPDMA_DMACCxControl_DI \
    305          						| GPDMA_DMACCxControl_I;
   \   000000F0   0x6848             LDR      R0,[R1, #+4]
   \   000000F2   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000F4   0x0D00             LSRS     R0,R0,#+20
   \   000000F6   0x....             LDR.N    R5,??DataTable4_13
   \   000000F8   0x698E             LDR      R6,[R1, #+24]
   \   000000FA   0x5D75             LDRB     R5,[R6, R5]
   \   000000FC   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000100   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   00000104   0x....             LDR.N    R5,??DataTable4_13
   \   00000106   0x698E             LDR      R6,[R1, #+24]
   \   00000108   0x5D75             LDRB     R5,[R6, R5]
   \   0000010A   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000010E   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   00000112   0x....             LDR.N    R5,??DataTable4_14
   \   00000114   0x698E             LDR      R6,[R1, #+24]
   \   00000116   0x5D75             LDRB     R5,[R6, R5]
   \   00000118   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000011C   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   00000120   0x....             LDR.N    R5,??DataTable4_14
   \   00000122   0x698E             LDR      R6,[R1, #+24]
   \   00000124   0x5D75             LDRB     R5,[R6, R5]
   \   00000126   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000012A   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   0000012E   0xF050 0x4008      ORRS     R0,R0,#0x88000000
   \   00000132   0x60D0             STR      R0,[R2, #+12]
    306          		break;
   \   00000134   0xE02E             B.N      ??GPDMA_Setup_7
    307          	// Peripheral to peripheral
    308          	case GPDMA_TRANSFERTYPE_P2P:
    309          		// Assign peripheral source address
    310          		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_5: (+1)
   \   00000136   0x....             LDR.N    R0,??DataTable4_12
   \   00000138   0x698D             LDR      R5,[R1, #+24]
   \   0000013A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000013E   0x6010             STR      R0,[R2, #+0]
    311          		// Assign peripheral destination address
    312          		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000140   0x....             LDR.N    R0,??DataTable4_12
   \   00000142   0x69CD             LDR      R5,[R1, #+28]
   \   00000144   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000148   0x6050             STR      R0,[R2, #+4]
    313          		pDMAch->DMACCControl
    314          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    315          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    316          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    317          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    318          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    319          						| GPDMA_DMACCxControl_I;
   \   0000014A   0x6848             LDR      R0,[R1, #+4]
   \   0000014C   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000014E   0x0D00             LSRS     R0,R0,#+20
   \   00000150   0x....             LDR.N    R5,??DataTable4_13
   \   00000152   0x698E             LDR      R6,[R1, #+24]
   \   00000154   0x5D75             LDRB     R5,[R6, R5]
   \   00000156   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000015A   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   0000015E   0x....             LDR.N    R5,??DataTable4_13
   \   00000160   0x69CE             LDR      R6,[R1, #+28]
   \   00000162   0x5D75             LDRB     R5,[R6, R5]
   \   00000164   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000168   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   0000016C   0x....             LDR.N    R5,??DataTable4_14
   \   0000016E   0x698E             LDR      R6,[R1, #+24]
   \   00000170   0x5D75             LDRB     R5,[R6, R5]
   \   00000172   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000176   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   0000017A   0x....             LDR.N    R5,??DataTable4_14
   \   0000017C   0x69CE             LDR      R6,[R1, #+28]
   \   0000017E   0x5D75             LDRB     R5,[R6, R5]
   \   00000180   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000184   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   00000188   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   0000018C   0x60D0             STR      R0,[R2, #+12]
    320          		break;
   \   0000018E   0xE001             B.N      ??GPDMA_Setup_7
    321          	// Do not support any more transfer type, return ERROR
    322          	default:
    323          		return ERROR;
   \                     ??GPDMA_Setup_6: (+1)
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0xE04E             B.N      ??GPDMA_Setup_1
    324          	}
    325          
    326          	/* Re-Configure DMA Request Select for source peripheral */
    327          	if (GPDMAChannelConfig->SrcConn > 15)
   \                     ??GPDMA_Setup_7: (+1)
   \   00000194   0x6988             LDR      R0,[R1, #+24]
   \   00000196   0x2810             CMP      R0,#+16
   \   00000198   0xD309             BCC.N    ??GPDMA_Setup_8
    328          	{
    329          		LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->SrcConn - 16));
   \   0000019A   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x2501             MOVS     R5,#+1
   \   000001A0   0x698E             LDR      R6,[R1, #+24]
   \   000001A2   0x3E10             SUBS     R6,R6,#+16
   \   000001A4   0x40B5             LSLS     R5,R5,R6
   \   000001A6   0x4328             ORRS     R0,R5,R0
   \   000001A8   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001AA   0x6028             STR      R0,[R5, #+0]
   \   000001AC   0xE008             B.N      ??GPDMA_Setup_9
    330          	} else {
    331          		LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->SrcConn - 8));
   \                     ??GPDMA_Setup_8: (+1)
   \   000001AE   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0x2501             MOVS     R5,#+1
   \   000001B4   0x698E             LDR      R6,[R1, #+24]
   \   000001B6   0x3E08             SUBS     R6,R6,#+8
   \   000001B8   0x40B5             LSLS     R5,R5,R6
   \   000001BA   0x43A8             BICS     R0,R0,R5
   \   000001BC   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001BE   0x6028             STR      R0,[R5, #+0]
    332          	}
    333          
    334          	/* Re-Configure DMA Request Select for Destination peripheral */
    335          	if (GPDMAChannelConfig->DstConn > 15)
   \                     ??GPDMA_Setup_9: (+1)
   \   000001C0   0x69C8             LDR      R0,[R1, #+28]
   \   000001C2   0x2810             CMP      R0,#+16
   \   000001C4   0xD309             BCC.N    ??GPDMA_Setup_10
    336          	{
    337          		LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->DstConn - 16));
   \   000001C6   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0x2501             MOVS     R5,#+1
   \   000001CC   0x69CE             LDR      R6,[R1, #+28]
   \   000001CE   0x3E10             SUBS     R6,R6,#+16
   \   000001D0   0x40B5             LSLS     R5,R5,R6
   \   000001D2   0x4328             ORRS     R0,R5,R0
   \   000001D4   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001D6   0x6028             STR      R0,[R5, #+0]
   \   000001D8   0xE008             B.N      ??GPDMA_Setup_11
    338          	} else {
    339          		LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->DstConn - 8));
   \                     ??GPDMA_Setup_10: (+1)
   \   000001DA   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x2501             MOVS     R5,#+1
   \   000001E0   0x69CE             LDR      R6,[R1, #+28]
   \   000001E2   0x3E08             SUBS     R6,R6,#+8
   \   000001E4   0x40B5             LSLS     R5,R5,R6
   \   000001E6   0x43A8             BICS     R0,R0,R5
   \   000001E8   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001EA   0x6028             STR      R0,[R5, #+0]
    340          	}
    341          
    342          	/* Enable DMA channels, little endian */
    343          	LPC_GPDMA->DMACConfig = GPDMA_DMACConfig_E;
   \                     ??GPDMA_Setup_11: (+1)
   \   000001EC   0x2001             MOVS     R0,#+1
   \   000001EE   0x....             LDR.N    R5,??DataTable4_16  ;; 0x50004030
   \   000001F0   0x6028             STR      R0,[R5, #+0]
    344          	while (!(LPC_GPDMA->DMACConfig & GPDMA_DMACConfig_E));
   \                     ??GPDMA_Setup_12: (+1)
   \   000001F2   0x....             LDR.N    R0,??DataTable4_16  ;; 0x50004030
   \   000001F4   0x6800             LDR      R0,[R0, #+0]
   \   000001F6   0x07C0             LSLS     R0,R0,#+31
   \   000001F8   0xD5FB             BPL.N    ??GPDMA_Setup_12
    345          
    346          	// Calculate absolute value for Connection number
    347          	tmp1 = GPDMAChannelConfig->SrcConn;
   \   000001FA   0x6988             LDR      R0,[R1, #+24]
   \   000001FC   0x0003             MOVS     R3,R0
    348          	tmp1 = ((tmp1 > 15) ? (tmp1 - 8) : tmp1);
   \   000001FE   0x2B10             CMP      R3,#+16
   \   00000200   0xD301             BCC.N    ??GPDMA_Setup_13
   \   00000202   0x3B08             SUBS     R3,R3,#+8
   \   00000204   0xE7FF             B.N      ??GPDMA_Setup_14
    349          	tmp2 = GPDMAChannelConfig->DstConn;
   \                     ??GPDMA_Setup_13: (+1)
   \                     ??GPDMA_Setup_14: (+1)
   \   00000206   0x69C8             LDR      R0,[R1, #+28]
   \   00000208   0x0004             MOVS     R4,R0
    350          	tmp2 = ((tmp2 > 15) ? (tmp2 - 8) : tmp2);
   \   0000020A   0x2C10             CMP      R4,#+16
   \   0000020C   0xD301             BCC.N    ??GPDMA_Setup_15
   \   0000020E   0x3C08             SUBS     R4,R4,#+8
   \   00000210   0xE7FF             B.N      ??GPDMA_Setup_16
    351          
    352          	// Configure DMA Channel, enable Error Counter and Terminate counter
    353          	pDMAch->DMACCConfig = GPDMA_DMACCxConfig_IE | GPDMA_DMACCxConfig_ITC /*| GPDMA_DMACCxConfig_E*/ \
    354          		| GPDMA_DMACCxConfig_TransferType((uint32_t)GPDMAChannelConfig->TransferType) \
    355          		| GPDMA_DMACCxConfig_SrcPeripheral(tmp1) \
    356          		| GPDMA_DMACCxConfig_DestPeripheral(tmp2);
   \                     ??GPDMA_Setup_15: (+1)
   \                     ??GPDMA_Setup_16: (+1)
   \   00000212   0x7D08             LDRB     R0,[R1, #+20]
   \   00000214   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000218   0xF013 0x051F      ANDS     R5,R3,#0x1F
   \   0000021C   0x006D             LSLS     R5,R5,#+1
   \   0000021E   0xEA55 0x20C0      ORRS     R0,R5,R0, LSL #+11
   \   00000222   0xF014 0x051F      ANDS     R5,R4,#0x1F
   \   00000226   0xEA50 0x1085      ORRS     R0,R0,R5, LSL #+6
   \   0000022A   0xF450 0x4040      ORRS     R0,R0,#0xC000
   \   0000022E   0x6110             STR      R0,[R2, #+16]
    357          
    358          	return SUCCESS;
   \   00000230   0x2001             MOVS     R0,#+1
   \                     ??GPDMA_Setup_1: (+1)
   \   00000232   0xBC70             POP      {R4-R6}
   \   00000234   0x4770             BX       LR               ;; return
    359          }
    360          
    361          
    362          /*********************************************************************//**
    363           * @brief		Enable/Disable DMA channel
    364           * @param[in]	channelNum	GPDMA channel, should be in range from 0 to 7
    365           * @param[in]	NewState	New State of this command, should be:
    366           * 					- ENABLE.
    367           * 					- DISABLE.
    368           * @return		None
    369           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    370          void GPDMA_ChannelCmd(uint8_t channelNum, FunctionalState NewState)
    371          {
    372          	LPC_GPDMACH_TypeDef *pDMAch;
    373          
    374          	// Get Channel pointer
    375          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[channelNum];
   \                     GPDMA_ChannelCmd: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable4_11
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000008   0x001A             MOVS     R2,R3
    376          
    377          	if (NewState == ENABLE) {
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD104             BNE.N    ??GPDMA_ChannelCmd_0
    378          		pDMAch->DMACCConfig |= GPDMA_DMACCxConfig_E;
   \   00000010   0x6913             LDR      R3,[R2, #+16]
   \   00000012   0xF053 0x0301      ORRS     R3,R3,#0x1
   \   00000016   0x6113             STR      R3,[R2, #+16]
   \   00000018   0xE003             B.N      ??GPDMA_ChannelCmd_1
    379          	} else {
    380          		pDMAch->DMACCConfig &= ~GPDMA_DMACCxConfig_E;
   \                     ??GPDMA_ChannelCmd_0: (+1)
   \   0000001A   0x6913             LDR      R3,[R2, #+16]
   \   0000001C   0x085B             LSRS     R3,R3,#+1
   \   0000001E   0x005B             LSLS     R3,R3,#+1
   \   00000020   0x6113             STR      R3,[R2, #+16]
    381          	}
    382          }
   \                     ??GPDMA_ChannelCmd_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    383          /*********************************************************************//**
    384           * @brief		Check if corresponding channel does have an active interrupt
    385           * 				request or not
    386           * @param[in]	type		type of status, should be:
    387           * 					- GPDMA_STAT_INT: 		GPDMA Interrupt Status
    388           * 					- GPDMA_STAT_INTTC: 	GPDMA Interrupt Terminal Count Request Status
    389           * 					- GPDMA_STAT_INTERR:	GPDMA Interrupt Error Status
    390           * 					- GPDMA_STAT_RAWINTTC:	GPDMA Raw Interrupt Terminal Count Status
    391           * 					- GPDMA_STAT_RAWINTERR:	GPDMA Raw Error Interrupt Status
    392           * 					- GPDMA_STAT_ENABLED_CH:GPDMA Enabled Channel Status
    393           * @param[in]	channel		GPDMA channel, should be in range from 0 to 7
    394           * @return		IntStatus	status of DMA channel interrupt after masking
    395           * 				Should be:
    396           * 					- SET: the corresponding channel has no active interrupt request
    397           * 					- RESET: the corresponding channel does have an active interrupt request
    398           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    399          IntStatus GPDMA_IntGetStatus(GPDMA_Status_Type type, uint8_t channel)
    400          {
   \                     GPDMA_IntGetStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    401          	CHECK_PARAM(PARAM_GPDMA_STAT(type));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD013             BEQ.N    ??GPDMA_IntGetStatus_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xD010             BEQ.N    ??GPDMA_IntGetStatus_0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xD00D             BEQ.N    ??GPDMA_IntGetStatus_0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C03             CMP      R4,#+3
   \   0000001C   0xD00A             BEQ.N    ??GPDMA_IntGetStatus_0
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x2C04             CMP      R4,#+4
   \   00000022   0xD007             BEQ.N    ??GPDMA_IntGetStatus_0
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C05             CMP      R4,#+5
   \   00000028   0xD004             BEQ.N    ??GPDMA_IntGetStatus_0
   \   0000002A   0xF240 0x1191      MOVW     R1,#+401
   \   0000002E   0x....             LDR.N    R0,??DataTable4_17
   \   00000030   0x.... 0x....      BL       check_failed
    402          	CHECK_PARAM(PARAM_GPDMA_CHANNEL(channel));
   \                     ??GPDMA_IntGetStatus_0: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D08             CMP      R5,#+8
   \   00000038   0xDB04             BLT.N    ??GPDMA_IntGetStatus_1
   \   0000003A   0xF44F 0x71C9      MOV      R1,#+402
   \   0000003E   0x....             LDR.N    R0,??DataTable4_17
   \   00000040   0x.... 0x....      BL       check_failed
    403          
    404          	switch (type)
   \                     ??GPDMA_IntGetStatus_1: (+1)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD006             BEQ.N    ??GPDMA_IntGetStatus_2
   \   0000004A   0x2C02             CMP      R4,#+2
   \   0000004C   0xD01A             BEQ.N    ??GPDMA_IntGetStatus_3
   \   0000004E   0xD30E             BCC.N    ??GPDMA_IntGetStatus_4
   \   00000050   0x2C04             CMP      R4,#+4
   \   00000052   0xD02D             BEQ.N    ??GPDMA_IntGetStatus_5
   \   00000054   0xD321             BCC.N    ??GPDMA_IntGetStatus_6
   \   00000056   0xE036             B.N      ??GPDMA_IntGetStatus_7
    405          	{
    406          	case GPDMA_STAT_INT: //check status of DMA channel interrupts
    407          		if (LPC_GPDMA->DMACIntStat & (GPDMA_DMACIntStat_Ch(channel)))
   \                     ??GPDMA_IntGetStatus_2: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable4_18  ;; 0x50004000
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x40A9             LSLS     R1,R1,R5
   \   00000060   0x4008             ANDS     R0,R1,R0
   \   00000062   0x0600             LSLS     R0,R0,#+24
   \   00000064   0xD001             BEQ.N    ??GPDMA_IntGetStatus_8
    408          			return SET;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xE037             B.N      ??GPDMA_IntGetStatus_9
    409          		return RESET;
   \                     ??GPDMA_IntGetStatus_8: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE035             B.N      ??GPDMA_IntGetStatus_9
    410          	case GPDMA_STAT_INTTC: // check terminal count interrupt request status for DMA
    411          		if (LPC_GPDMA->DMACIntTCStat & GPDMA_DMACIntTCStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_4: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable4_19  ;; 0x50004004
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x40A9             LSLS     R1,R1,R5
   \   00000076   0x4008             ANDS     R0,R1,R0
   \   00000078   0x0600             LSLS     R0,R0,#+24
   \   0000007A   0xD001             BEQ.N    ??GPDMA_IntGetStatus_10
    412          			return SET;
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xE02C             B.N      ??GPDMA_IntGetStatus_9
    413          		return RESET;
   \                     ??GPDMA_IntGetStatus_10: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE02A             B.N      ??GPDMA_IntGetStatus_9
    414          	case GPDMA_STAT_INTERR: //check interrupt status for DMA channels
    415          		if (LPC_GPDMA->DMACIntErrStat & GPDMA_DMACIntTCClear_Ch(channel))
   \                     ??GPDMA_IntGetStatus_3: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable4_20  ;; 0x5000400c
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x40A9             LSLS     R1,R1,R5
   \   0000008C   0x4008             ANDS     R0,R1,R0
   \   0000008E   0x0600             LSLS     R0,R0,#+24
   \   00000090   0xD001             BEQ.N    ??GPDMA_IntGetStatus_11
    416          			return SET;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE021             B.N      ??GPDMA_IntGetStatus_9
    417          		return RESET;
   \                     ??GPDMA_IntGetStatus_11: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0xE01F             B.N      ??GPDMA_IntGetStatus_9
    418          	case GPDMA_STAT_RAWINTTC: //check status of the terminal count interrupt for DMA channels
    419          		if (LPC_GPDMA->DMACRawIntErrStat & GPDMA_DMACRawIntTCStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_6: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable4_21  ;; 0x50004018
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x40A9             LSLS     R1,R1,R5
   \   000000A2   0x4008             ANDS     R0,R1,R0
   \   000000A4   0x0600             LSLS     R0,R0,#+24
   \   000000A6   0xD001             BEQ.N    ??GPDMA_IntGetStatus_12
    420          			return SET;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE016             B.N      ??GPDMA_IntGetStatus_9
    421          		return RESET;
   \                     ??GPDMA_IntGetStatus_12: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE014             B.N      ??GPDMA_IntGetStatus_9
    422          	case GPDMA_STAT_RAWINTERR: //check status of the error interrupt for DMA channels
    423          		if (LPC_GPDMA->DMACRawIntTCStat & GPDMA_DMACRawIntErrStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_5: (+1)
   \   000000B0   0x....             LDR.N    R0,??DataTable4_22  ;; 0x50004014
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x40A9             LSLS     R1,R1,R5
   \   000000B8   0x4008             ANDS     R0,R1,R0
   \   000000BA   0x0600             LSLS     R0,R0,#+24
   \   000000BC   0xD001             BEQ.N    ??GPDMA_IntGetStatus_13
    424          			return SET;
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE00B             B.N      ??GPDMA_IntGetStatus_9
    425          		return RESET;
   \                     ??GPDMA_IntGetStatus_13: (+1)
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xE009             B.N      ??GPDMA_IntGetStatus_9
    426          	default: //check enable status for DMA channels
    427          		if (LPC_GPDMA->DMACEnbldChns & GPDMA_DMACEnbldChns_Ch(channel))
   \                     ??GPDMA_IntGetStatus_7: (+1)
   \   000000C6   0x....             LDR.N    R0,??DataTable4_10  ;; 0x5000401c
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0x40A9             LSLS     R1,R1,R5
   \   000000CE   0x4008             ANDS     R0,R1,R0
   \   000000D0   0x0600             LSLS     R0,R0,#+24
   \   000000D2   0xD001             BEQ.N    ??GPDMA_IntGetStatus_14
    428          			return SET;
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xE000             B.N      ??GPDMA_IntGetStatus_9
    429          		return RESET;
   \                     ??GPDMA_IntGetStatus_14: (+1)
   \   000000D8   0x2000             MOVS     R0,#+0
   \                     ??GPDMA_IntGetStatus_9: (+1)
   \   000000DA   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    430          	}
    431          }
    432          
    433          /*********************************************************************//**
    434           * @brief		Clear one or more interrupt requests on DMA channels
    435           * @param[in]	type		type of interrupt request, should be:
    436           * 					- GPDMA_STATCLR_INTTC: 	GPDMA Interrupt Terminal Count Request Clear
    437           * 					- GPDMA_STATCLR_INTERR: GPDMA Interrupt Error Clear
    438           * @param[in]	channel		GPDMA channel, should be in range from 0 to 7
    439           * @return		None
    440           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    441          void GPDMA_ClearIntPending(GPDMA_StateClear_Type type, uint8_t channel)
    442          {
   \                     GPDMA_ClearIntPending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    443          	CHECK_PARAM(PARAM_GPDMA_STATCLR(type));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD007             BEQ.N    ??GPDMA_ClearIntPending_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xD004             BEQ.N    ??GPDMA_ClearIntPending_0
   \   00000012   0xF240 0x11BB      MOVW     R1,#+443
   \   00000016   0x....             LDR.N    R0,??DataTable4_17
   \   00000018   0x.... 0x....      BL       check_failed
    444          	CHECK_PARAM(PARAM_GPDMA_CHANNEL(channel));
   \                     ??GPDMA_ClearIntPending_0: (+1)
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D08             CMP      R5,#+8
   \   00000020   0xDB04             BLT.N    ??GPDMA_ClearIntPending_1
   \   00000022   0xF44F 0x71DE      MOV      R1,#+444
   \   00000026   0x....             LDR.N    R0,??DataTable4_17
   \   00000028   0x.... 0x....      BL       check_failed
    445          
    446          	if (type == GPDMA_STATCLR_INTTC) // clears the terminal count interrupt request on DMA channel
   \                     ??GPDMA_ClearIntPending_1: (+1)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD105             BNE.N    ??GPDMA_ClearIntPending_2
    447          		LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(channel);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x40A8             LSLS     R0,R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x....             LDR.N    R1,??DataTable4_8  ;; 0x50004008
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0xE004             B.N      ??GPDMA_ClearIntPending_3
    448          	else // clear the error interrupt request
    449          		LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(channel);
   \                     ??GPDMA_ClearIntPending_2: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x40A8             LSLS     R0,R0,R5
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x....             LDR.N    R1,??DataTable4_9  ;; 0x50004010
   \   00000046   0x6008             STR      R0,[R1, #+0]
    450          }
   \                     ??GPDMA_ClearIntPending_3: (+1)
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x50004110         DC32     0x50004110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x50004130         DC32     0x50004130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x50004150         DC32     0x50004150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x50004170         DC32     0x50004170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x50004190         DC32     0x50004190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x500041B0         DC32     0x500041b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x500041D0         DC32     0x500041d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x500041F0         DC32     0x500041f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x50004008         DC32     0x50004008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x50004010         DC32     0x50004010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x5000401C         DC32     0x5000401c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     pGPDMACh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     GPDMA_LUTPerAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     GPDMA_LUTPerBurst

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     GPDMA_LUTPerWid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x400FC1C4         DC32     0x400fc1c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x50004030         DC32     0x50004030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x50004000         DC32     0x50004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x50004004         DC32     0x50004004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x5000400C         DC32     0x5000400c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x50004018         DC32     0x50004018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x50004014         DC32     0x50004014

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 69H, 61H, 72H, 5CH, 4EH
   \              0x5C 0x69    
   \              0x61 0x72    
   \              0x5C 0x4E    
   \   00000008   0x43 0x31          DC8 43H, 31H, 33H, 36H, 42H, 2DH, 33H, 31H
   \              0x33 0x36    
   \              0x42 0x2D    
   \              0x33 0x31    
   \   00000010   0x30 0xCD          DC8 30H, 0CDH, 0B3H, 0BCH, 0C6H, 0C4H, 0A3H, 0BFH
   \              0xB3 0xBC    
   \              0xC6 0xC4    
   \              0xA3 0xBF    
   \   00000018   0xE9 0x5C          DC8 0E9H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000020   0x72 0x65          DC8 72H, 65H, 5CH, 43H, 53H, 42H, 5CH, 73H
   \              0x5C 0x43    
   \              0x53 0x42    
   \              0x5C 0x73    
   \   00000028   0x6F 0x75          DC8 6FH, 75H, 72H, 63H, 65H, 5CH, 6CH, 70H
   \              0x72 0x63    
   \              0x65 0x5C    
   \              0x6C 0x70    
   \   00000030   0x63 0x31          DC8 63H, 31H, 37H, 78H, 78H, 5FH, 67H, 70H
   \              0x37 0x78    
   \              0x78 0x5F    
   \              0x67 0x70    
   \   00000038   0x64 0x6D          DC8 64H, 6DH, 61H, 2EH, 63H, 0
   \              0x61 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0
    451          
    452          /**
    453           * @}
    454           */
    455          
    456          #endif /* _GPDMA */
    457          
    458          /**
    459           * @}
    460           */
    461          
    462          /* --------------------------------- End Of File ------------------------------ */
    463          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GPDMA_ChannelCmd
      16   GPDMA_ClearIntPending
        16   -> check_failed
       8   GPDMA_Init
         8   -> CLKPWR_ConfigPPWR
      16   GPDMA_IntGetStatus
        16   -> check_failed
      12   GPDMA_Setup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      64  ?_0
      36  GPDMA_ChannelCmd
      74  GPDMA_ClearIntPending
      94  GPDMA_Init
     220  GPDMA_IntGetStatus
      96  GPDMA_LUTPerAddr
      24  GPDMA_LUTPerBurst
      24  GPDMA_LUTPerWid
     566  GPDMA_Setup
      32  pGPDMACh

 
   128 bytes in section .data
   112 bytes in section .rodata
 1 082 bytes in section .text
 
 1 082 bytes of CODE  memory
   112 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: none
