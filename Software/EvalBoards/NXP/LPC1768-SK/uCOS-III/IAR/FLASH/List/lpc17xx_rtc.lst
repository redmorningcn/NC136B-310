###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Aug/2017  16:25:16
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_rtc.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_rtc.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_rtc.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_rtc.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_rtc.c
      1          /**********************************************************************
      2          * $Id$		lpc17xx_rtc.c				2011-06-06
      3          *//**
      4          * @file		lpc17xx_rtc.c
      5          * @brief	Contains all functions support for RTC firmware library on LPC17xx
      6          * @version	3.1
      7          * @date		6. June. 2011
      8          * @author	NXP MCU SW Application Team
      9          *
     10          * Copyright(C) 2011, NXP Semiconductor
     11          * All rights reserved.
     12          *
     13          ***********************************************************************
     14          * Software that is described herein is for illustrative purposes only
     15          * which provides customers with programming information regarding the
     16          * products. This software is supplied "AS IS" without any warranties.
     17          * NXP Semiconductors assumes no responsibility or liability for the
     18          * use of the software, conveys no license or title under any patent,
     19          * copyright, or mask work right to the product. NXP Semiconductors
     20          * reserves the right to make changes in the software without
     21          * notification. NXP Semiconductors also make no representation or
     22          * warranty that such application will be suitable for the specified
     23          * use without further testing or modification.
     24          * Permission to use, copy, modify, and distribute this software and its
     25          * documentation is hereby granted, under NXP Semiconductors'
     26          * relevant copyright in the software, without fee, provided that it
     27          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     28          * copyright, permission, and disclaimer notice must appear in all copies of
     29          * this code.
     30          **********************************************************************/
     31          
     32          
     33          /* Peripheral group ----------------------------------------------------------- */
     34          /** @addtogroup RTC
     35           * @{
     36           */
     37          
     38          /* Includes ------------------------------------------------------------------- */
     39          #include "lpc17xx_rtc.h"
     40          #include "lpc17xx_clkpwr.h"
     41          
     42          
     43          /* If this source file built with example, the LPC17xx FW library configuration
     44           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     45           * otherwise the default FW library configuration file must be included instead
     46           */
     47          #ifdef __BUILD_WITH_EXAMPLE__
     48          #include "lpc17xx_libcfg.h"
     49          #else
     50          #include "lpc17xx_libcfg_default.h"
     51          #endif /* __BUILD_WITH_EXAMPLE__ */
     52          
     53          
     54          #ifdef _RTC
     55          
     56          /* Public Functions ----------------------------------------------------------- */
     57          /** @addtogroup RTC_Public_Functions
     58           * @{
     59           */
     60          
     61          /********************************************************************//**
     62           * @brief		Initializes the RTC peripheral.
     63           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
     64           * @return 		None
     65           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     66          void RTC_Init (LPC_RTC_TypeDef *RTCx)
     67          {
   \                     RTC_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     68          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_Init_0
   \   0000000C   0x2144             MOVS     R1,#+68
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
     69          
     70          	/* Set up clock and power for RTC module */
     71          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, ENABLE);
   \                     ??RTC_Init_0: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF44F 0x7000      MOV      R0,#+512
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
     72          
     73          	// Clear all register to be default
     74          	RTCx->ILR = 0x00;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7020             STRB     R0,[R4, #+0]
     75          	RTCx->CCR = 0x00;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x7220             STRB     R0,[R4, #+8]
     76          	RTCx->CIIR = 0x00;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x7320             STRB     R0,[R4, #+12]
     77          	RTCx->AMR = 0xFF;
   \   0000002C   0x20FF             MOVS     R0,#+255
   \   0000002E   0x7420             STRB     R0,[R4, #+16]
     78          	RTCx->CALIBRATION = 0x00;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6420             STR      R0,[R4, #+64]
     79          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     80          
     81          
     82          /*********************************************************************//**
     83           * @brief		De-initializes the RTC peripheral registers to their
     84          *                  default reset values.
     85           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
     86           * @return 		None
     87           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          void RTC_DeInit(LPC_RTC_TypeDef *RTCx)
     89          {
   \                     RTC_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     90          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_DeInit_0
   \   0000000C   0x215A             MOVS     R1,#+90
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
     91          
     92          	RTCx->CCR = 0x00;
   \                     ??RTC_DeInit_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7220             STRB     R0,[R4, #+8]
     93          	// Disable power and clock for RTC module
     94          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, DISABLE);
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xF44F 0x7000      MOV      R0,#+512
   \   00000020   0x.... 0x....      BL       CLKPWR_ConfigPPWR
     95          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     96          
     97          /*********************************************************************//**
     98           * @brief 		Reset clock tick counter in RTC peripheral
     99           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    100           * @return 		None
    101           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          void RTC_ResetClockTickCounter(LPC_RTC_TypeDef *RTCx)
    103          {
   \                     RTC_ResetClockTickCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ResetClockTickCounter_0
   \   0000000C   0x2168             MOVS     R1,#+104
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    105          
    106          	RTCx->CCR |= RTC_CCR_CTCRST;
   \                     ??RTC_ResetClockTickCounter_0: (+1)
   \   00000016   0x7A20             LDRB     R0,[R4, #+8]
   \   00000018   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001C   0x7220             STRB     R0,[R4, #+8]
    107          	RTCx->CCR &= (~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
   \   0000001E   0x7A20             LDRB     R0,[R4, #+8]
   \   00000020   0xF010 0x0011      ANDS     R0,R0,#0x11
   \   00000024   0x7220             STRB     R0,[R4, #+8]
    108          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    109          
    110          /*********************************************************************//**
    111           * @brief 		Start/Stop RTC peripheral
    112           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    113           * @param[in]	NewState New State of this function, should be:
    114           * 				- ENABLE: The time counters are enabled
    115           * 				- DISABLE: The time counters are disabled
    116           * @return 		None
    117           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    118          void RTC_Cmd (LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
    119          {
   \                     RTC_Cmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    120          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_Cmd_0
   \   0000000E   0x2178             MOVS     R1,#+120
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    121          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_Cmd_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??RTC_Cmd_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??RTC_Cmd_1
   \   00000024   0x2179             MOVS     R1,#+121
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    122          
    123          	if (NewState == ENABLE)
   \                     ??RTC_Cmd_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xD104             BNE.N    ??RTC_Cmd_2
    124          	{
    125          		RTCx->CCR |= RTC_CCR_CLKEN;
   \   00000034   0x7A20             LDRB     R0,[R4, #+8]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x7220             STRB     R0,[R4, #+8]
   \   0000003C   0xE003             B.N      ??RTC_Cmd_3
    126          	}
    127          	else
    128          	{
    129          		RTCx->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
   \                     ??RTC_Cmd_2: (+1)
   \   0000003E   0x7A20             LDRB     R0,[R4, #+8]
   \   00000040   0xF010 0x0012      ANDS     R0,R0,#0x12
   \   00000044   0x7220             STRB     R0,[R4, #+8]
    130          	}
    131          }
   \                     ??RTC_Cmd_3: (+1)
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    132          
    133          
    134          /*********************************************************************//**
    135           * @brief 		Enable/Disable Counter increment interrupt for each time type
    136           * 				in RTC peripheral
    137           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    138           * @param[in]	CntIncrIntType: Counter Increment Interrupt type,
    139           * 				an increment of this type value below will generates
    140           * 				an interrupt, should be:
    141           * 				- RTC_TIMETYPE_SECOND
    142           * 				- RTC_TIMETYPE_MINUTE
    143           * 				- RTC_TIMETYPE_HOUR
    144           * 				- RTC_TIMETYPE_DAYOFWEEK
    145           * 				- RTC_TIMETYPE_DAYOFMONTH
    146           * 				- RTC_TIMETYPE_DAYOFYEAR
    147           * 				- RTC_TIMETYPE_MONTH
    148           * 				- RTC_TIMETYPE_YEAR
    149           * @param[in]	NewState New State of this function, should be:
    150           * 				- ENABLE: Counter Increment interrupt for this
    151           * 					time type are enabled
    152           * 				- DISABLE: Counter Increment interrupt for this
    153           * 					time type are disabled
    154           * @return 		None
    155           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    156          void RTC_CntIncrIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t CntIncrIntType, \
    157          								FunctionalState NewState)
    158          {
   \                     RTC_CntIncrIntConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    159          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_0
   \   00000010   0x219F             MOVS     R1,#+159
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    160          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_CntIncrIntConfig_0: (+1)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD007             BEQ.N    ??RTC_CntIncrIntConfig_1
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E01             CMP      R6,#+1
   \   00000024   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_1
   \   00000026   0x21A0             MOVS     R1,#+160
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    161          	CHECK_PARAM(PARAM_RTC_TIMETYPE(CntIncrIntType));
   \                     ??RTC_CntIncrIntConfig_1: (+1)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD012             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD010             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000038   0x2D02             CMP      R5,#+2
   \   0000003A   0xD00E             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   0000003C   0x2D03             CMP      R5,#+3
   \   0000003E   0xD00C             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000040   0x2D04             CMP      R5,#+4
   \   00000042   0xD00A             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000044   0x2D05             CMP      R5,#+5
   \   00000046   0xD008             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000048   0x2D06             CMP      R5,#+6
   \   0000004A   0xD006             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   0000004C   0x2D07             CMP      R5,#+7
   \   0000004E   0xD004             BEQ.N    ??RTC_CntIncrIntConfig_2
   \   00000050   0x21A1             MOVS     R1,#+161
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000056   0x.... 0x....      BL       check_failed
    162          
    163          	if (NewState ==  ENABLE)
   \                     ??RTC_CntIncrIntConfig_2: (+1)
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E01             CMP      R6,#+1
   \   0000005E   0xD135             BNE.N    ??RTC_CntIncrIntConfig_3
    164          	{
    165          		switch (CntIncrIntType)
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD00B             BEQ.N    ??RTC_CntIncrIntConfig_4
   \   00000064   0x2D02             CMP      R5,#+2
   \   00000066   0xD013             BEQ.N    ??RTC_CntIncrIntConfig_5
   \   00000068   0xD30D             BCC.N    ??RTC_CntIncrIntConfig_6
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD01A             BEQ.N    ??RTC_CntIncrIntConfig_7
   \   0000006E   0xD314             BCC.N    ??RTC_CntIncrIntConfig_8
   \   00000070   0x2D06             CMP      R5,#+6
   \   00000072   0xD021             BEQ.N    ??RTC_CntIncrIntConfig_9
   \   00000074   0xD31B             BCC.N    ??RTC_CntIncrIntConfig_10
   \   00000076   0x2D07             CMP      R5,#+7
   \   00000078   0xD023             BEQ.N    ??RTC_CntIncrIntConfig_11
   \   0000007A   0xE05C             B.N      ??RTC_CntIncrIntConfig_12
    166          		{
    167          		case RTC_TIMETYPE_SECOND:
    168          			RTCx->CIIR |= RTC_CIIR_IMSEC;
   \                     ??RTC_CntIncrIntConfig_4: (+1)
   \   0000007C   0x7B20             LDRB     R0,[R4, #+12]
   \   0000007E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000082   0x7320             STRB     R0,[R4, #+12]
    169          			break;
   \   00000084   0xE057             B.N      ??RTC_CntIncrIntConfig_12
    170          		case RTC_TIMETYPE_MINUTE:
    171          			RTCx->CIIR |= RTC_CIIR_IMMIN;
   \                     ??RTC_CntIncrIntConfig_6: (+1)
   \   00000086   0x7B20             LDRB     R0,[R4, #+12]
   \   00000088   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000008C   0x7320             STRB     R0,[R4, #+12]
    172          			break;
   \   0000008E   0xE052             B.N      ??RTC_CntIncrIntConfig_12
    173          		case RTC_TIMETYPE_HOUR:
    174          			RTCx->CIIR |= RTC_CIIR_IMHOUR;
   \                     ??RTC_CntIncrIntConfig_5: (+1)
   \   00000090   0x7B20             LDRB     R0,[R4, #+12]
   \   00000092   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000096   0x7320             STRB     R0,[R4, #+12]
    175          			break;
   \   00000098   0xE04D             B.N      ??RTC_CntIncrIntConfig_12
    176          		case RTC_TIMETYPE_DAYOFWEEK:
    177          			RTCx->CIIR |= RTC_CIIR_IMDOW;
   \                     ??RTC_CntIncrIntConfig_8: (+1)
   \   0000009A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000009C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000A0   0x7320             STRB     R0,[R4, #+12]
    178          			break;
   \   000000A2   0xE048             B.N      ??RTC_CntIncrIntConfig_12
    179          		case RTC_TIMETYPE_DAYOFMONTH:
    180          			RTCx->CIIR |= RTC_CIIR_IMDOM;
   \                     ??RTC_CntIncrIntConfig_7: (+1)
   \   000000A4   0x7B20             LDRB     R0,[R4, #+12]
   \   000000A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AA   0x7320             STRB     R0,[R4, #+12]
    181          			break;
   \   000000AC   0xE043             B.N      ??RTC_CntIncrIntConfig_12
    182          		case RTC_TIMETYPE_DAYOFYEAR:
    183          			RTCx->CIIR |= RTC_CIIR_IMDOY;
   \                     ??RTC_CntIncrIntConfig_10: (+1)
   \   000000AE   0x7B20             LDRB     R0,[R4, #+12]
   \   000000B0   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000B4   0x7320             STRB     R0,[R4, #+12]
    184          			break;
   \   000000B6   0xE03E             B.N      ??RTC_CntIncrIntConfig_12
    185          		case RTC_TIMETYPE_MONTH:
    186          			RTCx->CIIR |= RTC_CIIR_IMMON;
   \                     ??RTC_CntIncrIntConfig_9: (+1)
   \   000000B8   0x7B20             LDRB     R0,[R4, #+12]
   \   000000BA   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000BE   0x7320             STRB     R0,[R4, #+12]
    187          			break;
   \   000000C0   0xE039             B.N      ??RTC_CntIncrIntConfig_12
    188          		case RTC_TIMETYPE_YEAR:
    189          			RTCx->CIIR |= RTC_CIIR_IMYEAR;
   \                     ??RTC_CntIncrIntConfig_11: (+1)
   \   000000C2   0x7B20             LDRB     R0,[R4, #+12]
   \   000000C4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000C8   0x7320             STRB     R0,[R4, #+12]
    190          			break;
   \   000000CA   0xE034             B.N      ??RTC_CntIncrIntConfig_12
    191          		}
    192          	}
    193          	else
    194          	{
    195          		switch (CntIncrIntType)
   \                     ??RTC_CntIncrIntConfig_3: (+1)
   \   000000CC   0x2D00             CMP      R5,#+0
   \   000000CE   0xD00B             BEQ.N    ??RTC_CntIncrIntConfig_13
   \   000000D0   0x2D02             CMP      R5,#+2
   \   000000D2   0xD013             BEQ.N    ??RTC_CntIncrIntConfig_14
   \   000000D4   0xD30D             BCC.N    ??RTC_CntIncrIntConfig_15
   \   000000D6   0x2D04             CMP      R5,#+4
   \   000000D8   0xD01A             BEQ.N    ??RTC_CntIncrIntConfig_16
   \   000000DA   0xD314             BCC.N    ??RTC_CntIncrIntConfig_17
   \   000000DC   0x2D06             CMP      R5,#+6
   \   000000DE   0xD021             BEQ.N    ??RTC_CntIncrIntConfig_18
   \   000000E0   0xD31B             BCC.N    ??RTC_CntIncrIntConfig_19
   \   000000E2   0x2D07             CMP      R5,#+7
   \   000000E4   0xD023             BEQ.N    ??RTC_CntIncrIntConfig_20
   \   000000E6   0xE026             B.N      ??RTC_CntIncrIntConfig_12
    196          		{
    197          		case RTC_TIMETYPE_SECOND:
    198          			RTCx->CIIR &= (~RTC_CIIR_IMSEC) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_13: (+1)
   \   000000E8   0x7B20             LDRB     R0,[R4, #+12]
   \   000000EA   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   000000EE   0x7320             STRB     R0,[R4, #+12]
    199          			break;
   \   000000F0   0xE021             B.N      ??RTC_CntIncrIntConfig_12
    200          		case RTC_TIMETYPE_MINUTE:
    201          			RTCx->CIIR &= (~RTC_CIIR_IMMIN) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_15: (+1)
   \   000000F2   0x7B20             LDRB     R0,[R4, #+12]
   \   000000F4   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   000000F8   0x7320             STRB     R0,[R4, #+12]
    202          			break;
   \   000000FA   0xE01C             B.N      ??RTC_CntIncrIntConfig_12
    203          		case RTC_TIMETYPE_HOUR:
    204          			RTCx->CIIR &= (~RTC_CIIR_IMHOUR) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_14: (+1)
   \   000000FC   0x7B20             LDRB     R0,[R4, #+12]
   \   000000FE   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000102   0x7320             STRB     R0,[R4, #+12]
    205          			break;
   \   00000104   0xE017             B.N      ??RTC_CntIncrIntConfig_12
    206          		case RTC_TIMETYPE_DAYOFWEEK:
    207          			RTCx->CIIR &= (~RTC_CIIR_IMDOW) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_17: (+1)
   \   00000106   0x7B20             LDRB     R0,[R4, #+12]
   \   00000108   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000010C   0x7320             STRB     R0,[R4, #+12]
    208          			break;
   \   0000010E   0xE012             B.N      ??RTC_CntIncrIntConfig_12
    209          		case RTC_TIMETYPE_DAYOFMONTH:
    210          			RTCx->CIIR &= (~RTC_CIIR_IMDOM) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_16: (+1)
   \   00000110   0x7B20             LDRB     R0,[R4, #+12]
   \   00000112   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000116   0x7320             STRB     R0,[R4, #+12]
    211          			break;
   \   00000118   0xE00D             B.N      ??RTC_CntIncrIntConfig_12
    212          		case RTC_TIMETYPE_DAYOFYEAR:
    213          			RTCx->CIIR &= (~RTC_CIIR_IMDOY) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_19: (+1)
   \   0000011A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000011C   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000120   0x7320             STRB     R0,[R4, #+12]
    214          			break;
   \   00000122   0xE008             B.N      ??RTC_CntIncrIntConfig_12
    215          		case RTC_TIMETYPE_MONTH:
    216          			RTCx->CIIR &= (~RTC_CIIR_IMMON) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_18: (+1)
   \   00000124   0x7B20             LDRB     R0,[R4, #+12]
   \   00000126   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000012A   0x7320             STRB     R0,[R4, #+12]
    217          			break;
   \   0000012C   0xE003             B.N      ??RTC_CntIncrIntConfig_12
    218          		case RTC_TIMETYPE_YEAR:
    219          			RTCx->CIIR &= (~RTC_CIIR_IMYEAR) & RTC_CIIR_BITMASK;
   \                     ??RTC_CntIncrIntConfig_20: (+1)
   \   0000012E   0x7B20             LDRB     R0,[R4, #+12]
   \   00000130   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000134   0x7320             STRB     R0,[R4, #+12]
    220          			break;
    221          		}
    222          	}
    223          }
   \                     ??RTC_CntIncrIntConfig_12: (+1)
   \   00000136   0xBD70             POP      {R4-R6,PC}       ;; return
    224          
    225          
    226          /*********************************************************************//**
    227           * @brief 		Enable/Disable Alarm interrupt for each time type
    228           * 				in RTC peripheral
    229           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    230           * @param[in]	AlarmTimeType: Alarm Time Interrupt type,
    231           * 				an matching of this type value below with current time
    232           * 				in RTC will generates an interrupt, should be:
    233           * 				- RTC_TIMETYPE_SECOND
    234           * 				- RTC_TIMETYPE_MINUTE
    235           * 				- RTC_TIMETYPE_HOUR
    236           * 				- RTC_TIMETYPE_DAYOFWEEK
    237           * 				- RTC_TIMETYPE_DAYOFMONTH
    238           * 				- RTC_TIMETYPE_DAYOFYEAR
    239           * 				- RTC_TIMETYPE_MONTH
    240           * 				- RTC_TIMETYPE_YEAR
    241           * @param[in]	NewState New State of this function, should be:
    242           * 				- ENABLE: Alarm interrupt for this
    243           * 					time type are enabled
    244           * 				- DISABLE: Alarm interrupt for this
    245           * 					time type are disabled
    246           * @return 		None
    247           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    248          void RTC_AlarmIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t AlarmTimeType, \
    249          								FunctionalState NewState)
    250          {
   \                     RTC_AlarmIntConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    251          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??RTC_AlarmIntConfig_0
   \   00000010   0x21FB             MOVS     R1,#+251
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    252          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_AlarmIntConfig_0: (+1)
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD007             BEQ.N    ??RTC_AlarmIntConfig_1
   \   00000020   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000022   0x2E01             CMP      R6,#+1
   \   00000024   0xD004             BEQ.N    ??RTC_AlarmIntConfig_1
   \   00000026   0x21FC             MOVS     R1,#+252
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000002C   0x.... 0x....      BL       check_failed
    253          	CHECK_PARAM(PARAM_RTC_TIMETYPE(AlarmTimeType));
   \                     ??RTC_AlarmIntConfig_1: (+1)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD012             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD010             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000038   0x2D02             CMP      R5,#+2
   \   0000003A   0xD00E             BEQ.N    ??RTC_AlarmIntConfig_2
   \   0000003C   0x2D03             CMP      R5,#+3
   \   0000003E   0xD00C             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000040   0x2D04             CMP      R5,#+4
   \   00000042   0xD00A             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000044   0x2D05             CMP      R5,#+5
   \   00000046   0xD008             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000048   0x2D06             CMP      R5,#+6
   \   0000004A   0xD006             BEQ.N    ??RTC_AlarmIntConfig_2
   \   0000004C   0x2D07             CMP      R5,#+7
   \   0000004E   0xD004             BEQ.N    ??RTC_AlarmIntConfig_2
   \   00000050   0x21FD             MOVS     R1,#+253
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000056   0x.... 0x....      BL       check_failed
    254          
    255          	if (NewState == ENABLE)
   \                     ??RTC_AlarmIntConfig_2: (+1)
   \   0000005A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005C   0x2E01             CMP      R6,#+1
   \   0000005E   0xD135             BNE.N    ??RTC_AlarmIntConfig_3
    256          	{
    257          		switch (AlarmTimeType)
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD00B             BEQ.N    ??RTC_AlarmIntConfig_4
   \   00000064   0x2D02             CMP      R5,#+2
   \   00000066   0xD013             BEQ.N    ??RTC_AlarmIntConfig_5
   \   00000068   0xD30D             BCC.N    ??RTC_AlarmIntConfig_6
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD01A             BEQ.N    ??RTC_AlarmIntConfig_7
   \   0000006E   0xD314             BCC.N    ??RTC_AlarmIntConfig_8
   \   00000070   0x2D06             CMP      R5,#+6
   \   00000072   0xD021             BEQ.N    ??RTC_AlarmIntConfig_9
   \   00000074   0xD31B             BCC.N    ??RTC_AlarmIntConfig_10
   \   00000076   0x2D07             CMP      R5,#+7
   \   00000078   0xD023             BEQ.N    ??RTC_AlarmIntConfig_11
   \   0000007A   0xE05C             B.N      ??RTC_AlarmIntConfig_12
    258          		{
    259          		case RTC_TIMETYPE_SECOND:
    260          			RTCx->AMR &= (~RTC_AMR_AMRSEC) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_4: (+1)
   \   0000007C   0x7C20             LDRB     R0,[R4, #+16]
   \   0000007E   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000082   0x7420             STRB     R0,[R4, #+16]
    261          			break;
   \   00000084   0xE057             B.N      ??RTC_AlarmIntConfig_12
    262          		case RTC_TIMETYPE_MINUTE:
    263          			RTCx->AMR &= (~RTC_AMR_AMRMIN) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_6: (+1)
   \   00000086   0x7C20             LDRB     R0,[R4, #+16]
   \   00000088   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000008C   0x7420             STRB     R0,[R4, #+16]
    264          			break;
   \   0000008E   0xE052             B.N      ??RTC_AlarmIntConfig_12
    265          		case RTC_TIMETYPE_HOUR:
    266          			RTCx->AMR &= (~RTC_AMR_AMRHOUR) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_5: (+1)
   \   00000090   0x7C20             LDRB     R0,[R4, #+16]
   \   00000092   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000096   0x7420             STRB     R0,[R4, #+16]
    267          			break;
   \   00000098   0xE04D             B.N      ??RTC_AlarmIntConfig_12
    268          		case RTC_TIMETYPE_DAYOFWEEK:
    269          			RTCx->AMR &= (~RTC_AMR_AMRDOW) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_8: (+1)
   \   0000009A   0x7C20             LDRB     R0,[R4, #+16]
   \   0000009C   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000A0   0x7420             STRB     R0,[R4, #+16]
    270          			break;
   \   000000A2   0xE048             B.N      ??RTC_AlarmIntConfig_12
    271          		case RTC_TIMETYPE_DAYOFMONTH:
    272          			RTCx->AMR &= (~RTC_AMR_AMRDOM) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_7: (+1)
   \   000000A4   0x7C20             LDRB     R0,[R4, #+16]
   \   000000A6   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000AA   0x7420             STRB     R0,[R4, #+16]
    273          			break;
   \   000000AC   0xE043             B.N      ??RTC_AlarmIntConfig_12
    274          		case RTC_TIMETYPE_DAYOFYEAR:
    275          			RTCx->AMR &= (~RTC_AMR_AMRDOY) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_10: (+1)
   \   000000AE   0x7C20             LDRB     R0,[R4, #+16]
   \   000000B0   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000000B4   0x7420             STRB     R0,[R4, #+16]
    276          			break;
   \   000000B6   0xE03E             B.N      ??RTC_AlarmIntConfig_12
    277          		case RTC_TIMETYPE_MONTH:
    278          			RTCx->AMR &= (~RTC_AMR_AMRMON) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_9: (+1)
   \   000000B8   0x7C20             LDRB     R0,[R4, #+16]
   \   000000BA   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000000BE   0x7420             STRB     R0,[R4, #+16]
    279          			break;
   \   000000C0   0xE039             B.N      ??RTC_AlarmIntConfig_12
    280          		case RTC_TIMETYPE_YEAR:
    281          			RTCx->AMR &= (~RTC_AMR_AMRYEAR) & RTC_AMR_BITMASK;
   \                     ??RTC_AlarmIntConfig_11: (+1)
   \   000000C2   0x7C20             LDRB     R0,[R4, #+16]
   \   000000C4   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000C8   0x7420             STRB     R0,[R4, #+16]
    282          			break;
   \   000000CA   0xE034             B.N      ??RTC_AlarmIntConfig_12
    283          		}
    284          	}
    285          	else
    286          	{
    287          		switch (AlarmTimeType)
   \                     ??RTC_AlarmIntConfig_3: (+1)
   \   000000CC   0x2D00             CMP      R5,#+0
   \   000000CE   0xD00B             BEQ.N    ??RTC_AlarmIntConfig_13
   \   000000D0   0x2D02             CMP      R5,#+2
   \   000000D2   0xD013             BEQ.N    ??RTC_AlarmIntConfig_14
   \   000000D4   0xD30D             BCC.N    ??RTC_AlarmIntConfig_15
   \   000000D6   0x2D04             CMP      R5,#+4
   \   000000D8   0xD01A             BEQ.N    ??RTC_AlarmIntConfig_16
   \   000000DA   0xD314             BCC.N    ??RTC_AlarmIntConfig_17
   \   000000DC   0x2D06             CMP      R5,#+6
   \   000000DE   0xD021             BEQ.N    ??RTC_AlarmIntConfig_18
   \   000000E0   0xD31B             BCC.N    ??RTC_AlarmIntConfig_19
   \   000000E2   0x2D07             CMP      R5,#+7
   \   000000E4   0xD023             BEQ.N    ??RTC_AlarmIntConfig_20
   \   000000E6   0xE026             B.N      ??RTC_AlarmIntConfig_12
    288          		{
    289          		case RTC_TIMETYPE_SECOND:
    290          			RTCx->AMR |= (RTC_AMR_AMRSEC);
   \                     ??RTC_AlarmIntConfig_13: (+1)
   \   000000E8   0x7C20             LDRB     R0,[R4, #+16]
   \   000000EA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000EE   0x7420             STRB     R0,[R4, #+16]
    291          			break;
   \   000000F0   0xE021             B.N      ??RTC_AlarmIntConfig_12
    292          		case RTC_TIMETYPE_MINUTE:
    293          			RTCx->AMR |= (RTC_AMR_AMRMIN);
   \                     ??RTC_AlarmIntConfig_15: (+1)
   \   000000F2   0x7C20             LDRB     R0,[R4, #+16]
   \   000000F4   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000F8   0x7420             STRB     R0,[R4, #+16]
    294          			break;
   \   000000FA   0xE01C             B.N      ??RTC_AlarmIntConfig_12
    295          		case RTC_TIMETYPE_HOUR:
    296          			RTCx->AMR |= (RTC_AMR_AMRHOUR);
   \                     ??RTC_AlarmIntConfig_14: (+1)
   \   000000FC   0x7C20             LDRB     R0,[R4, #+16]
   \   000000FE   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000102   0x7420             STRB     R0,[R4, #+16]
    297          			break;
   \   00000104   0xE017             B.N      ??RTC_AlarmIntConfig_12
    298          		case RTC_TIMETYPE_DAYOFWEEK:
    299          			RTCx->AMR |= (RTC_AMR_AMRDOW);
   \                     ??RTC_AlarmIntConfig_17: (+1)
   \   00000106   0x7C20             LDRB     R0,[R4, #+16]
   \   00000108   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000010C   0x7420             STRB     R0,[R4, #+16]
    300          			break;
   \   0000010E   0xE012             B.N      ??RTC_AlarmIntConfig_12
    301          		case RTC_TIMETYPE_DAYOFMONTH:
    302          			RTCx->AMR |= (RTC_AMR_AMRDOM);
   \                     ??RTC_AlarmIntConfig_16: (+1)
   \   00000110   0x7C20             LDRB     R0,[R4, #+16]
   \   00000112   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000116   0x7420             STRB     R0,[R4, #+16]
    303          			break;
   \   00000118   0xE00D             B.N      ??RTC_AlarmIntConfig_12
    304          		case RTC_TIMETYPE_DAYOFYEAR:
    305          			RTCx->AMR |= (RTC_AMR_AMRDOY);
   \                     ??RTC_AlarmIntConfig_19: (+1)
   \   0000011A   0x7C20             LDRB     R0,[R4, #+16]
   \   0000011C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000120   0x7420             STRB     R0,[R4, #+16]
    306          			break;
   \   00000122   0xE008             B.N      ??RTC_AlarmIntConfig_12
    307          		case RTC_TIMETYPE_MONTH:
    308          			RTCx->AMR |= (RTC_AMR_AMRMON);
   \                     ??RTC_AlarmIntConfig_18: (+1)
   \   00000124   0x7C20             LDRB     R0,[R4, #+16]
   \   00000126   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000012A   0x7420             STRB     R0,[R4, #+16]
    309          			break;
   \   0000012C   0xE003             B.N      ??RTC_AlarmIntConfig_12
    310          		case RTC_TIMETYPE_YEAR:
    311          			RTCx->AMR |= (RTC_AMR_AMRYEAR);
   \                     ??RTC_AlarmIntConfig_20: (+1)
   \   0000012E   0x7C20             LDRB     R0,[R4, #+16]
   \   00000130   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000134   0x7420             STRB     R0,[R4, #+16]
    312          			break;
    313          		}
    314          	}
    315          }
   \                     ??RTC_AlarmIntConfig_12: (+1)
   \   00000136   0xBD70             POP      {R4-R6,PC}       ;; return
    316          
    317          
    318          /*********************************************************************//**
    319           * @brief 		Set current time value for each time type in RTC peripheral
    320           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    321           * @param[in]	Timetype: Time Type, should be:
    322           * 				- RTC_TIMETYPE_SECOND
    323           * 				- RTC_TIMETYPE_MINUTE
    324           * 				- RTC_TIMETYPE_HOUR
    325           * 				- RTC_TIMETYPE_DAYOFWEEK
    326           * 				- RTC_TIMETYPE_DAYOFMONTH
    327           * 				- RTC_TIMETYPE_DAYOFYEAR
    328           * 				- RTC_TIMETYPE_MONTH
    329           * 				- RTC_TIMETYPE_YEAR
    330           * @param[in]	TimeValue Time value to set
    331           * @return 		None
    332           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    333          void RTC_SetTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t TimeValue)
    334          {
   \                     RTC_SetTime: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    335          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??RTC_SetTime_0
   \   00000010   0xF240 0x114F      MOVW     R1,#+335
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    336          	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
   \                     ??RTC_SetTime_0: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD013             BEQ.N    ??RTC_SetTime_1
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD011             BEQ.N    ??RTC_SetTime_1
   \   00000024   0x2D02             CMP      R5,#+2
   \   00000026   0xD00F             BEQ.N    ??RTC_SetTime_1
   \   00000028   0x2D03             CMP      R5,#+3
   \   0000002A   0xD00D             BEQ.N    ??RTC_SetTime_1
   \   0000002C   0x2D04             CMP      R5,#+4
   \   0000002E   0xD00B             BEQ.N    ??RTC_SetTime_1
   \   00000030   0x2D05             CMP      R5,#+5
   \   00000032   0xD009             BEQ.N    ??RTC_SetTime_1
   \   00000034   0x2D06             CMP      R5,#+6
   \   00000036   0xD007             BEQ.N    ??RTC_SetTime_1
   \   00000038   0x2D07             CMP      R5,#+7
   \   0000003A   0xD005             BEQ.N    ??RTC_SetTime_1
   \   0000003C   0xF44F 0x71A8      MOV      R1,#+336
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000044   0x.... 0x....      BL       check_failed
    337          
    338          	switch ( Timetype)
   \                     ??RTC_SetTime_1: (+1)
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD00B             BEQ.N    ??RTC_SetTime_2
   \   0000004C   0x2D02             CMP      R5,#+2
   \   0000004E   0xD023             BEQ.N    ??RTC_SetTime_3
   \   00000050   0xD315             BCC.N    ??RTC_SetTime_4
   \   00000052   0x2D04             CMP      R5,#+4
   \   00000054   0xD03A             BEQ.N    ??RTC_SetTime_5
   \   00000056   0xD32C             BCC.N    ??RTC_SetTime_6
   \   00000058   0x2D06             CMP      R5,#+6
   \   0000005A   0xD056             BEQ.N    ??RTC_SetTime_7
   \   0000005C   0xD345             BCC.N    ??RTC_SetTime_8
   \   0000005E   0x2D07             CMP      R5,#+7
   \   00000060   0xD062             BEQ.N    ??RTC_SetTime_9
   \   00000062   0xE06E             B.N      ??RTC_SetTime_10
    339          	{
    340          	case RTC_TIMETYPE_SECOND:
    341          		CHECK_PARAM(TimeValue <= RTC_SECOND_MAX);
   \                     ??RTC_SetTime_2: (+1)
   \   00000064   0x2E3C             CMP      R6,#+60
   \   00000066   0xD305             BCC.N    ??RTC_SetTime_11
   \   00000068   0xF240 0x1155      MOVW     R1,#+341
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000070   0x.... 0x....      BL       check_failed
    342          
    343          		RTCx->SEC = TimeValue & RTC_SEC_MASK;
   \                     ??RTC_SetTime_11: (+1)
   \   00000074   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000078   0xF884 0x0020      STRB     R0,[R4, #+32]
    344          		break;
   \   0000007C   0xE061             B.N      ??RTC_SetTime_10
    345          
    346          	case RTC_TIMETYPE_MINUTE:
    347          		CHECK_PARAM(TimeValue <= RTC_MINUTE_MAX);
   \                     ??RTC_SetTime_4: (+1)
   \   0000007E   0x2E3C             CMP      R6,#+60
   \   00000080   0xD305             BCC.N    ??RTC_SetTime_12
   \   00000082   0xF240 0x115B      MOVW     R1,#+347
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000008A   0x.... 0x....      BL       check_failed
    348          
    349          		RTCx->MIN = TimeValue & RTC_MIN_MASK;
   \                     ??RTC_SetTime_12: (+1)
   \   0000008E   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000092   0xF884 0x0024      STRB     R0,[R4, #+36]
    350          		break;
   \   00000096   0xE054             B.N      ??RTC_SetTime_10
    351          
    352          	case RTC_TIMETYPE_HOUR:
    353          		CHECK_PARAM(TimeValue <= RTC_HOUR_MAX);
   \                     ??RTC_SetTime_3: (+1)
   \   00000098   0x2E18             CMP      R6,#+24
   \   0000009A   0xD305             BCC.N    ??RTC_SetTime_13
   \   0000009C   0xF240 0x1161      MOVW     R1,#+353
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000A4   0x.... 0x....      BL       check_failed
    354          
    355          		RTCx->HOUR = TimeValue & RTC_HOUR_MASK;
   \                     ??RTC_SetTime_13: (+1)
   \   000000A8   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000AC   0xF884 0x0028      STRB     R0,[R4, #+40]
    356          		break;
   \   000000B0   0xE047             B.N      ??RTC_SetTime_10
    357          
    358          	case RTC_TIMETYPE_DAYOFWEEK:
    359          		CHECK_PARAM(TimeValue <= RTC_DAYOFWEEK_MAX);
   \                     ??RTC_SetTime_6: (+1)
   \   000000B2   0x2E07             CMP      R6,#+7
   \   000000B4   0xD305             BCC.N    ??RTC_SetTime_14
   \   000000B6   0xF240 0x1167      MOVW     R1,#+359
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000BE   0x.... 0x....      BL       check_failed
    360          
    361          		RTCx->DOW = TimeValue & RTC_DOW_MASK;
   \                     ??RTC_SetTime_14: (+1)
   \   000000C2   0xF016 0x0007      ANDS     R0,R6,#0x7
   \   000000C6   0xF884 0x0030      STRB     R0,[R4, #+48]
    362          		break;
   \   000000CA   0xE03A             B.N      ??RTC_SetTime_10
    363          
    364          	case RTC_TIMETYPE_DAYOFMONTH:
    365          		CHECK_PARAM((TimeValue <= RTC_DAYOFMONTH_MAX) \
    366          				&& (TimeValue >= RTC_DAYOFMONTH_MIN));
   \                     ??RTC_SetTime_5: (+1)
   \   000000CC   0x2E20             CMP      R6,#+32
   \   000000CE   0xD201             BCS.N    ??RTC_SetTime_15
   \   000000D0   0x2E00             CMP      R6,#+0
   \   000000D2   0xD105             BNE.N    ??RTC_SetTime_16
   \                     ??RTC_SetTime_15: (+1)
   \   000000D4   0xF240 0x116D      MOVW     R1,#+365
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000DC   0x.... 0x....      BL       check_failed
    367          
    368          		RTCx->DOM = TimeValue & RTC_DOM_MASK;
   \                     ??RTC_SetTime_16: (+1)
   \   000000E0   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000E4   0xF884 0x002C      STRB     R0,[R4, #+44]
    369          		break;
   \   000000E8   0xE02B             B.N      ??RTC_SetTime_10
    370          
    371          	case RTC_TIMETYPE_DAYOFYEAR:
    372          		CHECK_PARAM((TimeValue >= RTC_DAYOFYEAR_MIN) \
    373          				&& (TimeValue <= RTC_DAYOFYEAR_MAX));
   \                     ??RTC_SetTime_8: (+1)
   \   000000EA   0x2E00             CMP      R6,#+0
   \   000000EC   0xD002             BEQ.N    ??RTC_SetTime_17
   \   000000EE   0xF5B6 0x7FB7      CMP      R6,#+366
   \   000000F2   0xD905             BLS.N    ??RTC_SetTime_18
   \                     ??RTC_SetTime_17: (+1)
   \   000000F4   0xF44F 0x71BA      MOV      R1,#+372
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   000000FC   0x.... 0x....      BL       check_failed
    374          
    375          		RTCx->DOY = TimeValue & RTC_DOY_MASK;
   \                     ??RTC_SetTime_18: (+1)
   \   00000100   0x0030             MOVS     R0,R6
   \   00000102   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000104   0x0DC0             LSRS     R0,R0,#+23
   \   00000106   0x86A0             STRH     R0,[R4, #+52]
    376          		break;
   \   00000108   0xE01B             B.N      ??RTC_SetTime_10
    377          
    378          	case RTC_TIMETYPE_MONTH:
    379          		CHECK_PARAM((TimeValue >= RTC_MONTH_MIN) \
    380          				&& (TimeValue <= RTC_MONTH_MAX));
   \                     ??RTC_SetTime_7: (+1)
   \   0000010A   0x2E00             CMP      R6,#+0
   \   0000010C   0xD001             BEQ.N    ??RTC_SetTime_19
   \   0000010E   0x2E0D             CMP      R6,#+13
   \   00000110   0xD305             BCC.N    ??RTC_SetTime_20
   \                     ??RTC_SetTime_19: (+1)
   \   00000112   0xF240 0x117B      MOVW     R1,#+379
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000011A   0x.... 0x....      BL       check_failed
    381          
    382          		RTCx->MONTH = TimeValue & RTC_MONTH_MASK;
   \                     ??RTC_SetTime_20: (+1)
   \   0000011E   0xF016 0x000F      ANDS     R0,R6,#0xF
   \   00000122   0xF884 0x0038      STRB     R0,[R4, #+56]
    383          		break;
   \   00000126   0xE00C             B.N      ??RTC_SetTime_10
    384          
    385          	case RTC_TIMETYPE_YEAR:
    386          		CHECK_PARAM(TimeValue <= RTC_YEAR_MAX);
   \                     ??RTC_SetTime_9: (+1)
   \   00000128   0xF5B6 0x5F80      CMP      R6,#+4096
   \   0000012C   0xD305             BCC.N    ??RTC_SetTime_21
   \   0000012E   0xF44F 0x71C1      MOV      R1,#+386
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000136   0x.... 0x....      BL       check_failed
    387          
    388          		RTCx->YEAR = TimeValue & RTC_YEAR_MASK;
   \                     ??RTC_SetTime_21: (+1)
   \   0000013A   0x0030             MOVS     R0,R6
   \   0000013C   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000013E   0x0D00             LSRS     R0,R0,#+20
   \   00000140   0x87A0             STRH     R0,[R4, #+60]
    389          		break;
    390          	}
    391          }
   \                     ??RTC_SetTime_10: (+1)
   \   00000142   0xBD70             POP      {R4-R6,PC}       ;; return
    392          
    393          /*********************************************************************//**
    394           * @brief 		Get current time value for each type time type
    395           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    396           * @param[in]	Timetype: Time Type, should be:
    397           * 				- RTC_TIMETYPE_SECOND
    398           * 				- RTC_TIMETYPE_MINUTE
    399           * 				- RTC_TIMETYPE_HOUR
    400           * 				- RTC_TIMETYPE_DAYOFWEEK
    401           * 				- RTC_TIMETYPE_DAYOFMONTH
    402           * 				- RTC_TIMETYPE_DAYOFYEAR
    403           * 				- RTC_TIMETYPE_MONTH
    404           * 				- RTC_TIMETYPE_YEAR
    405           * @return 		Value of time according to specified time type
    406           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    407          uint32_t RTC_GetTime(LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
    408          {
   \                     RTC_GetTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    409          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_GetTime_0
   \   0000000E   0xF240 0x1199      MOVW     R1,#+409
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    410          	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
   \                     ??RTC_GetTime_0: (+1)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD013             BEQ.N    ??RTC_GetTime_1
   \   0000001E   0x2C01             CMP      R4,#+1
   \   00000020   0xD011             BEQ.N    ??RTC_GetTime_1
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xD00F             BEQ.N    ??RTC_GetTime_1
   \   00000026   0x2C03             CMP      R4,#+3
   \   00000028   0xD00D             BEQ.N    ??RTC_GetTime_1
   \   0000002A   0x2C04             CMP      R4,#+4
   \   0000002C   0xD00B             BEQ.N    ??RTC_GetTime_1
   \   0000002E   0x2C05             CMP      R4,#+5
   \   00000030   0xD009             BEQ.N    ??RTC_GetTime_1
   \   00000032   0x2C06             CMP      R4,#+6
   \   00000034   0xD007             BEQ.N    ??RTC_GetTime_1
   \   00000036   0x2C07             CMP      R4,#+7
   \   00000038   0xD005             BEQ.N    ??RTC_GetTime_1
   \   0000003A   0xF44F 0x71CD      MOV      R1,#+410
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000042   0x.... 0x....      BL       check_failed
    411          
    412          	switch (Timetype)
   \                     ??RTC_GetTime_1: (+1)
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD00B             BEQ.N    ??RTC_GetTime_2
   \   0000004A   0x2C02             CMP      R4,#+2
   \   0000004C   0xD013             BEQ.N    ??RTC_GetTime_3
   \   0000004E   0xD30D             BCC.N    ??RTC_GetTime_4
   \   00000050   0x2C04             CMP      R4,#+4
   \   00000052   0xD01A             BEQ.N    ??RTC_GetTime_5
   \   00000054   0xD314             BCC.N    ??RTC_GetTime_6
   \   00000056   0x2C06             CMP      R4,#+6
   \   00000058   0xD020             BEQ.N    ??RTC_GetTime_7
   \   0000005A   0xD31B             BCC.N    ??RTC_GetTime_8
   \   0000005C   0x2C07             CMP      R4,#+7
   \   0000005E   0xD022             BEQ.N    ??RTC_GetTime_9
   \   00000060   0xE025             B.N      ??RTC_GetTime_10
    413          	{
    414          	case RTC_TIMETYPE_SECOND:
    415          		return (RTCx->SEC & RTC_SEC_MASK);
   \                     ??RTC_GetTime_2: (+1)
   \   00000062   0xF895 0x0020      LDRB     R0,[R5, #+32]
   \   00000066   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000006A   0xE021             B.N      ??RTC_GetTime_11
    416          	case RTC_TIMETYPE_MINUTE:
    417          		return (RTCx->MIN & RTC_MIN_MASK);
   \                     ??RTC_GetTime_4: (+1)
   \   0000006C   0xF895 0x0024      LDRB     R0,[R5, #+36]
   \   00000070   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000074   0xE01C             B.N      ??RTC_GetTime_11
    418          	case RTC_TIMETYPE_HOUR:
    419          		return (RTCx->HOUR & RTC_HOUR_MASK);
   \                     ??RTC_GetTime_3: (+1)
   \   00000076   0xF895 0x0028      LDRB     R0,[R5, #+40]
   \   0000007A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000007E   0xE017             B.N      ??RTC_GetTime_11
    420          	case RTC_TIMETYPE_DAYOFWEEK:
    421          		return (RTCx->DOW & RTC_DOW_MASK);
   \                     ??RTC_GetTime_6: (+1)
   \   00000080   0xF895 0x0030      LDRB     R0,[R5, #+48]
   \   00000084   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000088   0xE012             B.N      ??RTC_GetTime_11
    422          	case RTC_TIMETYPE_DAYOFMONTH:
    423          		return (RTCx->DOM & RTC_DOM_MASK);
   \                     ??RTC_GetTime_5: (+1)
   \   0000008A   0xF895 0x002C      LDRB     R0,[R5, #+44]
   \   0000008E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000092   0xE00D             B.N      ??RTC_GetTime_11
    424          	case RTC_TIMETYPE_DAYOFYEAR:
    425          		return (RTCx->DOY & RTC_DOY_MASK);
   \                     ??RTC_GetTime_8: (+1)
   \   00000094   0x8EA8             LDRH     R0,[R5, #+52]
   \   00000096   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000098   0x0DC0             LSRS     R0,R0,#+23
   \   0000009A   0xE009             B.N      ??RTC_GetTime_11
    426          	case RTC_TIMETYPE_MONTH:
    427          		return (RTCx->MONTH & RTC_MONTH_MASK);
   \                     ??RTC_GetTime_7: (+1)
   \   0000009C   0xF895 0x0038      LDRB     R0,[R5, #+56]
   \   000000A0   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   000000A4   0xE004             B.N      ??RTC_GetTime_11
    428          	case RTC_TIMETYPE_YEAR:
    429          		return (RTCx->YEAR & RTC_YEAR_MASK);
   \                     ??RTC_GetTime_9: (+1)
   \   000000A6   0x8FA8             LDRH     R0,[R5, #+60]
   \   000000A8   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000AA   0x0D00             LSRS     R0,R0,#+20
   \   000000AC   0xE000             B.N      ??RTC_GetTime_11
    430          	default:
    431          		return (0);
   \                     ??RTC_GetTime_10: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetTime_11: (+1)
   \   000000B0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    432          	}
    433          }
    434          
    435          
    436          /*********************************************************************//**
    437           * @brief 		Set full of time in RTC peripheral
    438           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    439           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    440           * 				contains time value in full.
    441           * @return 		None
    442           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    443          void RTC_SetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    444          {
   \                     RTC_SetFullTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    445          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_SetFullTime_0
   \   0000000E   0xF240 0x11BD      MOVW     R1,#+445
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    446          
    447          	RTCx->DOM = pFullTime->DOM & RTC_DOM_MASK;
   \                     ??RTC_SetFullTime_0: (+1)
   \   0000001A   0x7B28             LDRB     R0,[R5, #+12]
   \   0000001C   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000020   0xF884 0x002C      STRB     R0,[R4, #+44]
    448          	RTCx->DOW = pFullTime->DOW & RTC_DOW_MASK;
   \   00000024   0x7C28             LDRB     R0,[R5, #+16]
   \   00000026   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000002A   0xF884 0x0030      STRB     R0,[R4, #+48]
    449          	RTCx->DOY = pFullTime->DOY & RTC_DOY_MASK;
   \   0000002E   0x6968             LDR      R0,[R5, #+20]
   \   00000030   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000032   0x0DC0             LSRS     R0,R0,#+23
   \   00000034   0x86A0             STRH     R0,[R4, #+52]
    450          	RTCx->HOUR = pFullTime->HOUR & RTC_HOUR_MASK;
   \   00000036   0x7A28             LDRB     R0,[R5, #+8]
   \   00000038   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003C   0xF884 0x0028      STRB     R0,[R4, #+40]
    451          	RTCx->MIN = pFullTime->MIN & RTC_MIN_MASK;
   \   00000040   0x7928             LDRB     R0,[R5, #+4]
   \   00000042   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000046   0xF884 0x0024      STRB     R0,[R4, #+36]
    452          	RTCx->SEC = pFullTime->SEC & RTC_SEC_MASK;
   \   0000004A   0x7828             LDRB     R0,[R5, #+0]
   \   0000004C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000050   0xF884 0x0020      STRB     R0,[R4, #+32]
    453          	RTCx->MONTH = pFullTime->MONTH & RTC_MONTH_MASK;
   \   00000054   0x7E28             LDRB     R0,[R5, #+24]
   \   00000056   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005A   0xF884 0x0038      STRB     R0,[R4, #+56]
    454          	RTCx->YEAR = pFullTime->YEAR & RTC_YEAR_MASK;
   \   0000005E   0x69E8             LDR      R0,[R5, #+28]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x87A0             STRH     R0,[R4, #+60]
    455          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    456          
    457          
    458          /*********************************************************************//**
    459           * @brief 		Get full of time in RTC peripheral
    460           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    461           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    462           * 				will be stored time in full.
    463           * @return 		None
    464           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    465          void RTC_GetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    466          {
   \                     RTC_GetFullTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    467          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??RTC_GetFullTime_0
   \   0000000E   0xF240 0x11D3      MOVW     R1,#+467
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000016   0x.... 0x....      BL       check_failed
    468          
    469          	pFullTime->DOM = RTCx->DOM & RTC_DOM_MASK;
   \                     ??RTC_GetFullTime_0: (+1)
   \   0000001A   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000001E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000022   0x60E8             STR      R0,[R5, #+12]
    470          	pFullTime->DOW = RTCx->DOW & RTC_DOW_MASK;
   \   00000024   0xF894 0x0030      LDRB     R0,[R4, #+48]
   \   00000028   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000002C   0x6128             STR      R0,[R5, #+16]
    471          	pFullTime->DOY = RTCx->DOY & RTC_DOY_MASK;
   \   0000002E   0x8EA0             LDRH     R0,[R4, #+52]
   \   00000030   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000032   0x0DC0             LSRS     R0,R0,#+23
   \   00000034   0x6168             STR      R0,[R5, #+20]
    472          	pFullTime->HOUR = RTCx->HOUR & RTC_HOUR_MASK;
   \   00000036   0xF894 0x0028      LDRB     R0,[R4, #+40]
   \   0000003A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003E   0x60A8             STR      R0,[R5, #+8]
    473          	pFullTime->MIN = RTCx->MIN & RTC_MIN_MASK;
   \   00000040   0xF894 0x0024      LDRB     R0,[R4, #+36]
   \   00000044   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000048   0x6068             STR      R0,[R5, #+4]
    474          	pFullTime->SEC = RTCx->SEC & RTC_SEC_MASK;
   \   0000004A   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   0000004E   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000052   0x6028             STR      R0,[R5, #+0]
    475          	pFullTime->MONTH = RTCx->MONTH & RTC_MONTH_MASK;
   \   00000054   0xF894 0x0038      LDRB     R0,[R4, #+56]
   \   00000058   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005C   0x61A8             STR      R0,[R5, #+24]
    476          	pFullTime->YEAR = RTCx->YEAR & RTC_YEAR_MASK;
   \   0000005E   0x8FA0             LDRH     R0,[R4, #+60]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x61E8             STR      R0,[R5, #+28]
    477          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    478          
    479          
    480          /*********************************************************************//**
    481           * @brief 		Set alarm time value for each time type
    482           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    483           * @param[in]	Timetype: Time Type, should be:
    484           * 				- RTC_TIMETYPE_SECOND
    485           * 				- RTC_TIMETYPE_MINUTE
    486           * 				- RTC_TIMETYPE_HOUR
    487           * 				- RTC_TIMETYPE_DAYOFWEEK
    488           * 				- RTC_TIMETYPE_DAYOFMONTH
    489           * 				- RTC_TIMETYPE_DAYOFYEAR
    490           * 				- RTC_TIMETYPE_MONTH
    491           * 				- RTC_TIMETYPE_YEAR
    492           * @param[in]	ALValue Alarm time value to set
    493           * @return 		None
    494           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    495          void RTC_SetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t ALValue)
    496          {
   \                     RTC_SetAlarmTime: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    497          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40024000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??RTC_SetAlarmTime_0
   \   00000010   0xF240 0x11F1      MOVW     R1,#+497
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000018   0x.... 0x....      BL       check_failed
    498          
    499          	switch (Timetype)
   \                     ??RTC_SetAlarmTime_0: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD00B             BEQ.N    ??RTC_SetAlarmTime_1
   \   00000020   0x2D02             CMP      R5,#+2
   \   00000022   0xD023             BEQ.N    ??RTC_SetAlarmTime_2
   \   00000024   0xD315             BCC.N    ??RTC_SetAlarmTime_3
   \   00000026   0x2D04             CMP      R5,#+4
   \   00000028   0xD039             BEQ.N    ??RTC_SetAlarmTime_4
   \   0000002A   0xD32C             BCC.N    ??RTC_SetAlarmTime_5
   \   0000002C   0x2D06             CMP      R5,#+6
   \   0000002E   0xD054             BEQ.N    ??RTC_SetAlarmTime_6
   \   00000030   0xD343             BCC.N    ??RTC_SetAlarmTime_7
   \   00000032   0x2D07             CMP      R5,#+7
   \   00000034   0xD05F             BEQ.N    ??RTC_SetAlarmTime_8
   \   00000036   0xE06B             B.N      ??RTC_SetAlarmTime_9
    500          	{
    501          	case RTC_TIMETYPE_SECOND:
    502          		CHECK_PARAM(ALValue <= RTC_SECOND_MAX);
   \                     ??RTC_SetAlarmTime_1: (+1)
   \   00000038   0x2E3C             CMP      R6,#+60
   \   0000003A   0xD305             BCC.N    ??RTC_SetAlarmTime_10
   \   0000003C   0xF44F 0x71FB      MOV      R1,#+502
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000044   0x.... 0x....      BL       check_failed
    503          
    504          		RTCx->ALSEC = ALValue & RTC_SEC_MASK;
   \                     ??RTC_SetAlarmTime_10: (+1)
   \   00000048   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   0000004C   0xF884 0x0060      STRB     R0,[R4, #+96]
    505          		break;
   \   00000050   0xE05E             B.N      ??RTC_SetAlarmTime_9
    506          
    507          	case RTC_TIMETYPE_MINUTE:
    508          		CHECK_PARAM(ALValue <= RTC_MINUTE_MAX);
   \                     ??RTC_SetAlarmTime_3: (+1)
   \   00000052   0x2E3C             CMP      R6,#+60
   \   00000054   0xD305             BCC.N    ??RTC_SetAlarmTime_11
   \   00000056   0xF44F 0x71FE      MOV      R1,#+508
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   0000005E   0x.... 0x....      BL       check_failed
    509          
    510          		RTCx->ALMIN = ALValue & RTC_MIN_MASK;
   \                     ??RTC_SetAlarmTime_11: (+1)
   \   00000062   0xF016 0x003F      ANDS     R0,R6,#0x3F
   \   00000066   0xF884 0x0064      STRB     R0,[R4, #+100]
    511          		break;
   \   0000006A   0xE051             B.N      ??RTC_SetAlarmTime_9
    512          
    513          	case RTC_TIMETYPE_HOUR:
    514          		CHECK_PARAM(ALValue <= RTC_HOUR_MAX);
   \                     ??RTC_SetAlarmTime_2: (+1)
   \   0000006C   0x2E18             CMP      R6,#+24
   \   0000006E   0xD305             BCC.N    ??RTC_SetAlarmTime_12
   \   00000070   0xF240 0x2102      MOVW     R1,#+514
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000078   0x.... 0x....      BL       check_failed
    515          
    516          		RTCx->ALHOUR = ALValue & RTC_HOUR_MASK;
   \                     ??RTC_SetAlarmTime_12: (+1)
   \   0000007C   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   00000080   0xF884 0x0068      STRB     R0,[R4, #+104]
    517          		break;
   \   00000084   0xE044             B.N      ??RTC_SetAlarmTime_9
    518          
    519          	case RTC_TIMETYPE_DAYOFWEEK:
    520          		CHECK_PARAM(ALValue <= RTC_DAYOFWEEK_MAX);
   \                     ??RTC_SetAlarmTime_5: (+1)
   \   00000086   0x2E07             CMP      R6,#+7
   \   00000088   0xD304             BCC.N    ??RTC_SetAlarmTime_13
   \   0000008A   0xF44F 0x7102      MOV      R1,#+520
   \   0000008E   0x....             LDR.N    R0,??DataTable18_1
   \   00000090   0x.... 0x....      BL       check_failed
    521          
    522          		RTCx->ALDOW = ALValue & RTC_DOW_MASK;
   \                     ??RTC_SetAlarmTime_13: (+1)
   \   00000094   0xF016 0x0007      ANDS     R0,R6,#0x7
   \   00000098   0xF884 0x0070      STRB     R0,[R4, #+112]
    523          		break;
   \   0000009C   0xE038             B.N      ??RTC_SetAlarmTime_9
    524          
    525          	case RTC_TIMETYPE_DAYOFMONTH:
    526          		CHECK_PARAM((ALValue <= RTC_DAYOFMONTH_MAX) \
    527          				&& (ALValue >= RTC_DAYOFMONTH_MIN));
   \                     ??RTC_SetAlarmTime_4: (+1)
   \   0000009E   0x2E20             CMP      R6,#+32
   \   000000A0   0xD201             BCS.N    ??RTC_SetAlarmTime_14
   \   000000A2   0x2E00             CMP      R6,#+0
   \   000000A4   0xD104             BNE.N    ??RTC_SetAlarmTime_15
   \                     ??RTC_SetAlarmTime_14: (+1)
   \   000000A6   0xF240 0x210E      MOVW     R1,#+526
   \   000000AA   0x....             LDR.N    R0,??DataTable18_1
   \   000000AC   0x.... 0x....      BL       check_failed
    528          
    529          		RTCx->ALDOM = ALValue & RTC_DOM_MASK;
   \                     ??RTC_SetAlarmTime_15: (+1)
   \   000000B0   0xF016 0x001F      ANDS     R0,R6,#0x1F
   \   000000B4   0xF884 0x006C      STRB     R0,[R4, #+108]
    530          		break;
   \   000000B8   0xE02A             B.N      ??RTC_SetAlarmTime_9
    531          
    532          	case RTC_TIMETYPE_DAYOFYEAR:
    533          		CHECK_PARAM((ALValue >= RTC_DAYOFYEAR_MIN) \
    534          				&& (ALValue <= RTC_DAYOFYEAR_MAX));
   \                     ??RTC_SetAlarmTime_7: (+1)
   \   000000BA   0x2E00             CMP      R6,#+0
   \   000000BC   0xD002             BEQ.N    ??RTC_SetAlarmTime_16
   \   000000BE   0xF5B6 0x7FB7      CMP      R6,#+366
   \   000000C2   0xD904             BLS.N    ??RTC_SetAlarmTime_17
   \                     ??RTC_SetAlarmTime_16: (+1)
   \   000000C4   0xF240 0x2115      MOVW     R1,#+533
   \   000000C8   0x....             LDR.N    R0,??DataTable18_1
   \   000000CA   0x.... 0x....      BL       check_failed
    535          
    536          		RTCx->ALDOY = ALValue & RTC_DOY_MASK;
   \                     ??RTC_SetAlarmTime_17: (+1)
   \   000000CE   0x0030             MOVS     R0,R6
   \   000000D0   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   000000D2   0x0DC0             LSRS     R0,R0,#+23
   \   000000D4   0xF8A4 0x0074      STRH     R0,[R4, #+116]
    537          		break;
   \   000000D8   0xE01A             B.N      ??RTC_SetAlarmTime_9
    538          
    539          	case RTC_TIMETYPE_MONTH:
    540          		CHECK_PARAM((ALValue >= RTC_MONTH_MIN) \
    541          				&& (ALValue <= RTC_MONTH_MAX));
   \                     ??RTC_SetAlarmTime_6: (+1)
   \   000000DA   0x2E00             CMP      R6,#+0
   \   000000DC   0xD001             BEQ.N    ??RTC_SetAlarmTime_18
   \   000000DE   0x2E0D             CMP      R6,#+13
   \   000000E0   0xD304             BCC.N    ??RTC_SetAlarmTime_19
   \                     ??RTC_SetAlarmTime_18: (+1)
   \   000000E2   0xF44F 0x7107      MOV      R1,#+540
   \   000000E6   0x....             LDR.N    R0,??DataTable18_1
   \   000000E8   0x.... 0x....      BL       check_failed
    542          
    543          		RTCx->ALMON = ALValue & RTC_MONTH_MASK;
   \                     ??RTC_SetAlarmTime_19: (+1)
   \   000000EC   0xF016 0x000F      ANDS     R0,R6,#0xF
   \   000000F0   0xF884 0x0078      STRB     R0,[R4, #+120]
    544          		break;
   \   000000F4   0xE00C             B.N      ??RTC_SetAlarmTime_9
    545          
    546          	case RTC_TIMETYPE_YEAR:
    547          		CHECK_PARAM(ALValue <= RTC_YEAR_MAX);
   \                     ??RTC_SetAlarmTime_8: (+1)
   \   000000F6   0xF5B6 0x5F80      CMP      R6,#+4096
   \   000000FA   0xD304             BCC.N    ??RTC_SetAlarmTime_20
   \   000000FC   0xF240 0x2123      MOVW     R1,#+547
   \   00000100   0x....             LDR.N    R0,??DataTable18_1
   \   00000102   0x.... 0x....      BL       check_failed
    548          
    549          		RTCx->ALYEAR = ALValue & RTC_YEAR_MASK;
   \                     ??RTC_SetAlarmTime_20: (+1)
   \   00000106   0x0030             MOVS     R0,R6
   \   00000108   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000010A   0x0D00             LSRS     R0,R0,#+20
   \   0000010C   0xF8A4 0x007C      STRH     R0,[R4, #+124]
    550          		break;
    551          	}
    552          }
   \                     ??RTC_SetAlarmTime_9: (+1)
   \   00000110   0xBD70             POP      {R4-R6,PC}       ;; return
    553          
    554          
    555          
    556          /*********************************************************************//**
    557           * @brief 		Get alarm time value for each time type
    558           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    559           * @param[in]	Timetype: Time Type, should be:
    560           * 				- RTC_TIMETYPE_SECOND
    561           * 				- RTC_TIMETYPE_MINUTE
    562           * 				- RTC_TIMETYPE_HOUR
    563           * 				- RTC_TIMETYPE_DAYOFWEEK
    564           * 				- RTC_TIMETYPE_DAYOFMONTH
    565           * 				- RTC_TIMETYPE_DAYOFYEAR
    566           * 				- RTC_TIMETYPE_MONTH
    567           * 				- RTC_TIMETYPE_YEAR
    568            * @return 	Value of Alarm time according to specified time type
    569           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    570          uint32_t RTC_GetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
    571          {
   \                     RTC_GetAlarmTime: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    572          	switch (Timetype)
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD00B             BEQ.N    ??RTC_GetAlarmTime_0
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD013             BEQ.N    ??RTC_GetAlarmTime_1
   \   0000000A   0xD30D             BCC.N    ??RTC_GetAlarmTime_2
   \   0000000C   0x2904             CMP      R1,#+4
   \   0000000E   0xD01A             BEQ.N    ??RTC_GetAlarmTime_3
   \   00000010   0xD314             BCC.N    ??RTC_GetAlarmTime_4
   \   00000012   0x2906             CMP      R1,#+6
   \   00000014   0xD021             BEQ.N    ??RTC_GetAlarmTime_5
   \   00000016   0xD31B             BCC.N    ??RTC_GetAlarmTime_6
   \   00000018   0x2907             CMP      R1,#+7
   \   0000001A   0xD023             BEQ.N    ??RTC_GetAlarmTime_7
   \   0000001C   0xE027             B.N      ??RTC_GetAlarmTime_8
    573          	{
    574          	case RTC_TIMETYPE_SECOND:
    575          		return (RTCx->ALSEC & RTC_SEC_MASK);
   \                     ??RTC_GetAlarmTime_0: (+1)
   \   0000001E   0xF892 0x0060      LDRB     R0,[R2, #+96]
   \   00000022   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000026   0xE023             B.N      ??RTC_GetAlarmTime_9
    576          	case RTC_TIMETYPE_MINUTE:
    577          		return (RTCx->ALMIN & RTC_MIN_MASK);
   \                     ??RTC_GetAlarmTime_2: (+1)
   \   00000028   0xF892 0x0064      LDRB     R0,[R2, #+100]
   \   0000002C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000030   0xE01E             B.N      ??RTC_GetAlarmTime_9
    578          	case RTC_TIMETYPE_HOUR:
    579          		return (RTCx->ALHOUR & RTC_HOUR_MASK);
   \                     ??RTC_GetAlarmTime_1: (+1)
   \   00000032   0xF892 0x0068      LDRB     R0,[R2, #+104]
   \   00000036   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003A   0xE019             B.N      ??RTC_GetAlarmTime_9
    580          	case RTC_TIMETYPE_DAYOFWEEK:
    581          		return (RTCx->ALDOW & RTC_DOW_MASK);
   \                     ??RTC_GetAlarmTime_4: (+1)
   \   0000003C   0xF892 0x0070      LDRB     R0,[R2, #+112]
   \   00000040   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000044   0xE014             B.N      ??RTC_GetAlarmTime_9
    582          	case RTC_TIMETYPE_DAYOFMONTH:
    583          		return (RTCx->ALDOM & RTC_DOM_MASK);
   \                     ??RTC_GetAlarmTime_3: (+1)
   \   00000046   0xF892 0x006C      LDRB     R0,[R2, #+108]
   \   0000004A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000004E   0xE00F             B.N      ??RTC_GetAlarmTime_9
    584          	case RTC_TIMETYPE_DAYOFYEAR:
    585          		return (RTCx->ALDOY & RTC_DOY_MASK);
   \                     ??RTC_GetAlarmTime_6: (+1)
   \   00000050   0xF8B2 0x0074      LDRH     R0,[R2, #+116]
   \   00000054   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000056   0x0DC0             LSRS     R0,R0,#+23
   \   00000058   0xE00A             B.N      ??RTC_GetAlarmTime_9
    586          	case RTC_TIMETYPE_MONTH:
    587          		return (RTCx->ALMON & RTC_MONTH_MASK);
   \                     ??RTC_GetAlarmTime_5: (+1)
   \   0000005A   0xF892 0x0078      LDRB     R0,[R2, #+120]
   \   0000005E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000062   0xE005             B.N      ??RTC_GetAlarmTime_9
    588          	case RTC_TIMETYPE_YEAR:
    589          		return (RTCx->ALYEAR & RTC_YEAR_MASK);
   \                     ??RTC_GetAlarmTime_7: (+1)
   \   00000064   0xF8B2 0x007C      LDRH     R0,[R2, #+124]
   \   00000068   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000006A   0x0D00             LSRS     R0,R0,#+20
   \   0000006C   0xE000             B.N      ??RTC_GetAlarmTime_9
    590          	default:
    591          		return (0);
   \                     ??RTC_GetAlarmTime_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetAlarmTime_9: (+1)
   \   00000070   0x4770             BX       LR               ;; return
    592          	}
    593          }
    594          
    595          
    596          /*********************************************************************//**
    597           * @brief 		Set full of alarm time in RTC peripheral
    598           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    599           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    600           * 				contains alarm time value in full.
    601           * @return 		None
    602           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    603          void RTC_SetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    604          {
   \                     RTC_SetFullAlarmTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    605          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_SetFullAlarmTime_0
   \   0000000C   0xF240 0x215D      MOVW     R1,#+605
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    606          
    607          	RTCx->ALDOM = pFullTime->DOM & RTC_DOM_MASK;
   \                     ??RTC_SetFullAlarmTime_0: (+1)
   \   00000016   0x7B28             LDRB     R0,[R5, #+12]
   \   00000018   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000001C   0xF884 0x006C      STRB     R0,[R4, #+108]
    608          	RTCx->ALDOW = pFullTime->DOW & RTC_DOW_MASK;
   \   00000020   0x7C28             LDRB     R0,[R5, #+16]
   \   00000022   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000026   0xF884 0x0070      STRB     R0,[R4, #+112]
    609          	RTCx->ALDOY = pFullTime->DOY & RTC_DOY_MASK;
   \   0000002A   0x6968             LDR      R0,[R5, #+20]
   \   0000002C   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   0000002E   0x0DC0             LSRS     R0,R0,#+23
   \   00000030   0xF8A4 0x0074      STRH     R0,[R4, #+116]
    610          	RTCx->ALHOUR = pFullTime->HOUR & RTC_HOUR_MASK;
   \   00000034   0x7A28             LDRB     R0,[R5, #+8]
   \   00000036   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003A   0xF884 0x0068      STRB     R0,[R4, #+104]
    611          	RTCx->ALMIN = pFullTime->MIN & RTC_MIN_MASK;
   \   0000003E   0x7928             LDRB     R0,[R5, #+4]
   \   00000040   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000044   0xF884 0x0064      STRB     R0,[R4, #+100]
    612          	RTCx->ALSEC = pFullTime->SEC & RTC_SEC_MASK;
   \   00000048   0x7828             LDRB     R0,[R5, #+0]
   \   0000004A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000004E   0xF884 0x0060      STRB     R0,[R4, #+96]
    613          	RTCx->ALMON = pFullTime->MONTH & RTC_MONTH_MASK;
   \   00000052   0x7E28             LDRB     R0,[R5, #+24]
   \   00000054   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000058   0xF884 0x0078      STRB     R0,[R4, #+120]
    614          	RTCx->ALYEAR = pFullTime->YEAR & RTC_YEAR_MASK;
   \   0000005C   0x69E8             LDR      R0,[R5, #+28]
   \   0000005E   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000060   0x0D00             LSRS     R0,R0,#+20
   \   00000062   0xF8A4 0x007C      STRH     R0,[R4, #+124]
    615          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    616          
    617          
    618          /*********************************************************************//**
    619           * @brief 		Get full of alarm time in RTC peripheral
    620           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    621           * @param[in]	pFullTime Pointer to a RTC_TIME_Type structure that
    622           * 				will be stored alarm time in full.
    623           * @return 		None
    624           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    625          void RTC_GetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
    626          {
   \                     RTC_GetFullAlarmTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    627          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_GetFullAlarmTime_0
   \   0000000C   0xF240 0x2173      MOVW     R1,#+627
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    628          
    629          	pFullTime->DOM = RTCx->ALDOM & RTC_DOM_MASK;
   \                     ??RTC_GetFullAlarmTime_0: (+1)
   \   00000016   0xF894 0x006C      LDRB     R0,[R4, #+108]
   \   0000001A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000001E   0x60E8             STR      R0,[R5, #+12]
    630          	pFullTime->DOW = RTCx->ALDOW & RTC_DOW_MASK;
   \   00000020   0xF894 0x0070      LDRB     R0,[R4, #+112]
   \   00000024   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000028   0x6128             STR      R0,[R5, #+16]
    631          	pFullTime->DOY = RTCx->ALDOY & RTC_DOY_MASK;
   \   0000002A   0xF8B4 0x0074      LDRH     R0,[R4, #+116]
   \   0000002E   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000030   0x0DC0             LSRS     R0,R0,#+23
   \   00000032   0x6168             STR      R0,[R5, #+20]
    632          	pFullTime->HOUR = RTCx->ALHOUR & RTC_HOUR_MASK;
   \   00000034   0xF894 0x0068      LDRB     R0,[R4, #+104]
   \   00000038   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000003C   0x60A8             STR      R0,[R5, #+8]
    633          	pFullTime->MIN = RTCx->ALMIN & RTC_MIN_MASK;
   \   0000003E   0xF894 0x0064      LDRB     R0,[R4, #+100]
   \   00000042   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000046   0x6068             STR      R0,[R5, #+4]
    634          	pFullTime->SEC = RTCx->ALSEC & RTC_SEC_MASK;
   \   00000048   0xF894 0x0060      LDRB     R0,[R4, #+96]
   \   0000004C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000050   0x6028             STR      R0,[R5, #+0]
    635          	pFullTime->MONTH = RTCx->ALMON & RTC_MONTH_MASK;
   \   00000052   0xF894 0x0078      LDRB     R0,[R4, #+120]
   \   00000056   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000005A   0x61A8             STR      R0,[R5, #+24]
    636          	pFullTime->YEAR = RTCx->ALYEAR & RTC_YEAR_MASK;
   \   0000005C   0xF8B4 0x007C      LDRH     R0,[R4, #+124]
   \   00000060   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000062   0x0D00             LSRS     R0,R0,#+20
   \   00000064   0x61E8             STR      R0,[R5, #+28]
    637          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    638          
    639          
    640          /*********************************************************************//**
    641           * @brief 		Check whether if specified Location interrupt in
    642           * 				RTC peripheral is set or not
    643           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    644           * @param[in]	IntType Interrupt location type, should be:
    645           * 						- RTC_INT_COUNTER_INCREASE: Counter Increment Interrupt
    646           * 							block generated an interrupt.
    647           * 						- RTC_INT_ALARM: Alarm generated an
    648           * 							interrupt.
    649           * @return 		New state of specified Location interrupt in RTC peripheral
    650           * 				(SET or RESET)
    651           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    652          IntStatus RTC_GetIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
    653          {
   \                     RTC_GetIntPending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    654          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_GetIntPending_0
   \   0000000C   0xF240 0x218E      MOVW     R1,#+654
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    655          	CHECK_PARAM(PARAM_RTC_INT(IntType));
   \                     ??RTC_GetIntPending_0: (+1)
   \   00000016   0x2D01             CMP      R5,#+1
   \   00000018   0xD006             BEQ.N    ??RTC_GetIntPending_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD004             BEQ.N    ??RTC_GetIntPending_1
   \   0000001E   0xF240 0x218F      MOVW     R1,#+655
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    656          
    657          	return ((RTCx->ILR & IntType) ? SET : RESET);
   \                     ??RTC_GetIntPending_1: (+1)
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x4228             TST      R0,R5
   \   0000002C   0xD001             BEQ.N    ??RTC_GetIntPending_2
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??RTC_GetIntPending_3
   \                     ??RTC_GetIntPending_2: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??RTC_GetIntPending_3: (+1)
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    658          }
    659          
    660          
    661          /*********************************************************************//**
    662           * @brief 		Clear specified Location interrupt pending in
    663           * 				RTC peripheral
    664           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    665           * @param[in]	IntType Interrupt location type, should be:
    666           * 						- RTC_INT_COUNTER_INCREASE: Clear Counter Increment
    667           * 						Interrupt pending.
    668           * 						- RTC_INT_ALARM: Clear alarm interrupt pending
    669           * @return 		None
    670           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    671          void RTC_ClearIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
    672          {
   \                     RTC_ClearIntPending: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    673          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ClearIntPending_0
   \   0000000C   0xF240 0x21A1      MOVW     R1,#+673
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    674          	CHECK_PARAM(PARAM_RTC_INT(IntType));
   \                     ??RTC_ClearIntPending_0: (+1)
   \   00000016   0x2D01             CMP      R5,#+1
   \   00000018   0xD006             BEQ.N    ??RTC_ClearIntPending_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD004             BEQ.N    ??RTC_ClearIntPending_1
   \   0000001E   0xF240 0x21A2      MOVW     R1,#+674
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    675          
    676          	RTCx->ILR |= IntType;
   \                     ??RTC_ClearIntPending_1: (+1)
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x4328             ORRS     R0,R5,R0
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
    677          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    678          
    679          /*********************************************************************//**
    680           * @brief 		Enable/Disable calibration counter in RTC peripheral
    681           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    682           * @param[in]	NewState New State of this function, should be:
    683           * 				- ENABLE: The calibration counter is enabled and counting
    684           * 				- DISABLE: The calibration counter is disabled and reset to zero
    685           * @return 		None
    686           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    687          void RTC_CalibCounterCmd(LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
    688          {
   \                     RTC_CalibCounterCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    689          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_CalibCounterCmd_0
   \   0000000C   0xF240 0x21B1      MOVW     R1,#+689
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    690          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??RTC_CalibCounterCmd_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD007             BEQ.N    ??RTC_CalibCounterCmd_1
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D01             CMP      R5,#+1
   \   00000020   0xD004             BEQ.N    ??RTC_CalibCounterCmd_1
   \   00000022   0xF240 0x21B2      MOVW     R1,#+690
   \   00000026   0x....             LDR.N    R0,??DataTable18_1
   \   00000028   0x.... 0x....      BL       check_failed
    691          
    692          	if (NewState == ENABLE)
   \                     ??RTC_CalibCounterCmd_1: (+1)
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD104             BNE.N    ??RTC_CalibCounterCmd_2
    693          	{
    694          		RTCx->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
   \   00000032   0x7A20             LDRB     R0,[R4, #+8]
   \   00000034   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000038   0x7220             STRB     R0,[R4, #+8]
   \   0000003A   0xE003             B.N      ??RTC_CalibCounterCmd_3
    695          	}
    696          	else
    697          	{
    698          		RTCx->CCR |= RTC_CCR_CCALEN;
   \                     ??RTC_CalibCounterCmd_2: (+1)
   \   0000003C   0x7A20             LDRB     R0,[R4, #+8]
   \   0000003E   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000042   0x7220             STRB     R0,[R4, #+8]
    699          	}
    700          }
   \                     ??RTC_CalibCounterCmd_3: (+1)
   \   00000044   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    701          
    702          
    703          /*********************************************************************//**
    704           * @brief 		Configures Calibration in RTC peripheral
    705           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    706           * @param[in]	CalibValue Calibration value, should be in range from
    707           * 					0 to 131,072
    708           * @param[in]	CalibDir Calibration Direction, should be:
    709           * 					- RTC_CALIB_DIR_FORWARD: Forward calibration
    710           * 					- RTC_CALIB_DIR_BACKWARD: Backward calibration
    711           * @return 		None
    712           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    713          void RTC_CalibConfig(LPC_RTC_TypeDef *RTCx, uint32_t CalibValue, uint8_t CalibDir)
    714          {
   \                     RTC_CalibConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    715          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_CalibConfig_0
   \   0000000E   0xF240 0x21CB      MOVW     R1,#+715
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    716          	CHECK_PARAM(PARAM_RTC_CALIB_DIR(CalibDir));
   \                     ??RTC_CalibConfig_0: (+1)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD007             BEQ.N    ??RTC_CalibConfig_1
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0x2E01             CMP      R6,#+1
   \   00000022   0xD004             BEQ.N    ??RTC_CalibConfig_1
   \   00000024   0xF44F 0x7133      MOV      R1,#+716
   \   00000028   0x....             LDR.N    R0,??DataTable18_1
   \   0000002A   0x.... 0x....      BL       check_failed
    717          	CHECK_PARAM(CalibValue < RTC_CALIBRATION_MAX);
   \                     ??RTC_CalibConfig_1: (+1)
   \   0000002E   0xF5B5 0x3F00      CMP      R5,#+131072
   \   00000032   0xD304             BCC.N    ??RTC_CalibConfig_2
   \   00000034   0xF240 0x21CD      MOVW     R1,#+717
   \   00000038   0x....             LDR.N    R0,??DataTable18_1
   \   0000003A   0x.... 0x....      BL       check_failed
    718          
    719          	RTCx->CALIBRATION = ((CalibValue) & RTC_CALIBRATION_CALVAL_MASK) \
    720          			| ((CalibDir == RTC_CALIB_DIR_BACKWARD) ? RTC_CALIBRATION_LIBDIR : 0);
   \                     ??RTC_CalibConfig_2: (+1)
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0x2E01             CMP      R6,#+1
   \   00000042   0xD102             BNE.N    ??RTC_CalibConfig_3
   \   00000044   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000048   0xE000             B.N      ??RTC_CalibConfig_4
   \                     ??RTC_CalibConfig_3: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \                     ??RTC_CalibConfig_4: (+1)
   \   0000004C   0x03E9             LSLS     R1,R5,#+15       ;; ZeroExtS R1,R5,#+15,#+15
   \   0000004E   0x0BC9             LSRS     R1,R1,#+15
   \   00000050   0x4308             ORRS     R0,R0,R1
   \   00000052   0x6420             STR      R0,[R4, #+64]
    721          }
   \   00000054   0xBD70             POP      {R4-R6,PC}       ;; return
    722          
    723          
    724          /*********************************************************************//**
    725           * @brief 		Write value to General purpose registers
    726           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    727           * @param[in]	Channel General purpose registers Channel number,
    728           * 				should be in range from 0 to 4.
    729           * @param[in]	Value Value to write
    730           * @return 		None
    731           * Note: These General purpose registers can be used to store important
    732           * information when the main power supply is off. The value in these
    733           * registers is not affected by chip reset.
    734           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    735          void RTC_WriteGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel, uint32_t Value)
    736          {
   \                     RTC_WriteGPREG: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    737          	uint32_t *preg;
    738          
    739          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000008   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??RTC_WriteGPREG_0
   \   0000000E   0xF240 0x21E3      MOVW     R1,#+739
   \   00000012   0x....             LDR.N    R0,??DataTable18_1
   \   00000014   0x.... 0x....      BL       check_failed
    740          	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
   \                     ??RTC_WriteGPREG_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D05             CMP      R5,#+5
   \   0000001C   0xDB04             BLT.N    ??RTC_WriteGPREG_1
   \   0000001E   0xF44F 0x7139      MOV      R1,#+740
   \   00000022   0x....             LDR.N    R0,??DataTable18_1
   \   00000024   0x.... 0x....      BL       check_failed
    741          
    742          	preg = (uint32_t *)&RTCx->GPREG0;
   \                     ??RTC_WriteGPREG_1: (+1)
   \   00000028   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000002C   0x0007             MOVS     R7,R0
    743          	preg += Channel;
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0xEB17 0x0785      ADDS     R7,R7,R5, LSL #+2
    744          	*preg = Value;
   \   00000034   0x603E             STR      R6,[R7, #+0]
    745          }
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    746          
    747          
    748          /*********************************************************************//**
    749           * @brief 		Read value from General purpose registers
    750           * @param[in]	RTCx	RTC peripheral selected, should be LPC_RTC
    751           * @param[in]	Channel General purpose registers Channel number,
    752           * 				should be in range from 0 to 4.
    753           * @return 		Read Value
    754           * Note: These General purpose registers can be used to store important
    755           * information when the main power supply is off. The value in these
    756           * registers is not affected by chip reset.
    757           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    758          uint32_t RTC_ReadGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel)
    759          {
   \                     RTC_ReadGPREG: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    760          	uint32_t *preg;
    761          	uint32_t value;
    762          
    763          	CHECK_PARAM(PARAM_RTCx(RTCx));
   \   00000006   0x....             LDR.N    R0,??DataTable18  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??RTC_ReadGPREG_0
   \   0000000C   0xF240 0x21FB      MOVW     R1,#+763
   \   00000010   0x....             LDR.N    R0,??DataTable18_1
   \   00000012   0x.... 0x....      BL       check_failed
    764          	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
   \                     ??RTC_ReadGPREG_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D05             CMP      R5,#+5
   \   0000001A   0xDB04             BLT.N    ??RTC_ReadGPREG_1
   \   0000001C   0xF44F 0x713F      MOV      R1,#+764
   \   00000020   0x....             LDR.N    R0,??DataTable18_1
   \   00000022   0x.... 0x....      BL       check_failed
    765          
    766          	preg = (uint32_t *)&RTCx->GPREG0;
   \                     ??RTC_ReadGPREG_1: (+1)
   \   00000026   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000002A   0x0006             MOVS     R6,R0
    767          	preg += Channel;
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0xEB16 0x0685      ADDS     R6,R6,R5, LSL #+2
    768          	value = *preg;
   \   00000032   0x6830             LDR      R0,[R6, #+0]
   \   00000034   0x0007             MOVS     R7,R0
    769          	return (value);
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    770          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40024000         DC32     0x40024000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 69H, 61H, 72H, 5CH, 4EH
   \              0x5C 0x69    
   \              0x61 0x72    
   \              0x5C 0x4E    
   \   00000008   0x43 0x31          DC8 43H, 31H, 33H, 36H, 42H, 2DH, 33H, 31H
   \              0x33 0x36    
   \              0x42 0x2D    
   \              0x33 0x31    
   \   00000010   0x30 0xCD          DC8 30H, 0CDH, 0B3H, 0BCH, 0C6H, 0C4H, 0A3H, 0BFH
   \              0xB3 0xBC    
   \              0xC6 0xC4    
   \              0xA3 0xBF    
   \   00000018   0xE9 0x5C          DC8 0E9H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000020   0x72 0x65          DC8 72H, 65H, 5CH, 43H, 53H, 42H, 5CH, 73H
   \              0x5C 0x43    
   \              0x53 0x42    
   \              0x5C 0x73    
   \   00000028   0x6F 0x75          DC8 6FH, 75H, 72H, 63H, 65H, 5CH, 6CH, 70H
   \              0x72 0x63    
   \              0x65 0x5C    
   \              0x6C 0x70    
   \   00000030   0x63 0x31          DC8 63H, 31H, 37H, 78H, 78H, 5FH, 72H, 74H
   \              0x37 0x78    
   \              0x78 0x5F    
   \              0x72 0x74    
   \   00000038   0x63 0x2E          DC8 63H, 2EH, 63H, 0
   \              0x63 0x00    
    771          
    772          /**
    773           * @}
    774           */
    775          
    776          #endif /* _RTC */
    777          
    778          /**
    779           * @}
    780           */
    781          
    782          /* --------------------------------- End Of File ------------------------------ */
    783          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RTC_AlarmIntConfig
        16   -> check_failed
      16   RTC_CalibConfig
        16   -> check_failed
      16   RTC_CalibCounterCmd
        16   -> check_failed
      16   RTC_ClearIntPending
        16   -> check_failed
      16   RTC_Cmd
        16   -> check_failed
      16   RTC_CntIncrIntConfig
        16   -> check_failed
       8   RTC_DeInit
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
       0   RTC_GetAlarmTime
      16   RTC_GetFullAlarmTime
        16   -> check_failed
      16   RTC_GetFullTime
        16   -> check_failed
      16   RTC_GetIntPending
        16   -> check_failed
      16   RTC_GetTime
        16   -> check_failed
       8   RTC_Init
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      24   RTC_ReadGPREG
        24   -> check_failed
       8   RTC_ResetClockTickCounter
         8   -> check_failed
      16   RTC_SetAlarmTime
        16   -> check_failed
      16   RTC_SetFullAlarmTime
        16   -> check_failed
      16   RTC_SetFullTime
        16   -> check_failed
      16   RTC_SetTime
        16   -> check_failed
      24   RTC_WriteGPREG
        24   -> check_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
      60  ?_0
     312  RTC_AlarmIntConfig
      86  RTC_CalibConfig
      70  RTC_CalibCounterCmd
      48  RTC_ClearIntPending
      72  RTC_Cmd
     312  RTC_CntIncrIntConfig
      38  RTC_DeInit
     114  RTC_GetAlarmTime
     104  RTC_GetFullAlarmTime
     104  RTC_GetFullTime
      56  RTC_GetIntPending
     178  RTC_GetTime
      54  RTC_Init
      58  RTC_ReadGPREG
      40  RTC_ResetClockTickCounter
     274  RTC_SetAlarmTime
     104  RTC_SetFullAlarmTime
     104  RTC_SetFullTime
     324  RTC_SetTime
      56  RTC_WriteGPREG

 
    60 bytes in section .rodata
 2 516 bytes in section .text
 
 2 516 bytes of CODE  memory
    60 bytes of CONST memory

Errors: none
Warnings: none
