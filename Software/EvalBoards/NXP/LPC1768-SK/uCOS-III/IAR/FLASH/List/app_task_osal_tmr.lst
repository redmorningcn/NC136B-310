###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Aug/2017  16:25:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_tmr.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_tmr.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_task_osal_tmr.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_task_osal_tmr.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\APP\Tasks\app_task_osal_tmr.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_tmr.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 tmr 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Tmr 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 TMR 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_TMR_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_TMR_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskTmrCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Tmr ）
     17           *
     18           *   Notes:
     19           *     				E-mail: shenchangwei945@163.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          #include "DS3231.h"
     29          #include "app.h"
     30          #include "bsp_timer.h"
     31          #include "os_cfg_app.h"
     32          
     33          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     34          const  CPU_CHAR  *app_task_tmr__c = "$Id: $";
     35          #endif
     36          
     37          #define APP_TASK_TMR_EN     DEF_ENABLED
     38          #if APP_TASK_TMR_EN == DEF_ENABLED
     39          /*******************************************************************************
     40           * CONSTANTS
     41           */
     42          #define CYCLE_TIME_TICKS            (OS_CFG_TICK_RATE_HZ * 1u)
     43          #define CYCLE_SAMPLE_MSEC_TICKS     (OS_CFG_TICK_RATE_HZ / 5)
     44          #define CYCLE_SAMPLE_SEC_TICKS      (OS_CFG_TICK_RATE_HZ * 5u)
     45          #define CYCLE_SAMPLE_MIN_TICKS      (OS_CFG_TICK_RATE_HZ * 60u)
     46          #define CYCLE_SAMPLE_TICKS          (OS_CFG_TICK_RATE_HZ * 2u)
     47               
     48          /*******************************************************************************
     49           * MACROS
     50           */
     51          
     52          /*******************************************************************************
     53           * TYPEDEFS
     54           */
     55          extern     stcSysCtrl   sCtrl;
     56          
     57          /*******************************************************************************
     58           * LOCAL VARIABLES
     59           */
     60          
     61          #if ( OSAL_EN == DEF_ENABLED )
     62          #else
     63          /***********************************************
     64          * 描述： 任务控制块（TCB）
     65          */
     66          static  OS_TCB   AppTaskTmrTCB;
     67          
     68          /***********************************************
     69          * 描述： 任务堆栈（STACKS）
     70          */
     71          static  CPU_STK  AppTaskTmrStk[ APP_TASK_TMR_STK_SIZE ];
     72          
     73          #endif
     74          /*******************************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          /*******************************************************************************
     79           * LOCAL FUNCTIONS
     80           */
     81          
     82          /*******************************************************************************
     83           * GLOBAL FUNCTIONS
     84           */
     85          
     86          /*******************************************************************************
     87           * EXTERN VARIABLES
     88           */
     89          
     90          /*******************************************************************************/
     91          
     92          /*******************************************************************************
     93           * 名    称： AppTaskTmr
     94           * 功    能： 控制任务
     95           * 入口参数： p_arg - 由任务创建函数传入
     96           * 出口参数： 无
     97           * 作　 　者： wumingshen.
     98           * 创建日期： 2015-02-05
     99           * 修    改：
    100           * 修改日期：
    101           *******************************************************************************/
    102          

   \                                 In section .text, align 2, keep-with-next
    103          osalEvt  TaskTmrEvtProcess(INT8U task_id, osalEvt task_event)
    104          {
   \                     TaskTmrEvtProcess: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    105              OS_ERR      err;
    106          //    static BOOL     chang_flag = FALSE;
    107              
    108              /***********************************************
    109              * 描述： 本任务看门狗标志置位
    110              */
    111              OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    112                           (OS_FLAGS     ) WDT_FLAG_TMR,
    113                           (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    114                           (CPU_TS       ) 0,
    115                           (OS_ERR      *) &err);    
   \   00000008   0xA801             ADD      R0,SP,#+4
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x....             LDR.N    R0,??DataTable1
   \   00000014   0x.... 0x....      BL       OS_FlagPost
    116            
    117              /***************************************************************************
    118              * 描述： 统计模块和测量某块通讯定时器，统计装置定时发送数据查询指令，超时发送
    119              COMM_EVT_FLAG_MTR_TIMEOUT 标示。定时500ms通讯一次。
    120              */
    121              if( task_event & OS_EVT_TMR_MTR ) {     
   \   00000018   0x06A8             LSLS     R0,R5,#+26
   \   0000001A   0xD50A             BPL.N    ??TaskTmrEvtProcess_0
    122                  OS_FlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    123                              ( OS_FLAGS     ) COMM_EVT_FLAG_MTR_TIMEOUT,
    124                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    125                              ( CPU_TS       ) 0,
    126                              ( OS_ERR      *) &err);        
   \   0000001C   0xA801             ADD      R0,SP,#+4
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2108             MOVS     R1,#+8
   \   00000026   0x....             LDR.N    R0,??DataTable1_1
   \   00000028   0x.... 0x....      BL       OS_FlagPost
    127                  
    128                  return ( task_event ^ OS_EVT_TMR_MTR );
   \   0000002C   0xF095 0x0020      EORS     R0,R5,#0x20
   \   00000030   0xE070             B.N      ??TaskTmrEvtProcess_1
    129              }
    130              
    131              /***************************************************************************
    132              * 描述： 统计模块和无线发送模块通讯定时器，
    133              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    134              */
    135              if( task_event & OS_EVT_TMR_DTU ) { 
   \                     ??TaskTmrEvtProcess_0: (+1)
   \   00000032   0x0668             LSLS     R0,R5,#+25
   \   00000034   0xD50A             BPL.N    ??TaskTmrEvtProcess_2
    136                  OS_FlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    137                              ( OS_FLAGS     ) COMM_EVT_FLAG_DTU_TIMEOUT,
    138                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    139                              ( CPU_TS       ) 0,
    140                              ( OS_ERR      *) &err);        
   \   00000036   0xA801             ADD      R0,SP,#+4
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2110             MOVS     R1,#+16
   \   00000040   0x....             LDR.N    R0,??DataTable1_1
   \   00000042   0x.... 0x....      BL       OS_FlagPost
    141                  
    142                  return ( task_event ^ OS_EVT_TMR_DTU );
   \   00000046   0xF095 0x0040      EORS     R0,R5,#0x40
   \   0000004A   0xE063             B.N      ??TaskTmrEvtProcess_1
    143              }
    144              
    145              /***************************************************************************
    146              * 描述： 统计模块和无线发送模块通讯定时器，
    147              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    148              */
    149              if( task_event & OS_EVT_TMR_OTR ) {        
   \                     ??TaskTmrEvtProcess_2: (+1)
   \   0000004C   0x0628             LSLS     R0,R5,#+24
   \   0000004E   0xD50A             BPL.N    ??TaskTmrEvtProcess_3
    150                  OS_FlagPost(( OS_FLAG_GRP *)&sCtrl.Os.CommEvtFlagGrp,
    151                              ( OS_FLAGS     ) COMM_EVT_FLAG_OTR_TIMEOUT,
    152                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    153                              ( CPU_TS       ) 0,
    154                              ( OS_ERR      *) &err);        
   \   00000050   0xA801             ADD      R0,SP,#+4
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x2300             MOVS     R3,#+0
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2120             MOVS     R1,#+32
   \   0000005A   0x....             LDR.N    R0,??DataTable1_1
   \   0000005C   0x.... 0x....      BL       OS_FlagPost
    155                  
    156                  return ( task_event ^ OS_EVT_TMR_OTR );
   \   00000060   0xF095 0x0080      EORS     R0,R5,#0x80
   \   00000064   0xE056             B.N      ??TaskTmrEvtProcess_1
    157              }
    158          
    159              /***************************************************************************
    160              * 描述： 统计模块和无线发送模块通讯定时器，
    161              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    162              */
    163              if( task_event & OS_EVT_TMR_SEC ) {        
   \                     ??TaskTmrEvtProcess_3: (+1)
   \   00000066   0x0768             LSLS     R0,R5,#+29
   \   00000068   0xD553             BPL.N    ??TaskTmrEvtProcess_4
    164                      sCtrl.Dtu.ConnectTimeOut++;
   \   0000006A   0x....             LDR.N    R0,??DataTable1_2
   \   0000006C   0xF890 0x0505      LDRB     R0,[R0, #+1285]
   \   00000070   0xF010 0x0180      ANDS     R1,R0,#0x80
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000007A   0x4308             ORRS     R0,R0,R1
   \   0000007C   0x....             LDR.N    R1,??DataTable1_2
   \   0000007E   0xF881 0x0505      STRB     R0,[R1, #+1285]
    165                      sCtrl.Mtr.ConnectTimeOut++;
   \   00000082   0x....             LDR.N    R0,??DataTable1_2
   \   00000084   0xF890 0x03A8      LDRB     R0,[R0, #+936]
   \   00000088   0xF010 0x0180      ANDS     R1,R0,#0x80
   \   0000008C   0x1C40             ADDS     R0,R0,#+1
   \   0000008E   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000092   0x4308             ORRS     R0,R0,R1
   \   00000094   0x....             LDR.N    R1,??DataTable1_2
   \   00000096   0xF881 0x03A8      STRB     R0,[R1, #+936]
    166                      sCtrl.Otr.ConnectTimeOut++;
   \   0000009A   0x....             LDR.N    R0,??DataTable1_2
   \   0000009C   0xF890 0x0662      LDRB     R0,[R0, #+1634]
   \   000000A0   0xF010 0x0180      ANDS     R1,R0,#0x80
   \   000000A4   0x1C40             ADDS     R0,R0,#+1
   \   000000A6   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000AA   0x4308             ORRS     R0,R0,R1
   \   000000AC   0x....             LDR.N    R1,??DataTable1_2
   \   000000AE   0xF881 0x0662      STRB     R0,[R1, #+1634]
    167                      
    168                      if( sCtrl.Dtu.ConnectTimeOut > 1)
   \   000000B2   0x....             LDR.N    R0,??DataTable1_2
   \   000000B4   0xF890 0x0505      LDRB     R0,[R0, #+1285]
   \   000000B8   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xDB07             BLT.N    ??TaskTmrEvtProcess_5
    169                          sCtrl.Dtu.ConnectFlag = 0;
   \   000000C0   0x....             LDR.N    R0,??DataTable1_2
   \   000000C2   0xF890 0x0505      LDRB     R0,[R0, #+1285]
   \   000000C6   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000CA   0x....             LDR.N    R1,??DataTable1_2
   \   000000CC   0xF881 0x0505      STRB     R0,[R1, #+1285]
    170                      
    171                      if( sCtrl.Mtr.ConnectTimeOut > 1)
   \                     ??TaskTmrEvtProcess_5: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable1_2
   \   000000D2   0xF890 0x03A8      LDRB     R0,[R0, #+936]
   \   000000D6   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000DA   0x2802             CMP      R0,#+2
   \   000000DC   0xDB07             BLT.N    ??TaskTmrEvtProcess_6
    172                          sCtrl.Mtr.ConnectFlag = 0;
   \   000000DE   0x....             LDR.N    R0,??DataTable1_2
   \   000000E0   0xF890 0x03A8      LDRB     R0,[R0, #+936]
   \   000000E4   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000E8   0x....             LDR.N    R1,??DataTable1_2
   \   000000EA   0xF881 0x03A8      STRB     R0,[R1, #+936]
    173                      
    174                      if( sCtrl.Otr.ConnectTimeOut > 1)
   \                     ??TaskTmrEvtProcess_6: (+1)
   \   000000EE   0x....             LDR.N    R0,??DataTable1_2
   \   000000F0   0xF890 0x0662      LDRB     R0,[R0, #+1634]
   \   000000F4   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   000000F8   0x2802             CMP      R0,#+2
   \   000000FA   0xDB07             BLT.N    ??TaskTmrEvtProcess_7
    175                          sCtrl.Otr.ConnectFlag = 0;
   \   000000FC   0x....             LDR.N    R0,??DataTable1_2
   \   000000FE   0xF890 0x0662      LDRB     R0,[R0, #+1634]
   \   00000102   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000106   0x....             LDR.N    R1,??DataTable1_2
   \   00000108   0xF881 0x0662      STRB     R0,[R1, #+1634]
    176                      
    177                  return ( task_event ^ OS_EVT_TMR_SEC );
   \                     ??TaskTmrEvtProcess_7: (+1)
   \   0000010C   0xF095 0x0004      EORS     R0,R5,#0x4
   \   00000110   0xE000             B.N      ??TaskTmrEvtProcess_1
    178              }
    179              return 0;
   \                     ??TaskTmrEvtProcess_4: (+1)
   \   00000112   0x2000             MOVS     R0,#+0
   \                     ??TaskTmrEvtProcess_1: (+1)
   \   00000114   0xBD3E             POP      {R1-R5,PC}       ;; return
    180          }
    181          
    182          /*******************************************************************************
    183           * 名    称： APP_TmrInit
    184           * 功    能： 任务初始化
    185           * 入口参数： 无
    186           * 出口参数： 无
    187           * 作　　者： wumingshen.
    188           * 创建日期： 2015-03-28
    189           * 修    改：
    190           * 修改日期：
    191           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    192          void TaskInitTmr(void)
    193          {
   \                     TaskInitTmr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    194              /***********************************************
    195              * 描述： 初始化
    196              */    
    197                 
    198              /***********************************************
    199              * 描述： 在看门狗标志组注册本任务的看门狗标志
    200              */
    201              WdtFlags |= WDT_FLAG_TMR;
   \   00000002   0x....             LDR.N    R0,??DataTable1_3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000000A   0x....             LDR.N    R1,??DataTable1_3
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    202              /*************************************************
    203              * 描述：启动事件查询
    204              */
    205              osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_SEC, OS_TICKS_PER_SEC);
   \   0000000E   0xF44F 0x727A      MOV      R2,#+1000
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       osal_start_timerRl
    206          //    osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_MIN ,  OS_TICKS_PER_SEC * 10);
    207          //    osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_DEAL , OS_TICKS_PER_SEC * 60);
    208             
    209              osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_MTR, OS_TICKS_PER_SEC*1 );  //统计模块和测量装置通讯定时器  500ms
   \   0000001A   0xF44F 0x727A      MOV      R2,#+1000
   \   0000001E   0x2120             MOVS     R1,#+32
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       osal_start_timerRl
    210              osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_DTU, OS_TICKS_PER_SEC*2 );  //统计装置和无线发送模块定时器  500ms
   \   00000026   0xF44F 0x62FA      MOV      R2,#+2000
   \   0000002A   0x2140             MOVS     R1,#+64
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       osal_start_timerRl
    211              osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_OTR, OS_TICKS_PER_SEC*10 );  //统计模块和IC卡模块通讯定时器  500ms  
   \   00000032   0xF242 0x7210      MOVW     R2,#+10000
   \   00000036   0x2180             MOVS     R1,#+128
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       osal_start_timerRl
    212          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     WdtFlagGRP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     sCtrl+0x68F

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     sCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     WdtFlags
    213          
    214          /*******************************************************************************
    215           * 				                    end of file                                *
    216           *******************************************************************************/
    217          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TaskInitTmr
         8   -> osal_start_timerRl
      24   TaskTmrEvtProcess
        24   -> OS_FlagPost


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      64  TaskInitTmr
     278  TaskTmrEvtProcess

 
 358 bytes in section .text
 
 358 bytes of CODE memory

Errors: none
Warnings: 1
