###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  21:03:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\User\BSP\system_LPC17xx.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\User\BSP\system_LPC17xx.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\system_LPC17xx.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\system_LPC17xx.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\User\BSP\system_LPC17xx.c
      1          /**************************************************************************//**
      2           * @file     system_LPC17xx.c
      3           * @brief    CMSIS Cortex-M3 Device Peripheral Access Layer Source File
      4           *           for the NXP LPC17xx Device Series
      5           * @version  V1.03
      6           * @date     07. October 2009
      7           *
      8           * @note
      9           * Copyright (C) 2009 ARM Limited. All rights reserved.
     10           *
     11           * @par
     12           * ARM Limited (ARM) is supplying this software for use with Cortex-M
     13           * processor based microcontrollers.  This file can be freely distributed
     14           * within development tools that are supporting such ARM based processors.
     15           *
     16           * @par
     17           * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
     18           * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
     20           * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
     21           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     22           *
     23           ******************************************************************************/
     24          
     25          
     26          #include <stdint.h>
     27          #include "LPC17xx.h"
     28          
     29          
     30          /** @addtogroup LPC17xx_System
     31           * @{
     32           */
     33          
     34          /*
     35          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
     36          */
     37          
     38          /*--------------------- Clock Configuration ----------------------------------
     39          //
     40          // <e> Clock Configuration
     41          //   <h> System Controls and Status Register (SCS)
     42          //     <o1.4>    OSCRANGE: Main Oscillator Range Select
     43          //                     <0=>  1 MHz to 20 MHz
     44          //                     <1=> 15 MHz to 24 MHz
     45          //     <e1.5>       OSCEN: Main Oscillator Enable
     46          //     </e>
     47          //   </h>
     48          //
     49          //   <h> Clock Source Select Register (CLKSRCSEL)
     50          //     <o2.0..1>   CLKSRC: PLL Clock Source Selection
     51          //                     <0=> Internal RC oscillator
     52          //                     <1=> Main oscillator
     53          //                     <2=> RTC oscillator
     54          //   </h>
     55          //
     56          //   <e3> PLL0 Configuration (Main PLL)
     57          //     <h> PLL0 Configuration Register (PLL0CFG)
     58          //                     <i> F_cco0 = (2 * M * F_in) / N
     59          //                     <i> F_in must be in the range of 32 kHz to 50 MHz
     60          //                     <i> F_cco0 must be in the range of 275 MHz to 550 MHz
     61          //       <o4.0..14>  MSEL: PLL Multiplier Selection
     62          //                     <6-32768><#-1>
     63          //                     <i> M Value
     64          //       <o4.16..23> NSEL: PLL Divider Selection
     65          //                     <1-256><#-1>
     66          //                     <i> N Value
     67          //     </h>
     68          //   </e>
     69          //
     70          //   <e5> PLL1 Configuration (USB PLL)
     71          //     <h> PLL1 Configuration Register (PLL1CFG)
     72          //                     <i> F_usb = M * F_osc or F_usb = F_cco1 / (2 * P)
     73          //                     <i> F_cco1 = F_osc * M * 2 * P
     74          //                     <i> F_cco1 must be in the range of 156 MHz to 320 MHz
     75          //       <o6.0..4>   MSEL: PLL Multiplier Selection
     76          //                     <1-32><#-1>
     77          //                     <i> M Value (for USB maximum value is 4)
     78          //       <o6.5..6>   PSEL: PLL Divider Selection
     79          //                     <0=> 1
     80          //                     <1=> 2
     81          //                     <2=> 4
     82          //                     <3=> 8
     83          //                     <i> P Value
     84          //     </h>
     85          //   </e>
     86          //
     87          //   <h> CPU Clock Configuration Register (CCLKCFG)
     88          //     <o7.0..7>  CCLKSEL: Divide Value for CPU Clock from PLL0
     89          //                     <3-256><#-1>
     90          //   </h>
     91          //
     92          //   <h> USB Clock Configuration Register (USBCLKCFG)
     93          //     <o8.0..3>   USBSEL: Divide Value for USB Clock from PLL0
     94          //                     <0-15>
     95          //                     <i> Divide is USBSEL + 1
     96          //   </h>
     97          //
     98          //   <h> Peripheral Clock Selection Register 0 (PCLKSEL0)
     99          //     <o9.0..1>    PCLK_WDT: Peripheral Clock Selection for WDT
    100          //                     <0=> Pclk = Cclk / 4
    101          //                     <1=> Pclk = Cclk
    102          //                     <2=> Pclk = Cclk / 2
    103          //                     <3=> Pclk = Hclk / 8
    104          //     <o9.2..3>    PCLK_TIMER0: Peripheral Clock Selection for TIMER0
    105          //                     <0=> Pclk = Cclk / 4
    106          //                     <1=> Pclk = Cclk
    107          //                     <2=> Pclk = Cclk / 2
    108          //                     <3=> Pclk = Hclk / 8
    109          //     <o9.4..5>    PCLK_TIMER1: Peripheral Clock Selection for TIMER1
    110          //                     <0=> Pclk = Cclk / 4
    111          //                     <1=> Pclk = Cclk
    112          //                     <2=> Pclk = Cclk / 2
    113          //                     <3=> Pclk = Hclk / 8
    114          //     <o9.6..7>    PCLK_UART0: Peripheral Clock Selection for UART0
    115          //                     <0=> Pclk = Cclk / 4
    116          //                     <1=> Pclk = Cclk
    117          //                     <2=> Pclk = Cclk / 2
    118          //                     <3=> Pclk = Hclk / 8
    119          //     <o9.8..9>    PCLK_UART1: Peripheral Clock Selection for UART1
    120          //                     <0=> Pclk = Cclk / 4
    121          //                     <1=> Pclk = Cclk
    122          //                     <2=> Pclk = Cclk / 2
    123          //                     <3=> Pclk = Hclk / 8
    124          //     <o9.12..13>  PCLK_PWM1: Peripheral Clock Selection for PWM1
    125          //                     <0=> Pclk = Cclk / 4
    126          //                     <1=> Pclk = Cclk
    127          //                     <2=> Pclk = Cclk / 2
    128          //                     <3=> Pclk = Hclk / 8
    129          //     <o9.14..15>  PCLK_I2C0: Peripheral Clock Selection for I2C0
    130          //                     <0=> Pclk = Cclk / 4
    131          //                     <1=> Pclk = Cclk
    132          //                     <2=> Pclk = Cclk / 2
    133          //                     <3=> Pclk = Hclk / 8
    134          //     <o9.16..17>  PCLK_SPI: Peripheral Clock Selection for SPI
    135          //                     <0=> Pclk = Cclk / 4
    136          //                     <1=> Pclk = Cclk
    137          //                     <2=> Pclk = Cclk / 2
    138          //                     <3=> Pclk = Hclk / 8
    139          //     <o9.20..21>  PCLK_SSP1: Peripheral Clock Selection for SSP1
    140          //                     <0=> Pclk = Cclk / 4
    141          //                     <1=> Pclk = Cclk
    142          //                     <2=> Pclk = Cclk / 2
    143          //                     <3=> Pclk = Hclk / 8
    144          //     <o9.22..23>  PCLK_DAC: Peripheral Clock Selection for DAC
    145          //                     <0=> Pclk = Cclk / 4
    146          //                     <1=> Pclk = Cclk
    147          //                     <2=> Pclk = Cclk / 2
    148          //                     <3=> Pclk = Hclk / 8
    149          //     <o9.24..25>  PCLK_ADC: Peripheral Clock Selection for ADC
    150          //                     <0=> Pclk = Cclk / 4
    151          //                     <1=> Pclk = Cclk
    152          //                     <2=> Pclk = Cclk / 2
    153          //                     <3=> Pclk = Hclk / 8
    154          //     <o9.26..27>  PCLK_CAN1: Peripheral Clock Selection for CAN1
    155          //                     <0=> Pclk = Cclk / 4
    156          //                     <1=> Pclk = Cclk
    157          //                     <2=> Pclk = Cclk / 2
    158          //                     <3=> Pclk = Hclk / 6
    159          //     <o9.28..29>  PCLK_CAN2: Peripheral Clock Selection for CAN2
    160          //                     <0=> Pclk = Cclk / 4
    161          //                     <1=> Pclk = Cclk
    162          //                     <2=> Pclk = Cclk / 2
    163          //                     <3=> Pclk = Hclk / 6
    164          //     <o9.30..31>  PCLK_ACF: Peripheral Clock Selection for ACF
    165          //                     <0=> Pclk = Cclk / 4
    166          //                     <1=> Pclk = Cclk
    167          //                     <2=> Pclk = Cclk / 2
    168          //                     <3=> Pclk = Hclk / 6
    169          //   </h>
    170          //
    171          //   <h> Peripheral Clock Selection Register 1 (PCLKSEL1)
    172          //     <o10.0..1>   PCLK_QEI: Peripheral Clock Selection for the Quadrature Encoder Interface
    173          //                     <0=> Pclk = Cclk / 4
    174          //                     <1=> Pclk = Cclk
    175          //                     <2=> Pclk = Cclk / 2
    176          //                     <3=> Pclk = Hclk / 8
    177          //     <o10.2..3>   PCLK_GPIO: Peripheral Clock Selection for GPIOs
    178          //                     <0=> Pclk = Cclk / 4
    179          //                     <1=> Pclk = Cclk
    180          //                     <2=> Pclk = Cclk / 2
    181          //                     <3=> Pclk = Hclk / 8
    182          //     <o10.4..5>   PCLK_PCB: Peripheral Clock Selection for the Pin Connect Block
    183          //                     <0=> Pclk = Cclk / 4
    184          //                     <1=> Pclk = Cclk
    185          //                     <2=> Pclk = Cclk / 2
    186          //                     <3=> Pclk = Hclk / 8
    187          //     <o10.6..7>   PCLK_I2C1: Peripheral Clock Selection for I2C1
    188          //                     <0=> Pclk = Cclk / 4
    189          //                     <1=> Pclk = Cclk
    190          //                     <2=> Pclk = Cclk / 2
    191          //                     <3=> Pclk = Hclk / 8
    192          //     <o10.10..11> PCLK_SSP0: Peripheral Clock Selection for SSP0
    193          //                     <0=> Pclk = Cclk / 4
    194          //                     <1=> Pclk = Cclk
    195          //                     <2=> Pclk = Cclk / 2
    196          //                     <3=> Pclk = Hclk / 8
    197          //     <o10.12..13> PCLK_TIMER2: Peripheral Clock Selection for TIMER2
    198          //                     <0=> Pclk = Cclk / 4
    199          //                     <1=> Pclk = Cclk
    200          //                     <2=> Pclk = Cclk / 2
    201          //                     <3=> Pclk = Hclk / 8
    202          //     <o10.14..15> PCLK_TIMER3: Peripheral Clock Selection for TIMER3
    203          //                     <0=> Pclk = Cclk / 4
    204          //                     <1=> Pclk = Cclk
    205          //                     <2=> Pclk = Cclk / 2
    206          //                     <3=> Pclk = Hclk / 8
    207          //     <o10.16..17> PCLK_UART2: Peripheral Clock Selection for UART2
    208          //                     <0=> Pclk = Cclk / 4
    209          //                     <1=> Pclk = Cclk
    210          //                     <2=> Pclk = Cclk / 2
    211          //                     <3=> Pclk = Hclk / 8
    212          //     <o10.18..19> PCLK_UART3: Peripheral Clock Selection for UART3
    213          //                     <0=> Pclk = Cclk / 4
    214          //                     <1=> Pclk = Cclk
    215          //                     <2=> Pclk = Cclk / 2
    216          //                     <3=> Pclk = Hclk / 8
    217          //     <o10.20..21> PCLK_I2C2: Peripheral Clock Selection for I2C2
    218          //                     <0=> Pclk = Cclk / 4
    219          //                     <1=> Pclk = Cclk
    220          //                     <2=> Pclk = Cclk / 2
    221          //                     <3=> Pclk = Hclk / 8
    222          //     <o10.22..23> PCLK_I2S: Peripheral Clock Selection for I2S
    223          //                     <0=> Pclk = Cclk / 4
    224          //                     <1=> Pclk = Cclk
    225          //                     <2=> Pclk = Cclk / 2
    226          //                     <3=> Pclk = Hclk / 8
    227          //     <o10.26..27> PCLK_RIT: Peripheral Clock Selection for the Repetitive Interrupt Timer
    228          //                     <0=> Pclk = Cclk / 4
    229          //                     <1=> Pclk = Cclk
    230          //                     <2=> Pclk = Cclk / 2
    231          //                     <3=> Pclk = Hclk / 8
    232          //     <o10.28..29> PCLK_SYSCON: Peripheral Clock Selection for the System Control Block
    233          //                     <0=> Pclk = Cclk / 4
    234          //                     <1=> Pclk = Cclk
    235          //                     <2=> Pclk = Cclk / 2
    236          //                     <3=> Pclk = Hclk / 8
    237          //     <o10.30..31> PCLK_MC: Peripheral Clock Selection for the Motor Control PWM
    238          //                     <0=> Pclk = Cclk / 4
    239          //                     <1=> Pclk = Cclk
    240          //                     <2=> Pclk = Cclk / 2
    241          //                     <3=> Pclk = Hclk / 8
    242          //   </h>
    243          //
    244          //   <h> Power Control for Peripherals Register (PCONP)
    245          //     <o11.1>      PCTIM0: Timer/Counter 0 power/clock enable
    246          //     <o11.2>      PCTIM1: Timer/Counter 1 power/clock enable
    247          //     <o11.3>      PCUART0: UART 0 power/clock enable
    248          //     <o11.4>      PCUART1: UART 1 power/clock enable
    249          //     <o11.6>      PCPWM1: PWM 1 power/clock enable
    250          //     <o11.7>      PCI2C0: I2C interface 0 power/clock enable
    251          //     <o11.8>      PCSPI: SPI interface power/clock enable
    252          //     <o11.9>      PCRTC: RTC power/clock enable
    253          //     <o11.10>     PCSSP1: SSP interface 1 power/clock enable
    254          //     <o11.12>     PCAD: A/D converter power/clock enable
    255          //     <o11.13>     PCCAN1: CAN controller 1 power/clock enable
    256          //     <o11.14>     PCCAN2: CAN controller 2 power/clock enable
    257          //     <o11.15>     PCGPIO: GPIOs power/clock enable
    258          //     <o11.16>     PCRIT: Repetitive interrupt timer power/clock enable
    259          //     <o11.17>     PCMC: Motor control PWM power/clock enable
    260          //     <o11.18>     PCQEI: Quadrature encoder interface power/clock enable
    261          //     <o11.19>     PCI2C1: I2C interface 1 power/clock enable
    262          //     <o11.21>     PCSSP0: SSP interface 0 power/clock enable
    263          //     <o11.22>     PCTIM2: Timer 2 power/clock enable
    264          //     <o11.23>     PCTIM3: Timer 3 power/clock enable
    265          //     <o11.24>     PCUART2: UART 2 power/clock enable
    266          //     <o11.25>     PCUART3: UART 3 power/clock enable
    267          //     <o11.26>     PCI2C2: I2C interface 2 power/clock enable
    268          //     <o11.27>     PCI2S: I2S interface power/clock enable
    269          //     <o11.29>     PCGPDMA: GP DMA function power/clock enable
    270          //     <o11.30>     PCENET: Ethernet block power/clock enable
    271          //     <o11.31>     PCUSB: USB interface power/clock enable
    272          //   </h>
    273          //
    274          //   <h> Clock Output Configuration Register (CLKOUTCFG)
    275          //     <o12.0..3>   CLKOUTSEL: Selects clock source for CLKOUT
    276          //                     <0=> CPU clock
    277          //                     <1=> Main oscillator
    278          //                     <2=> Internal RC oscillator
    279          //                     <3=> USB clock
    280          //                     <4=> RTC oscillator
    281          //     <o12.4..7>   CLKOUTDIV: Selects clock divider for CLKOUT
    282          //                     <1-16><#-1>
    283          //     <o12.8>      CLKOUT_EN: CLKOUT enable control
    284          //   </h>
    285          //
    286          // </e>
    287          */
    288          
    289          
    290          
    291          /** @addtogroup LPC17xx_System_Defines  LPC17xx System Defines
    292            @{
    293           */
    294          
    295          #define CLOCK_SETUP           1
    296          #define SCS_Val               0x00000020
    297          #define CLKSRCSEL_Val         0x00000001
    298          #define PLL0_SETUP            1
    299          #define PLL0CFG_Val           0x00050063
    300          #define PLL1_SETUP            1
    301          #define PLL1CFG_Val           0x00000023
    302          #define CCLKCFG_Val           0x00000003
    303          #define USBCLKCFG_Val         0x00000000
    304          #define PCLKSEL0_Val          0x00000000
    305          #define PCLKSEL1_Val          0x00000000
    306          #define PCONP_Val             0x042887DE
    307          #define CLKOUTCFG_Val         0x00000000
    308          
    309          
    310          /*--------------------- Flash Accelerator Configuration ----------------------
    311          //
    312          // <e> Flash Accelerator Configuration
    313          //   <o1.0..11>  Reserved
    314          //   <o1.12..15> FLASHTIM: Flash Access Time
    315          //               <0=> 1 CPU clock (for CPU clock up to 20 MHz)
    316          //               <1=> 2 CPU clocks (for CPU clock up to 40 MHz)
    317          //               <2=> 3 CPU clocks (for CPU clock up to 60 MHz)
    318          //               <3=> 4 CPU clocks (for CPU clock up to 80 MHz)
    319          //               <4=> 5 CPU clocks (for CPU clock up to 100 MHz)
    320          //               <5=> 6 CPU clocks (for any CPU clock)
    321          // </e>
    322          */
    323          #define FLASH_SETUP           1
    324          #define FLASHCFG_Val          0x0000303A
    325          
    326          /*
    327          //-------- <<< end of configuration section >>> ------------------------------
    328          */
    329          
    330          /*----------------------------------------------------------------------------
    331            Check the register settings
    332           *----------------------------------------------------------------------------*/
    333          #define CHECK_RANGE(val, min, max)                ((val < min) || (val > max))
    334          #define CHECK_RSVD(val, mask)                     (val & mask)
    335          
    336          /* Clock Configuration -------------------------------------------------------*/
    337          #if (CHECK_RSVD((SCS_Val),       ~0x00000030))
    338             #error "SCS: Invalid values of reserved bits!"
    339          #endif
    340          
    341          #if (CHECK_RANGE((CLKSRCSEL_Val), 0, 2))
    342             #error "CLKSRCSEL: Value out of range!"
    343          #endif
    344          
    345          #if (CHECK_RSVD((PLL0CFG_Val),   ~0x00FF7FFF))
    346             #error "PLL0CFG: Invalid values of reserved bits!"
    347          #endif
    348          
    349          #if (CHECK_RSVD((PLL1CFG_Val),   ~0x0000007F))
    350             #error "PLL1CFG: Invalid values of reserved bits!"
    351          #endif
    352          
    353          #if (CHECK_RANGE(CCLKCFG_Val, 2, 255))
    354             #error "CCLKCFG: CCLKSEL field does not contain value in range from 2 to 255!"
    355          #endif
    356          
    357          #if (CHECK_RSVD((USBCLKCFG_Val), ~0x0000000F))
    358             #error "USBCLKCFG: Invalid values of reserved bits!"
    359          #endif
    360          
    361          #if (CHECK_RSVD((PCLKSEL0_Val),   0x000C0C00))
    362             #error "PCLKSEL0: Invalid values of reserved bits!"
    363          #endif
    364          
    365          #if (CHECK_RSVD((PCLKSEL1_Val),   0x03000300))
    366             #error "PCLKSEL1: Invalid values of reserved bits!"
    367          #endif
    368          
    369          #if (CHECK_RSVD((PCONP_Val),      0x10100821))
    370             #error "PCONP: Invalid values of reserved bits!"
    371          #endif
    372          
    373          #if (CHECK_RSVD((CLKOUTCFG_Val), ~0x000001FF))
    374             #error "CLKOUTCFG: Invalid values of reserved bits!"
    375          #endif
    376          
    377          /* Flash Accelerator Configuration -------------------------------------------*/
    378          #if (CHECK_RSVD((FLASHCFG_Val), ~0x0000F07F))
    379             #error "FLASHCFG: Invalid values of reserved bits!"
    380          #endif
    381          
    382          
    383          /*----------------------------------------------------------------------------
    384            DEFINES
    385           *----------------------------------------------------------------------------*/
    386          
    387          /*----------------------------------------------------------------------------
    388            Define clocks
    389           *----------------------------------------------------------------------------*/
    390          #define XTAL        (12000000UL)        /* Oscillator frequency               */
    391          #define OSC_CLK     (      XTAL)        /* Main oscillator frequency          */
    392          #define RTC_CLK     (   32768UL)        /* RTC oscillator frequency           */
    393          #define IRC_OSC     ( 4000000UL)        /* Internal RC oscillator frequency   */
    394          
    395          
    396          /* F_cco0 = (2 * M * F_in) / N  */
    397          #define __M               (((PLL0CFG_Val      ) & 0x7FFF) + 1)
    398          #define __N               (((PLL0CFG_Val >> 16) & 0x00FF) + 1)
    399          #define __FCCO(__F_IN)    ((2 * __M * __F_IN) / __N)
    400          #define __CCLK_DIV        (((CCLKCFG_Val      ) & 0x00FF) + 1)
    401          
    402          /* Determine core clock frequency according to settings */
    403           #if (PLL0_SETUP)
    404              #if   ((CLKSRCSEL_Val & 0x03) == 1)
    405                  #define __CORE_CLK (__FCCO(OSC_CLK) / __CCLK_DIV)
    406              #elif ((CLKSRCSEL_Val & 0x03) == 2)
    407                  #define __CORE_CLK (__FCCO(RTC_CLK) / __CCLK_DIV)
    408              #else
    409                  #define __CORE_CLK (__FCCO(IRC_OSC) / __CCLK_DIV)
    410              #endif
    411           #else
    412              #if   ((CLKSRCSEL_Val & 0x03) == 1)
    413                  #define __CORE_CLK (OSC_CLK         / __CCLK_DIV)
    414              #elif ((CLKSRCSEL_Val & 0x03) == 2)
    415                  #define __CORE_CLK (RTC_CLK         / __CCLK_DIV)
    416              #else
    417                  #define __CORE_CLK (IRC_OSC         / __CCLK_DIV)
    418              #endif
    419           #endif
    420          
    421           /**
    422            * @}
    423            */
    424          
    425          
    426          /** @addtogroup LPC17xx_System_Public_Variables  LPC17xx System Public Variables
    427            @{
    428           */
    429          /*----------------------------------------------------------------------------
    430            Clock Variable definitions
    431           *----------------------------------------------------------------------------*/

   \                                 In section .data, align 4
    432          uint32_t SystemCoreClock = __CORE_CLK;/*!< System Clock Frequency (Core Clock)*/
   \                     SystemCoreClock:
   \   00000000   0x05F5E100         DC32 100000000
    433          
    434          /**
    435           * @}
    436           */
    437          
    438          
    439          /** @addtogroup LPC17xx_System_Public_Functions  LPC17xx System Public Functions
    440            @{
    441           */
    442          
    443          /*----------------------------------------------------------------------------
    444            Clock functions
    445           *----------------------------------------------------------------------------*/
    446          
    447          

   \                                 In section .text, align 2, keep-with-next
    448          void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
    449          {
    450            /* Determine clock frequency according to clock register values             */
    451            if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1  ;; 0x400fc088
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x6001      UBFX     R0,R0,#+24,#+2
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD150             BNE.N    ??SystemCoreClockUpdate_0
    452              switch (LPC_SC->CLKSRCSEL & 0x03) {
   \   0000000C   0x....             LDR.N    R0,??DataTable1_1  ;; 0x400fc10c
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD004             BEQ.N    ??SystemCoreClockUpdate_1
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD030             BEQ.N    ??SystemCoreClockUpdate_2
   \   0000001C   0xD318             BCC.N    ??SystemCoreClockUpdate_3
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD16E             BNE.N    ??SystemCoreClockUpdate_4
    453                case 0:                                /* Int. RC oscillator => PLL0    */
    454                case 3:                                /* Reserved, default to Int. RC  */
    455                  SystemCoreClock = (IRC_OSC *
    456                                    ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    457                                    (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    458                                    ((LPC_SC->CCLKCFG & 0xFF)+ 1));
   \                     ??SystemCoreClockUpdate_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable1  ;; 0x400fc088
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable1  ;; 0x400fc088
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   0000002C   0x0C40             LSRS     R0,R0,#+17
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x....             LDR.N    R2,??DataTable1_2  ;; 0x7a1200
   \   00000032   0x4350             MULS     R0,R2,R0
   \   00000034   0xF3C1 0x4107      UBFX     R1,R1,#+16,#+8
   \   00000038   0x1C49             ADDS     R1,R1,#+1
   \   0000003A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003E   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x1C49             ADDS     R1,R1,#+1
   \   00000046   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000004A   0x....             LDR.N    R1,??DataTable1_4
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    459                  break;
   \   0000004E   0xE057             B.N      ??SystemCoreClockUpdate_4
    460                case 1:                                /* Main oscillator => PLL0       */
    461                  SystemCoreClock = (OSC_CLK *
    462                                    ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    463                                    (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    464                                    ((LPC_SC->CCLKCFG & 0xFF)+ 1));
   \                     ??SystemCoreClockUpdate_3: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable1  ;; 0x400fc088
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x....             LDR.N    R1,??DataTable1  ;; 0x400fc088
   \   00000056   0x6809             LDR      R1,[R1, #+0]
   \   00000058   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   0000005A   0x0C40             LSRS     R0,R0,#+17
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x....             LDR.N    R2,??DataTable1_5  ;; 0x16e3600
   \   00000060   0x4350             MULS     R0,R2,R0
   \   00000062   0xF3C1 0x4107      UBFX     R1,R1,#+16,#+8
   \   00000066   0x1C49             ADDS     R1,R1,#+1
   \   00000068   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000006C   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x1C49             ADDS     R1,R1,#+1
   \   00000074   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000078   0x....             LDR.N    R1,??DataTable1_4
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    465                  break;
   \   0000007C   0xE040             B.N      ??SystemCoreClockUpdate_4
    466                case 2:                                /* RTC oscillator => PLL0        */
    467                  SystemCoreClock = (RTC_CLK *
    468                                    ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    469                                    (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    470                                    ((LPC_SC->CCLKCFG & 0xFF)+ 1));
   \                     ??SystemCoreClockUpdate_2: (+1)
   \   0000007E   0x....             LDR.N    R0,??DataTable1  ;; 0x400fc088
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x....             LDR.N    R1,??DataTable1  ;; 0x400fc088
   \   00000084   0x6809             LDR      R1,[R1, #+0]
   \   00000086   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000088   0x0C40             LSRS     R0,R0,#+17
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0xF45F 0x3280      MOVS     R2,#+65536
   \   00000090   0x4350             MULS     R0,R2,R0
   \   00000092   0xF3C1 0x4107      UBFX     R1,R1,#+16,#+8
   \   00000096   0x1C49             ADDS     R1,R1,#+1
   \   00000098   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000009C   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A2   0x1C49             ADDS     R1,R1,#+1
   \   000000A4   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000A8   0x....             LDR.N    R1,??DataTable1_4
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    471                  break;
   \   000000AC   0xE028             B.N      ??SystemCoreClockUpdate_4
    472              }
    473            } else {
    474              switch (LPC_SC->CLKSRCSEL & 0x03) {
   \                     ??SystemCoreClockUpdate_0: (+1)
   \   000000AE   0x....             LDR.N    R0,??DataTable1_1  ;; 0x400fc10c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD004             BEQ.N    ??SystemCoreClockUpdate_5
   \   000000BA   0x2802             CMP      R0,#+2
   \   000000BC   0xD016             BEQ.N    ??SystemCoreClockUpdate_6
   \   000000BE   0xD30B             BCC.N    ??SystemCoreClockUpdate_7
   \   000000C0   0x2803             CMP      R0,#+3
   \   000000C2   0xD11D             BNE.N    ??SystemCoreClockUpdate_4
    475                case 0:                                /* Int. RC oscillator => PLL0    */
    476                case 3:                                /* Reserved, default to Int. RC  */
    477                  SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
   \                     ??SystemCoreClockUpdate_5: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable1_6  ;; 0x3d0900
   \   000000C6   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   000000C8   0x6809             LDR      R1,[R1, #+0]
   \   000000CA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CC   0x1C49             ADDS     R1,R1,#+1
   \   000000CE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000D2   0x....             LDR.N    R1,??DataTable1_4
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    478                  break;
   \   000000D6   0xE013             B.N      ??SystemCoreClockUpdate_4
    479                case 1:                                /* Main oscillator => PLL0       */
    480                  SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
   \                     ??SystemCoreClockUpdate_7: (+1)
   \   000000D8   0x....             LDR.N    R0,??DataTable1_7  ;; 0xb71b00
   \   000000DA   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E0   0x1C49             ADDS     R1,R1,#+1
   \   000000E2   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000E6   0x....             LDR.N    R1,??DataTable1_4
   \   000000E8   0x6008             STR      R0,[R1, #+0]
    481                  break;
   \   000000EA   0xE009             B.N      ??SystemCoreClockUpdate_4
    482                case 2:                                /* RTC oscillator => PLL0        */
    483                  SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
   \                     ??SystemCoreClockUpdate_6: (+1)
   \   000000EC   0xF44F 0x4000      MOV      R0,#+32768
   \   000000F0   0x....             LDR.N    R1,??DataTable1_3  ;; 0x400fc104
   \   000000F2   0x6809             LDR      R1,[R1, #+0]
   \   000000F4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F6   0x1C49             ADDS     R1,R1,#+1
   \   000000F8   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000FC   0x....             LDR.N    R1,??DataTable1_4
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    484                  break;
    485              }
    486            }
    487          
    488          }
   \                     ??SystemCoreClockUpdate_4: (+1)
   \   00000100   0x4770             BX       LR               ;; return
    489          
    490          
    491          
    492          
    493          
    494          //
    495          /**
    496           * Initialize the system
    497           *
    498           * @param  none
    499           * @return none
    500           *
    501           * @brief  Setup the microcontroller system.
    502           *         Initialize the System.
    503           */

   \                                 In section .text, align 2, keep-with-next
    504          void SystemInit (void)
    505          {
    506            const uint32_t PLL0_CONNECT_FLG = (1<<25) | (1<<24);
   \                     SystemInit: (+1)
   \   00000000   0xF05F 0x7040      MOVS     R0,#+50331648
    507            const uint32_t PLL1_CONNECT_FLG = (1<<8) | (1<<9);
   \   00000004   0xF44F 0x7140      MOV      R1,#+768
    508            
    509          #if (CLOCK_SETUP)                       /* Clock Setup                        */
    510            LPC_SC->SCS       = SCS_Val;
   \   00000008   0x2220             MOVS     R2,#+32
   \   0000000A   0x....             LDR.N    R3,??DataTable1_8  ;; 0x400fc1a0
   \   0000000C   0x601A             STR      R2,[R3, #+0]
    511            if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
   \   0000000E   0x....             LDR.N    R2,??DataTable1_8  ;; 0x400fc1a0
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x0692             LSLS     R2,R2,#+26
   \   00000014   0xD503             BPL.N    ??SystemInit_0
    512              while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
   \                     ??SystemInit_1: (+1)
   \   00000016   0x....             LDR.N    R2,??DataTable1_8  ;; 0x400fc1a0
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x0652             LSLS     R2,R2,#+25
   \   0000001C   0xD5FB             BPL.N    ??SystemInit_1
    513            }
    514          
    515            LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
   \                     ??SystemInit_0: (+1)
   \   0000001E   0x2203             MOVS     R2,#+3
   \   00000020   0x....             LDR.N    R3,??DataTable1_3  ;; 0x400fc104
   \   00000022   0x601A             STR      R2,[R3, #+0]
    516            /* Periphral clock must be selected before PLL0 enabling and connecting
    517             * - according errata.lpc1768-16.March.2010 -
    518             */
    519            LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x....             LDR.N    R3,??DataTable1_9  ;; 0x400fc1a8
   \   00000028   0x601A             STR      R2,[R3, #+0]
    520            LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x....             LDR.N    R3,??DataTable1_10  ;; 0x400fc1ac
   \   0000002E   0x601A             STR      R2,[R3, #+0]
    521          
    522          #if (PLL0_SETUP)
    523            LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x....             LDR.N    R3,??DataTable1_1  ;; 0x400fc10c
   \   00000034   0x601A             STR      R2,[R3, #+0]
    524          
    525            LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
   \   00000036   0x....             LDR.N    R2,??DataTable1_11  ;; 0x50063
   \   00000038   0x....             LDR.N    R3,??DataTable1_12  ;; 0x400fc084
   \   0000003A   0x601A             STR      R2,[R3, #+0]
    526            LPC_SC->PLL0FEED  = 0xAA;
   \   0000003C   0x22AA             MOVS     R2,#+170
   \   0000003E   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   00000040   0x601A             STR      R2,[R3, #+0]
    527            LPC_SC->PLL0FEED  = 0x55;
   \   00000042   0x2255             MOVS     R2,#+85
   \   00000044   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   00000046   0x601A             STR      R2,[R3, #+0]
    528          
    529            LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0x....             LDR.N    R3,??DataTable1_14  ;; 0x400fc080
   \   0000004C   0x601A             STR      R2,[R3, #+0]
    530            LPC_SC->PLL0FEED  = 0xAA;
   \   0000004E   0x22AA             MOVS     R2,#+170
   \   00000050   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   00000052   0x601A             STR      R2,[R3, #+0]
    531            LPC_SC->PLL0FEED  = 0x55;
   \   00000054   0x2255             MOVS     R2,#+85
   \   00000056   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   00000058   0x601A             STR      R2,[R3, #+0]
    532            while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
   \                     ??SystemInit_2: (+1)
   \   0000005A   0x....             LDR.N    R2,??DataTable1  ;; 0x400fc088
   \   0000005C   0x6812             LDR      R2,[R2, #+0]
   \   0000005E   0x0152             LSLS     R2,R2,#+5
   \   00000060   0xD5FB             BPL.N    ??SystemInit_2
    533          
    534            LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
   \   00000062   0x2203             MOVS     R2,#+3
   \   00000064   0x....             LDR.N    R3,??DataTable1_14  ;; 0x400fc080
   \   00000066   0x601A             STR      R2,[R3, #+0]
    535            LPC_SC->PLL0FEED  = 0xAA;
   \   00000068   0x22AA             MOVS     R2,#+170
   \   0000006A   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   0000006C   0x601A             STR      R2,[R3, #+0]
    536            LPC_SC->PLL0FEED  = 0x55;
   \   0000006E   0x2255             MOVS     R2,#+85
   \   00000070   0x....             LDR.N    R3,??DataTable1_13  ;; 0x400fc08c
   \   00000072   0x601A             STR      R2,[R3, #+0]
    537            while ((LPC_SC->PLL0STAT & PLL0_CONNECT_FLG) != PLL0_CONNECT_FLG);/* Wait for PLLC0_STAT & PLLE0_STAT */
   \                     ??SystemInit_3: (+1)
   \   00000074   0x....             LDR.N    R2,??DataTable1  ;; 0x400fc088
   \   00000076   0x6812             LDR      R2,[R2, #+0]
   \   00000078   0x4002             ANDS     R2,R0,R2
   \   0000007A   0x4282             CMP      R2,R0
   \   0000007C   0xD1FA             BNE.N    ??SystemInit_3
    538          #endif
    539          
    540          #if (PLL1_SETUP)
    541            LPC_SC->PLL1CFG   = PLL1CFG_Val;
   \   0000007E   0x2223             MOVS     R2,#+35
   \   00000080   0x....             LDR.N    R3,??DataTable1_15  ;; 0x400fc0a4
   \   00000082   0x601A             STR      R2,[R3, #+0]
    542            LPC_SC->PLL1FEED  = 0xAA;
   \   00000084   0x22AA             MOVS     R2,#+170
   \   00000086   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   00000088   0x601A             STR      R2,[R3, #+0]
    543            LPC_SC->PLL1FEED  = 0x55;
   \   0000008A   0x2255             MOVS     R2,#+85
   \   0000008C   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   0000008E   0x601A             STR      R2,[R3, #+0]
    544          
    545            LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0x....             LDR.N    R3,??DataTable1_17  ;; 0x400fc0a0
   \   00000094   0x601A             STR      R2,[R3, #+0]
    546            LPC_SC->PLL1FEED  = 0xAA;
   \   00000096   0x22AA             MOVS     R2,#+170
   \   00000098   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   0000009A   0x601A             STR      R2,[R3, #+0]
    547            LPC_SC->PLL1FEED  = 0x55;
   \   0000009C   0x2255             MOVS     R2,#+85
   \   0000009E   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   000000A0   0x601A             STR      R2,[R3, #+0]
    548            while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
   \                     ??SystemInit_4: (+1)
   \   000000A2   0x....             LDR.N    R2,??DataTable1_18  ;; 0x400fc0a8
   \   000000A4   0x6812             LDR      R2,[R2, #+0]
   \   000000A6   0x0552             LSLS     R2,R2,#+21
   \   000000A8   0xD5FB             BPL.N    ??SystemInit_4
    549          
    550            LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
   \   000000AA   0x2203             MOVS     R2,#+3
   \   000000AC   0x....             LDR.N    R3,??DataTable1_17  ;; 0x400fc0a0
   \   000000AE   0x601A             STR      R2,[R3, #+0]
    551            LPC_SC->PLL1FEED  = 0xAA;
   \   000000B0   0x22AA             MOVS     R2,#+170
   \   000000B2   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   000000B4   0x601A             STR      R2,[R3, #+0]
    552            LPC_SC->PLL1FEED  = 0x55;
   \   000000B6   0x2255             MOVS     R2,#+85
   \   000000B8   0x....             LDR.N    R3,??DataTable1_16  ;; 0x400fc0ac
   \   000000BA   0x601A             STR      R2,[R3, #+0]
    553            while ((LPC_SC->PLL1STAT & PLL1_CONNECT_FLG) != PLL1_CONNECT_FLG);/* Wait for PLLC1_STAT & PLLE1_STAT */
   \                     ??SystemInit_5: (+1)
   \   000000BC   0x....             LDR.N    R2,??DataTable1_18  ;; 0x400fc0a8
   \   000000BE   0x6812             LDR      R2,[R2, #+0]
   \   000000C0   0x400A             ANDS     R2,R1,R2
   \   000000C2   0x428A             CMP      R2,R1
   \   000000C4   0xD1FA             BNE.N    ??SystemInit_5
    554          #else
    555            LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
    556          #endif
    557            LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
   \   000000C6   0x....             LDR.N    R2,??DataTable1_19  ;; 0x42887de
   \   000000C8   0x....             LDR.N    R3,??DataTable1_20  ;; 0x400fc0c4
   \   000000CA   0x601A             STR      R2,[R3, #+0]
    558          
    559            LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
   \   000000CC   0x2200             MOVS     R2,#+0
   \   000000CE   0x....             LDR.N    R3,??DataTable1_21  ;; 0x400fc1c8
   \   000000D0   0x601A             STR      R2,[R3, #+0]
    560          #endif
    561          
    562          #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
    563            LPC_SC->FLASHCFG  = FLASHCFG_Val;
   \   000000D2   0xF243 0x023A      MOVW     R2,#+12346
   \   000000D6   0x....             LDR.N    R3,??DataTable1_22  ;; 0x400fc000
   \   000000D8   0x601A             STR      R2,[R3, #+0]
    564          #endif
    565          
    566          //  Set Vector table offset value  原版
    567          //#if (__RAM_MODE__==1)
    568          //  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
    569          //#else
    570          //  SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
    571          //#endif
    572          
    573          #if (__RAM_MODE__==1)
    574            SCB->VTOR  = 0x10000000 | 0x10000;
    575          #else
    576            SCB->VTOR  = 0x00000000 | 0x10000;
   \   000000DA   0xF45F 0x3280      MOVS     R2,#+65536
   \   000000DE   0x....             LDR.N    R3,??DataTable1_23  ;; 0xe000ed08
   \   000000E0   0x601A             STR      R2,[R3, #+0]
    577          #endif
    578          }
   \   000000E2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400FC088         DC32     0x400fc088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x400FC10C         DC32     0x400fc10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x007A1200         DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x400FC104         DC32     0x400fc104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x016E3600         DC32     0x16e3600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x00B71B00         DC32     0xb71b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x400FC1A0         DC32     0x400fc1a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x400FC1AC         DC32     0x400fc1ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x00050063         DC32     0x50063

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x400FC084         DC32     0x400fc084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x400FC08C         DC32     0x400fc08c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x400FC080         DC32     0x400fc080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x400FC0A4         DC32     0x400fc0a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x400FC0AC         DC32     0x400fc0ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x400FC0A0         DC32     0x400fc0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x400FC0A8         DC32     0x400fc0a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x042887DE         DC32     0x42887de

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x400FC1C8         DC32     0x400fc1c8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x400FC000         DC32     0x400fc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0xE000ED08         DC32     0xe000ed08
    579          
    580          /**
    581           * @}
    582           */
    583          
    584          /**
    585           * @}
    586           */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCoreClockUpdate
       0   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  SystemCoreClock
     258  SystemCoreClockUpdate
     228  SystemInit

 
   4 bytes in section .data
 582 bytes in section .text
 
 582 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 3
