###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/May/2017  11:41:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\SpeedTest\storespeed.C
#    Command line =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\SpeedTest\storespeed.C
#        -lCN
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\storespeed.lst
#    Object file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\storespeed.o
#
###############################################################################

F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\SpeedTest\storespeed.C
      1          #include <includes.h>
      2          #include <FRAM.h>
      3          
      4          //extern	stcDist g_sDist;
      5          
      6          
      7          
      8          //------------------------------------------------------------------------
      9          //  功  能 ：存油箱模型
     10          // 入口参数：无
     11          // 出口参数：当前流水号
     12          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     13          uint8	StoresDistFram(stcDist * sDist)
     14          {
   \                     StoresDistFram: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     15          	uint16	CrcCheck;
     16          	uint8	Flg;
     17          	
     18          	Flg = TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x0006             MOVS     R6,R0
     19          	
     20          	CrcCheck = GetCrc16Check((uint8 *)sDist,sizeof(stcDist) - 2);
   \   00000008   0x211E             MOVS     R1,#+30
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       GetCrc16Check
   \   00000010   0x0005             MOVS     R5,R0
     21          	
     22          	sDist->Crc16 = CrcCheck;
   \   00000012   0x83E5             STRH     R5,[R4, #+30]
     23          	
     24          
     25          	if(! WriteFM24CL64(DEN_FRAM_ADD,(uint8 *)sDist, sizeof(stcDist)))
   \   00000014   0x2220             MOVS     R2,#+32
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0xF44F 0x7016      MOV      R0,#+600
   \   0000001C   0x.... 0x....      BL       WriteFM24CL64
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??StoresDistFram_0
     26          	{Flg = FALSE;}
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0006             MOVS     R6,R0
     27          	
     28          	if(! WriteFM24CL64(DEN_FRAM_ADD_BCK,(uint8 *)sDist, sizeof(stcDist)))
   \                     ??StoresDistFram_0: (+1)
   \   00000028   0x2220             MOVS     R2,#+32
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0xF44F 0x701E      MOV      R0,#+632
   \   00000030   0x.... 0x....      BL       WriteFM24CL64
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD101             BNE.N    ??StoresDistFram_1
     29          	{Flg = FALSE;}		
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0006             MOVS     R6,R0
     30          
     31          	return	Flg;
   \                     ??StoresDistFram_1: (+1)
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
     32          }
     33          
     34          //------------------------------------------------------------------------
     35          //  功  能 ：读燃油密度错误
     36          // 入口参数：燃油密度指针
     37          // 出口参数：操作成功：返回1；否则，返回0
     38          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     39          uint8	ReadDistFram(stcDist * sDist)
     40          {
   \                     ReadDistFram: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x0004             MOVS     R4,R0
     41          	uint16		CrcCheck;
     42          	uint16		Flg;
     43          	stcDist   	sDistTmp;
     44          	uint32		i;
     45          	uint8		*p;
     46          
     47          	Flg = FALSE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
     48          
     49          	if( ReadFM24CL64(DEN_FRAM_ADD,(uint8 *)&sDistTmp, sizeof(stcDist)))
   \   0000000C   0x2220             MOVS     R2,#+32
   \   0000000E   0x4669             MOV      R1,SP
   \   00000010   0xF44F 0x7016      MOV      R0,#+600
   \   00000014   0x.... 0x....      BL       ReadFM24CL64
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD036             BEQ.N    ??ReadDistFram_0
     50          	{
     51          		CrcCheck = GetCrc16Check((uint8 *)&sDistTmp,sizeof(stcDist) - 2);
   \   0000001C   0x211E             MOVS     R1,#+30
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       GetCrc16Check
   \   00000024   0x0005             MOVS     R5,R0
     52          		
     53          		if((CrcCheck == sDistTmp.Crc16))
   \   00000026   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x4285             CMP      R5,R0
   \   0000002E   0xD128             BNE.N    ??ReadDistFram_1
     54          		{		
     55          			if(CrcCheck)						
   \   00000030   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xD00C             BEQ.N    ??ReadDistFram_2
     56          			{
     57          				//sDist = &sDistTmp;
     58          				memcpy((uint8 *)sDist,(uint8 *)&sDistTmp,sizeof(stcDist));
   \   00000036   0xF05F 0x0920      MOVS     R9,#+32
   \   0000003A   0x46EA             MOV      R10,SP
   \   0000003C   0x464A             MOV      R2,R9
   \   0000003E   0x4651             MOV      R1,R10
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy
     59          				Flg = TRUE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x0006             MOVS     R6,R0
     60          				return	Flg;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xE063             B.N      ??ReadDistFram_3
     61          			}
     62          			else 
     63          			{	
     64          				p = (uint8 *)&sDistTmp;
   \                     ??ReadDistFram_2: (+1)
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x4680             MOV      R8,R0
     65          				
     66          				for(i = 0; i < sizeof(stcDist);i++)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x0007             MOVS     R7,R0
   \                     ??ReadDistFram_4: (+1)
   \   00000058   0x2F20             CMP      R7,#+32
   \   0000005A   0xD212             BCS.N    ??ReadDistFram_1
     67          				{
     68          					if( * p )
   \   0000005C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD00C             BEQ.N    ??ReadDistFram_5
     69          					{
     70          						//sDist = &sDistTmp;
     71          						memcpy((uint8 *)sDist,(uint8 *)&sDistTmp,sizeof(stcDist));
   \   00000064   0xF05F 0x0920      MOVS     R9,#+32
   \   00000068   0x46EA             MOV      R10,SP
   \   0000006A   0x464A             MOV      R2,R9
   \   0000006C   0x4651             MOV      R1,R10
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy
     72          
     73          						Flg = TRUE;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x0006             MOVS     R6,R0
     74          						return	Flg;
   \   00000078   0x0030             MOVS     R0,R6
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0xE04C             B.N      ??ReadDistFram_3
     75          					}
     76          				}
   \                     ??ReadDistFram_5: (+1)
   \   0000007E   0x1C7F             ADDS     R7,R7,#+1
   \   00000080   0xE7EA             B.N      ??ReadDistFram_4
     77          			}
     78          		}
     79          		printfcom0("\r\n 读里程CRC错误！");
   \                     ??ReadDistFram_1: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable1
   \   00000084   0x.... 0x....      BL       printfcom0
   \   00000088   0xE002             B.N      ??ReadDistFram_6
     80          	}
     81          	else
     82          	{
     83          		printfcom0("\r\n 读里程错误！");
   \                     ??ReadDistFram_0: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable1_1
   \   0000008C   0x.... 0x....      BL       printfcom0
     84          	}
     85          	
     86          	if( ReadFM24CL64(DEN_FRAM_ADD_BCK,(uint8 *)&sDistTmp, sizeof(stcDist)))
   \                     ??ReadDistFram_6: (+1)
   \   00000090   0x2220             MOVS     R2,#+32
   \   00000092   0x4669             MOV      R1,SP
   \   00000094   0xF44F 0x701E      MOV      R0,#+632
   \   00000098   0x.... 0x....      BL       ReadFM24CL64
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD036             BEQ.N    ??ReadDistFram_7
     87          	{
     88          		CrcCheck = GetCrc16Check((uint8 *)&sDistTmp,sizeof(stcDist) - 2);
   \   000000A0   0x211E             MOVS     R1,#+30
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x.... 0x....      BL       GetCrc16Check
   \   000000A8   0x0005             MOVS     R5,R0
     89          		
     90          		if((CrcCheck == sDistTmp.Crc16))
   \   000000AA   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   000000AE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B0   0x4285             CMP      R5,R0
   \   000000B2   0xD128             BNE.N    ??ReadDistFram_8
     91          		{		
     92          			if(CrcCheck)						
   \   000000B4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B6   0x2D00             CMP      R5,#+0
   \   000000B8   0xD00C             BEQ.N    ??ReadDistFram_9
     93          			{
     94          				//sDist = &sDistTmp;
     95          				memcpy((uint8 *)sDist,(uint8 *)&sDistTmp,sizeof(stcDist));
   \   000000BA   0xF05F 0x0920      MOVS     R9,#+32
   \   000000BE   0x46EA             MOV      R10,SP
   \   000000C0   0x464A             MOV      R2,R9
   \   000000C2   0x4651             MOV      R1,R10
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0x.... 0x....      BL       __aeabi_memcpy
     96          
     97          				Flg = TRUE;
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x0006             MOVS     R6,R0
     98          				return	Flg;
   \   000000CE   0x0030             MOVS     R0,R6
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0xE021             B.N      ??ReadDistFram_3
     99          			}
    100          			else 
    101          			{
    102          				p = (uint8 *)&sDistTmp;
   \                     ??ReadDistFram_9: (+1)
   \   000000D4   0x4668             MOV      R0,SP
   \   000000D6   0x4680             MOV      R8,R0
    103          				
    104          				for(i = 0; i < sizeof(stcDist);i++)
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x0007             MOVS     R7,R0
   \                     ??ReadDistFram_10: (+1)
   \   000000DC   0x2F20             CMP      R7,#+32
   \   000000DE   0xD212             BCS.N    ??ReadDistFram_8
    105          				{
    106          					if( * p )
   \   000000E0   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD00C             BEQ.N    ??ReadDistFram_11
    107          					{
    108          						//sDist = &sDistTmp;
    109          						memcpy((uint8 *)sDist,(uint8 *)&sDistTmp,sizeof(stcDist));
   \   000000E8   0xF05F 0x0920      MOVS     R9,#+32
   \   000000EC   0x46EA             MOV      R10,SP
   \   000000EE   0x464A             MOV      R2,R9
   \   000000F0   0x4651             MOV      R1,R10
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x.... 0x....      BL       __aeabi_memcpy
    110          
    111          						Flg = TRUE;
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x0006             MOVS     R6,R0
    112          						return	Flg;
   \   000000FC   0x0030             MOVS     R0,R6
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0xE00A             B.N      ??ReadDistFram_3
    113          					}
    114          				}
   \                     ??ReadDistFram_11: (+1)
   \   00000102   0x1C7F             ADDS     R7,R7,#+1
   \   00000104   0xE7EA             B.N      ??ReadDistFram_10
    115          			}
    116          		}
    117          		
    118          		printfcom0("\r\n 读里程BCK CRC错误！");
   \                     ??ReadDistFram_8: (+1)
   \   00000106   0x....             LDR.N    R0,??DataTable1_2
   \   00000108   0x.... 0x....      BL       printfcom0
   \   0000010C   0xE002             B.N      ??ReadDistFram_12
    119          	}
    120          	else
    121          	{
    122          		printfcom0("\r\n 读里程BCK 错误！");
   \                     ??ReadDistFram_7: (+1)
   \   0000010E   0x....             LDR.N    R0,??DataTable1_3
   \   00000110   0x.... 0x....      BL       printfcom0
    123          	}
    124          		
    125          	return	Flg;
   \                     ??ReadDistFram_12: (+1)
   \   00000114   0x0030             MOVS     R0,R6
   \   00000116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??ReadDistFram_3: (+1)
   \   00000118   0xB008             ADD      SP,SP,#+32
   \   0000011A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    126          }
    127          //读里程

   \                                 In section .text, align 2, keep-with-next
    128          uint8	ReadDist(stcDist  *g_sDist)
    129          {
   \                     ReadDist: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    130          	uint8	Flg;
    131          	
    132          	Flg = ReadDistFram( g_sDist);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       ReadDistFram
   \   0000000A   0x0005             MOVS     R5,R0
    133          	if(Flg != TRUE)
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xD010             BEQ.N    ??ReadDist_0
    134          	{
    135          		g_sDist->A_sDist.ModDPR	 = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6020             STR      R0,[R4, #+0]
    136          		g_sDist->A_sDist.Dist	 = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6060             STR      R0,[R4, #+4]
    137          
    138          		g_sDist->E_sDist.ModDPR	 = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6120             STR      R0,[R4, #+16]
    139          		g_sDist->E_sDist.Dist	 = 0;		
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x6160             STR      R0,[R4, #+20]
    140          		
    141          		g_sDist->C_sDist.ModDPR	 = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x60A0             STR      R0,[R4, #+8]
    142          		g_sDist->C_sDist.Dist	 = 0;	
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x60E0             STR      R0,[R4, #+12]
    143          		printfcom0("\r\n Flg %d 读里程数！",Flg);
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x....             LDR.N    R0,??DataTable1_4
   \   00000030   0x.... 0x....      BL       printfcom0
    144          	}
    145          //	
    146          
    147          	return	Flg;
   \                     ??ReadDist_0: (+1)
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    148          }
    149          
    150          
    151          //存里程

   \                                 In section .text, align 2, keep-with-next
    152          uint8	StoresDist( stcDist * g_sDist)
    153          {
   \                     StoresDist: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    154          	uint8	Flg;
    155          	
    156          	Flg = StoresDistFram(g_sDist);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       StoresDistFram
   \   0000000A   0x0005             MOVS     R5,R0
    157          	
    158          //	printfcom0("\r\n Sores Speed an distance Data To Fram");
    159          	return	Flg;
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    160          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \266\301\300\357\263\314CRC\264\355\316\363\243\241"
   \              0x20 0xB6    
   \              0xC1 0xC0    
   \              0xEF 0xB3    
   \              0xCC 0x43    
   \              0x52 0x43    
   \              0xB4 0xED    
   \              0xCE 0xF3    
   \              0xA3 0xA1    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \266\301\300\357\263\314\264\355\316\363\243\241"
   \              0x20 0xB6    
   \              0xC1 0xC0    
   \              0xEF 0xB3    
   \              0xCC 0xB4    
   \              0xED 0xCE    
   \              0xF3 0xA3    
   \              0xA1 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \266\301\300\357\263\314BCK CRC\264\355\316\363\243\241"
   \              0x20 0xB6    
   \              0xC1 0xC0    
   \              0xEF 0xB3    
   \              0xCC 0x42    
   \              0x43 0x4B    
   \              0x20 0x43    
   \              0x52 0x43    
   \              0xB4 0xED    
   \              0xCE 0xF3    
   \              0xA3 0xA1    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \266\301\300\357\263\314BCK \264\355\316\363\243\241"
   \              0x20 0xB6    
   \              0xC1 0xC0    
   \              0xEF 0xB3    
   \              0xCC 0x42    
   \              0x43 0x4B    
   \              0x20 0xB4    
   \              0xED 0xCE    
   \              0xF3 0xA3    
   \              0xA1 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Flg %d \266\301\300\357\263\314\312\375\243\241"
   \              0x20 0x46    
   \              0x6C 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0xB6 0xC1    
   \              0xC0 0xEF    
   \              0xB3 0xCC    
   \              0xCA 0xFD    
   \              0xA3 0xA1    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    161          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ReadDist
        16   -> ReadDistFram
        16   -> printfcom0
      64   ReadDistFram
        64   -> GetCrc16Check
        64   -> ReadFM24CL64
        64   -> __aeabi_memcpy
        64   -> printfcom0
      16   StoresDist
        16   -> StoresDistFram
      16   StoresDistFram
        16   -> GetCrc16Check
        16   -> WriteFM24CL64


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      20  ?_0
      16  ?_1
      24  ?_2
      20  ?_3
      24  ?_4
      58  ReadDist
     286  ReadDistFram
      18  StoresDist
      66  StoresDistFram

 
 104 bytes in section .rodata
 448 bytes in section .text
 
 448 bytes of CODE  memory
 104 bytes of CONST memory

Errors: none
Warnings: 1
