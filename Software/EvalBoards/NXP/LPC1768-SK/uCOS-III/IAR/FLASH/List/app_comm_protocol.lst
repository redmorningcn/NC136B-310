###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       19/Sep/2017  19:02:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\APP\Protocol\app_comm_protocol.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\APP\Protocol\app_comm_protocol.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app_comm_protocol.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app_comm_protocol.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\APP\Protocol\app_comm_protocol.c
      1          /*******************************************************************************
      2           *   Filename:       app_lib.c
      3           *   Revised:        All copyrights reserved to Wuming Shen.
      4           *   Date:           2014-07-05
      5           *   Revision:       v1.0
      6           *   Writer:	     Wuming Shen.
      7           *
      8           *   Description:    双击选中 wdt 按 Ctrl + H, 钩选 Match the case, Replace with
      9           *                   输入您要的名字，点击 Replace All
     10           *                   双击选中 Wdt 按 Ctrl + H, 钩选 Match the case, Replace with
     11           *                   输入您要的名字，点击 Replace All
     12           *                   双击选中 WDT 按 Ctrl + H, 钩选 Match the case, Replace with
     13           *                   输入您要的名字，点击 Replace All
     14           *                   在 app_cfg.h 中指定任务的优先级 和 任务堆栈大小
     15           *
     16           *   Notes:
     17           *					QQ:276193028
     18           *     				E-mail:shenchangwei945@163.com
     19           *
     20           *******************************************************************************/
     21          
     22          /*******************************************************************************
     23           * INCLUDES
     24           */
     25          #define  SNL_APP_SOURCE
     26          #include <app.h>
     27          #include <CrcCheck.h>
     28          //#include <bsp_usart.h>
     29          
     30          #define BSP_COMM_PROTOCOL_MODULE_EN 1
     31          #if BSP_COMM_PROTOCOL_MODULE_EN > 0
     32          
     33          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     34          const  CPU_CHAR  *app_comm_protocol__c = "$Id: $";
     35          #endif
     36          
     37          /*******************************************************************************
     38           * CONSTANTS
     39           */
     40          #define         FRAM_HERD0     		0x10         	//报文头
     41          #define         FRAM_HERD1     		0x28       		//报文头				
     42          #define     	HOST_ID      		10				//上位机地址	  		   
     43          #define   		DEVICE_ID0      	15				//本机地址0	
     44          #define   		DEVICE_ID1      	15				//本机地址1	
     45          	   
     46          #define			RS485_CHK_SUM		0x02			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     47          #define			RS485_CHK_CRC		0x01			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     48          #define			RS485_CHK_RESUM		0x03			//b0001：CRC方式；b0010：累加和方式； b0011;累加和二进制补码方式 
     49          
     50          #define         FRAM_END0     		0x10         	//报文尾
     51          #define         FRAM_END1     		0x2C       		//报文尾	
     52          
     53          /*******************************************************************************
     54           * MACROS
     55           */
     56          
     57          /*******************************************************************************
     58           * TYPEDEFS
     59           */
     60               
     61          /*******************************************************************************
     62           * LOCAL VARIABLES
     63           */
     64          
     65          /*******************************************************************************
     66           * GLOBAL VARIABLES
     67           */
     68          
     69          /*******************************************************************************
     70           * LOCAL FUNCTIONS
     71           */
     72          
     73          /*******************************************************************************
     74           * GLOBAL FUNCTIONS
     75           */
     76          
     77          /*******************************************************************************
     78           * EXTERN VARIABLES
     79           */
     80          
     81          /*******************************************************************************
     82           * EXTERN FUNCTIONS
     83           */
     84           

   \                                 In section .bss, align 1
     85          static unsigned char   l_recslaveaddr = 0;
   \                     l_recslaveaddr:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     86          static unsigned char   l_RecvFrameNbr = 0;
   \                     l_RecvFrameNbr:
   \   00000000                      DS8 1
     87          /***********************************************
     88          * 描述： 
     89          */

   \                                 In section .text, align 2, keep-with-next
     90          unsigned char GetRecSlaveAddr(void)
     91          {
     92          	return	l_recslaveaddr;
   \                     GetRecSlaveAddr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     93          }
     94          /***********************************************
     95          * 描述：接收序号 
     96          */

   \                                 In section .text, align 2, keep-with-next
     97          unsigned char GetRecvFrameNbr(void)
     98          {
     99          	return	l_RecvFrameNbr;
   \                     GetRecvFrameNbr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    100          }
    101          
    102          //static uint8	RecvFrameNbr = 0;
    103          ///***********************************************
    104          //* 描述： 
    105          //*/
    106          //uint8	GetRecvFrameNbr(void)
    107          //{
    108          //	return 	RecvFrameNbr;
    109          //}
    110          
    111          
    112          /***********************************************
    113          * 描述： 
    114          */

   \                                 In section .text, align 2, keep-with-next
    115          void	SetRecvFrameNbr(void)
    116          {
    117          	l_RecvFrameNbr++;		
   \                     SetRecvFrameNbr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable6_1
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    118          }
   \   0000000C   0x4770             BX       LR               ;; return
    119          
    120          /*******************************************************************************
    121          * 名    称： GetCheckSumNR
    122          * 功    能： 
    123          * 入口参数： 无
    124          * 出口参数： 无
    125          * 作　 　者： wumingshen.
    126          * 创建日期： 2015-12-07
    127          * 修    改：
    128          * 修改日期：
    129          * 备    注：
    130          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          static uint8 GetCheckSumNR(uint8  Buf[], uint32 Len)
    132          {
   \                     GetCheckSumNR: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
    133              int32  i;
    134              int8   CheckSum = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    135              
    136              for(i = 0;i < Len; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x0023             MOVS     R3,R4
   \                     ??GetCheckSumNR_0: (+1)
   \   0000000A   0x428B             CMP      R3,R1
   \   0000000C   0xD203             BCS.N    ??GetCheckSumNR_1
    137                  CheckSum += Buf[i];                         //求和
   \   0000000E   0x569C             LDRSB    R4,[R3, R2]
   \   00000010   0x1820             ADDS     R0,R4,R0
    138              }
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
   \   00000014   0xE7F9             B.N      ??GetCheckSumNR_0
    139              
    140              if((unsigned char)CheckSum >= 0x80) {
   \                     ??GetCheckSumNR_1: (+1)
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C80             CMP      R4,#+128
   \   0000001C   0xDB02             BLT.N    ??GetCheckSumNR_2
    141              	CheckSum = ~CheckSum + 1 +0x80;             //取反+1
   \   0000001E   0x43C0             MVNS     R0,R0
   \   00000020   0x387F             SUBS     R0,R0,#+127
   \   00000022   0xE7FF             B.N      ??GetCheckSumNR_3
    142              } else {
    143              	CheckSum = CheckSum;                       	//取反+1
    144              }
    145              return  CheckSum;
   \                     ??GetCheckSumNR_2: (+1)
   \                     ??GetCheckSumNR_3: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    146          }
    147          
    148          /*******************************************************************************
    149          * 名    称： CSNC_GetData
    150          * 功    能： 
    151          * 入口参数： 无
    152          * 出口参数： 无
    153          * 作　 　者： wumingshen.
    154          * 创建日期： 2015-12-07
    155          * 修    改：
    156          * 修改日期：
    157          * 备    注：
    158          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    159          unsigned char  CSNC_GetData(	INT08U *RecBuf,
    160          								INT16U	RecLen,
    161          								INT08U *Datapos,
    162          								INT16U *InfoLen)
    163          {
   \                     CSNC_GetData: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x001E             MOVS     R6,R3
    164              unsigned short		i,j,k;
    165              unsigned char		    SumCheck8;
    166              unsigned char		    Tmp;
    167              unsigned short		RecCRC16,Check16;
    168          		
    169          	//unsigned char 		DstAddr;	
    170              unsigned char 		SourceAddr;
    171          	unsigned short		DataLen;  
    172              unsigned char         *pDat         = RecBuf;
   \   0000000A   0x46A3             MOV      R11,R4
    173              
    174              unsigned short        MaxDataLen    = RecLen - 10;
   \   0000000C   0xF1B5 0x000A      SUBS     R0,R5,#+10
   \   00000010   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    175              
    176              if(RecLen < 10)         //长度小于最小长度，直接退出。
   \   00000014   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000016   0x2D0A             CMP      R5,#+10
   \   00000018   0xDA01             BGE.N    ??CSNC_GetData_0
    177                  return 0;   
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE0B6             B.N      ??CSNC_GetData_1
    178              
    179              *InfoLen            = 0;
   \                     ??CSNC_GetData_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x8030             STRH     R0,[R6, #+0]
    180              //StrCommRecvPack *Rd = (StrCommRecvPack *)DataBuf;
    181              //DataBuf = DataBuf;
    182              /***********************************************
    183              * 描述： 识别帧头
    184              */
    185              for(i = 0; i < MaxDataLen -1; i++)	{		        //循环遍历 (2017 redmorningcn循环中有加1的，运算值需减1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x4680             MOV      R8,R0
   \                     ??CSNC_GetData_2: (+1)
   \   00000026   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002A   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x4580             CMP      R8,R0
   \   00000032   0xDA17             BGE.N    ??CSNC_GetData_3
    186          		if(	( (RecBuf[i + 0] ) == FRAM_HERD0 ) && 
    187                      ( (RecBuf[i + 1] ) == FRAM_HERD1 ) ) {
   \   00000034   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000038   0xF818 0x0004      LDRB     R0,[R8, R4]
   \   0000003C   0x2810             CMP      R0,#+16
   \   0000003E   0xD10E             BNE.N    ??CSNC_GetData_4
   \   00000040   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000044   0xEB18 0x0004      ADDS     R0,R8,R4
   \   00000048   0x7840             LDRB     R0,[R0, #+1]
   \   0000004A   0x2828             CMP      R0,#+40
   \   0000004C   0xD107             BNE.N    ??CSNC_GetData_4
    188                      pDat    = &RecBuf[i];
   \   0000004E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000052   0xEB18 0x0004      ADDS     R0,R8,R4
   \   00000056   0x4683             MOV      R11,R0
    189                      goto next;
    190                  }
    191              }
    192              return 0;
    193          next:
    194              /***********************************************
    195              * 描述： 接收数据去掉帧头识别字0X10的重复部分
    196              */
    197          	for(j = 0;j < RecLen - 1 ;j++ )	{				    //去重复通讯首字节   (2017 redmorningcn循环中有加1的，运算值需减1)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x4682             MOV      R10,R0
   \   0000005C   0xE004             B.N      ??CSNC_GetData_5
   \                     ??CSNC_GetData_4: (+1)
   \   0000005E   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000062   0xE7E0             B.N      ??CSNC_GetData_2
   \                     ??CSNC_GetData_3: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xE091             B.N      ??CSNC_GetData_1
   \                     ??CSNC_GetData_5: (+1)
   \   00000068   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000006C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006E   0x1E68             SUBS     R0,R5,#+1
   \   00000070   0x4582             CMP      R10,R0
   \   00000072   0xDA22             BGE.N    ??CSNC_GetData_6
    198                  if( ( pDat[j]   == FRAM_HERD0 ) &&
    199                      ( pDat[j+1] == FRAM_HERD0 ) ) {
   \   00000074   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000078   0xF81A 0x000B      LDRB     R0,[R10, R11]
   \   0000007C   0x2810             CMP      R0,#+16
   \   0000007E   0xD119             BNE.N    ??CSNC_GetData_7
   \   00000080   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000084   0xEB1A 0x000B      ADDS     R0,R10,R11
   \   00000088   0x7840             LDRB     R0,[R0, #+1]
   \   0000008A   0x2810             CMP      R0,#+16
   \   0000008C   0xD112             BNE.N    ??CSNC_GetData_7
    200                      for(k = j; k < RecLen -1; k++) {
   \   0000008E   0x46D1             MOV      R9,R10
   \                     ??CSNC_GetData_8: (+1)
   \   00000090   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000094   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000096   0x1E68             SUBS     R0,R5,#+1
   \   00000098   0x4581             CMP      R9,R0
   \   0000009A   0xDA0B             BGE.N    ??CSNC_GetData_7
    201                         pDat[k] =  pDat[k+1];
   \   0000009C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000A0   0xEB19 0x000B      ADDS     R0,R9,R11
   \   000000A4   0x7840             LDRB     R0,[R0, #+1]
   \   000000A6   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000AA   0xF809 0x000B      STRB     R0,[R9, R11]
    202          //               Tmp      = pDat[k+1];
    203          //               pDat[k]  = Tmp;
    204                      }
   \   000000AE   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000B2   0xE7ED             B.N      ??CSNC_GetData_8
    205                  }
    206          	}
   \                     ??CSNC_GetData_7: (+1)
   \   000000B4   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000B8   0xE7D6             B.N      ??CSNC_GetData_5
    207              pDat    += 6;
   \                     ??CSNC_GetData_6: (+1)
   \   000000BA   0xF11B 0x0B06      ADDS     R11,R11,#+6
    208              DataLen  = *pDat;
   \   000000BE   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000C2   0x0007             MOVS     R7,R0
    209              // 长度超范围
    210              if ( DataLen > MaxDataLen )
   \   000000C4   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000C8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000CA   0x42B8             CMP      R0,R7
   \   000000CC   0xD201             BCS.N    ??CSNC_GetData_9
    211                  return 0;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xE05C             B.N      ??CSNC_GetData_1
    212              
    213              pDat    += DataLen + 4;
   \                     ??CSNC_GetData_9: (+1)
   \   000000D2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D4   0xEB17 0x000B      ADDS     R0,R7,R11
   \   000000D8   0xF110 0x0B04      ADDS     R11,R0,#+4
    214              /***********************************************
    215              * 描述： 检查帧尾
    216              */
    217              if( ( pDat[0] 	!= FRAM_END0)	||
    218                  ( pDat[1] 	!= FRAM_END1) ) {
   \   000000DC   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000E0   0x2810             CMP      R0,#+16
   \   000000E2   0xD103             BNE.N    ??CSNC_GetData_10
   \   000000E4   0xF89B 0x0001      LDRB     R0,[R11, #+1]
   \   000000E8   0x282C             CMP      R0,#+44
   \   000000EA   0xD001             BEQ.N    ??CSNC_GetData_11
    219                  return 0;
   \                     ??CSNC_GetData_10: (+1)
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0xE04D             B.N      ??CSNC_GetData_1
    220              }
    221              
    222              pDat            = &RecBuf[i];
   \                     ??CSNC_GetData_11: (+1)
   \   000000F0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000F4   0xEB18 0x0004      ADDS     R0,R8,R4
   \   000000F8   0x4683             MOV      R11,R0
    223              l_recslaveaddr 	= pDat[3];
   \   000000FA   0xF89B 0x0003      LDRB     R0,[R11, #+3]
   \   000000FE   0x....             LDR.N    R1,??DataTable6
   \   00000100   0x7008             STRB     R0,[R1, #+0]
    224              
    225              //DstAddr         = l_recslaveaddr;
    226              SourceAddr      = pDat[2];
   \   00000102   0xF89B 0x0002      LDRB     R0,[R11, #+2]
   \   00000106   0xF88D 0x0000      STRB     R0,[SP, #+0]
    227              
    228              l_RecvFrameNbr  = pDat[4];
   \   0000010A   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   0000010E   0x....             LDR.N    R1,??DataTable6_1
   \   00000110   0x7008             STRB     R0,[R1, #+0]
    229              *InfoLen 		= DataLen; 
   \   00000112   0x8037             STRH     R7,[R6, #+0]
    230          
    231              SumCheck8 		= GetCheckSumNR((unsigned char *)&pDat[2],5);	//索引区校验
   \   00000114   0x2105             MOVS     R1,#+5
   \   00000116   0xF11B 0x0002      ADDS     R0,R11,#+2
   \   0000011A   0x.... 0x....      BL       GetCheckSumNR
   \   0000011E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    232          
    233              RecCRC16 		= ((unsigned short)pDat[8+DataLen])
    234                              * 256 + pDat[9+DataLen];	        //校验	
   \   00000122   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000124   0xEB17 0x000B      ADDS     R0,R7,R11
   \   00000128   0x7A00             LDRB     R0,[R0, #+8]
   \   0000012A   0xF44F 0x7180      MOV      R1,#+256
   \   0000012E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000130   0xEB17 0x020B      ADDS     R2,R7,R11
   \   00000134   0x7A52             LDRB     R2,[R2, #+9]
   \   00000136   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000013A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    235                         
    236              switch(pDat[5]>>4) {							    //校验和算法判断
   \   0000013E   0xF89B 0x0005      LDRB     R0,[R11, #+5]
   \   00000142   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000144   0x0900             LSRS     R0,R0,#+4
   \   00000146   0x2801             CMP      R0,#+1
   \   00000148   0xD004             BEQ.N    ??CSNC_GetData_12
   \   0000014A   0xD30C             BCC.N    ??CSNC_GetData_13
   \   0000014C   0x2803             CMP      R0,#+3
   \   0000014E   0xD00A             BEQ.N    ??CSNC_GetData_14
   \   00000150   0xD209             BCS.N    ??CSNC_GetData_13
    237              case	RS485_CHK_SUM:
    238                  break;
   \                     ??CSNC_GetData_15: (+1)
   \   00000152   0xE008             B.N      ??CSNC_GetData_13
    239              case	RS485_CHK_CRC:
    240                 Check16 = GetCrc16Check(&pDat[2],6+DataLen);;
   \                     ??CSNC_GetData_12: (+1)
   \   00000154   0x1DB9             ADDS     R1,R7,#+6
   \   00000156   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000158   0xF11B 0x0002      ADDS     R0,R11,#+2
   \   0000015C   0x.... 0x....      BL       GetCrc16Check
   \   00000160   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    241                  break;
   \   00000164   0xE7FF             B.N      ??CSNC_GetData_13
    242              case	RS485_CHK_RESUM:
    243                  break;
    244              }
    245              
    246              if(	(SumCheck8 == 	pDat[7] ) && 
    247                  (RecCRC16  ==	Check16 ) ) {
   \                     ??CSNC_GetData_14: (+1)
   \                     ??CSNC_GetData_13: (+1)
   \   00000166   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000016A   0xF89B 0x1007      LDRB     R1,[R11, #+7]
   \   0000016E   0x4288             CMP      R0,R1
   \   00000170   0xD10B             BNE.N    ??CSNC_GetData_16
   \   00000172   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000176   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD105             BNE.N    ??CSNC_GetData_16
    248                  /***********************************************
    249                  * 描述： 获取帧头
    250                  */
    251                  //memcpy( (INT08U *)&Rd.Head, (INT08U *)&pDat[0], 8 );
    252          
    253                  /***********************************************
    254                  * 描述： 获取数据
    255                  */       
    256                  //memcpy( (INT08U *)DataBuf,  (INT08U *)&pDat[8], DataLen);					//数据拷贝
    257                  
    258                      
    259                  //DataBuf     = (INT08U *)&pDat[8];
    260                   *Datapos   = 8;
   \   0000017E   0x2008             MOVS     R0,#+8
   \   00000180   0x9902             LDR      R1,[SP, #+8]
   \   00000182   0x7008             STRB     R0,[R1, #+0]
    261                  //return		DstAddr;//SourceAddr;
    262                  return  SourceAddr;
   \   00000184   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000188   0xE000             B.N      ??CSNC_GetData_1
    263              }
    264                         
    265              return	0;
   \                     ??CSNC_GetData_16: (+1)
   \   0000018A   0x2000             MOVS     R0,#+0
   \                     ??CSNC_GetData_1: (+1)
   \   0000018C   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    266          }
    267          

   \                                 In section .bss, align 1
    268          static uint8	SendFrameNbr = 0;
   \                     SendFrameNbr:
   \   00000000                      DS8 1
    269          
    270          /***********************************************
    271          * 描述： 
    272          */

   \                                 In section .text, align 2, keep-with-next
    273          uint8	GetSendFrameNbr(void)
    274          {
    275          	return SendFrameNbr;		
   \                     GetSendFrameNbr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    276          }
    277          
    278          /***********************************************
    279          * 描述： 
    280          */

   \                                 In section .text, align 2, keep-with-next
    281          void	SetSendFrameNbr(void)
    282          {
    283          	SendFrameNbr++;		
   \                     SetSendFrameNbr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable6_2
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    284          }
   \   0000000A   0x4770             BX       LR               ;; return
    285          

   \                                 In section .bss, align 4
    286          static  unsigned char	SndBuf[250] = {0};
   \                     SndBuf:
   \   00000000                      DS8 252

   \                                 In section .bss, align 4
    287          static  unsigned char	SndBufTmp[250] = {0};
   \                     SndBufTmp:
   \   00000000                      DS8 252
    288          /*******************************************************************************
    289          * 名    称： CSNC_SendData
    290          * 功    能： 
    291          * 入口参数： 无
    292          * 出口参数： 无
    293          * 作  　者： wumingshen.
    294          * 创建日期： 2015-12-07
    295          * 修    改：
    296          * 修改日期：
    297          * 备    注：
    298          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    299          void	CSNC_SendData(	MODBUS_CH *pch,
    300                                  INT08U  SourceAddr,
    301          						INT08U  DistAddr,
    302                                  INT08U  SendFrameNum,
    303          						INT08U  SendCode,                       
    304          						INT08U *DataBuf,
    305          						INT16U  DataLen)
    306          {
   \                     CSNC_SendData: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0xF8DD 0xB03C      LDR      R11,[SP, #+60]
   \   0000000C   0x9C10             LDR      R4,[SP, #+64]
    307          	unsigned char	    SumCheck8;
    308          	unsigned short	Crc16;
    309          	unsigned short	AddHeadNum;
    310          	unsigned short	i;
    311          	unsigned char	    ByteStation;	
    312              
    313          	ByteStation = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4681             MOV      R9,R0
    314          	SndBuf[ByteStation++] = FRAM_HERD0;
   \   00000012   0x2010             MOVS     R0,#+16
   \   00000014   0x....             LDR.N    R1,??DataTable6_3
   \   00000016   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000001A   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000001E   0xF119 0x0901      ADDS     R9,R9,#+1
    315          	SndBuf[ByteStation++] = FRAM_HERD1;
   \   00000022   0x2028             MOVS     R0,#+40
   \   00000024   0x....             LDR.N    R1,??DataTable6_3
   \   00000026   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000002A   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000002E   0xF119 0x0901      ADDS     R9,R9,#+1
    316          	SndBuf[ByteStation++] = SourceAddr;	 
   \   00000032   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000036   0x....             LDR.N    R1,??DataTable6_3
   \   00000038   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000003C   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000040   0xF119 0x0901      ADDS     R9,R9,#+1
    317          	SndBuf[ByteStation++] = DistAddr;				    // 地址
   \   00000044   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000048   0x....             LDR.N    R1,??DataTable6_3
   \   0000004A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004E   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000052   0xF119 0x0901      ADDS     R9,R9,#+1
    318          	SndBuf[ByteStation++] = SendFrameNum;               // 发送帧序号
   \   00000056   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000005A   0x....             LDR.N    R1,??DataTable6_3
   \   0000005C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000060   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000064   0xF119 0x0901      ADDS     R9,R9,#+1
    319          
    320          	SndBuf[ByteStation++] =  ( RS485_CHK_CRC<<4 )+ SendCode;// 发送控制字	
   \   00000068   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   0000006C   0x3010             ADDS     R0,R0,#+16
   \   0000006E   0x....             LDR.N    R1,??DataTable6_3
   \   00000070   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000074   0xF809 0x0001      STRB     R0,[R9, R1]
   \   00000078   0xF119 0x0901      ADDS     R9,R9,#+1
    321          	SndBuf[ByteStation++] = DataLen;
   \   0000007C   0x....             LDR.N    R0,??DataTable6_3
   \   0000007E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000082   0xF809 0x4000      STRB     R4,[R9, R0]
   \   00000086   0xF119 0x0901      ADDS     R9,R9,#+1
    322          	
    323          	SumCheck8 = GetCheckSumNR(&SndBuf[2],5);		   	// 索引区校验
   \   0000008A   0x2105             MOVS     R1,#+5
   \   0000008C   0x....             LDR.N    R0,??DataTable6_4
   \   0000008E   0x.... 0x....      BL       GetCheckSumNR
   \   00000092   0xF88D 0x0000      STRB     R0,[SP, #+0]
    324          
    325          	SndBuf[ByteStation++] = SumCheck8;
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0x....             LDR.N    R1,??DataTable6_3
   \   0000009C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000A0   0xF809 0x0001      STRB     R0,[R9, R1]
   \   000000A4   0xF119 0x0901      ADDS     R9,R9,#+1
    326          
    327          	memcpy(&SndBuf[8],DataBuf,DataLen);
   \   000000A8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AA   0x.... 0x....      LDR.W    R10,??DataTable6_5
   \   000000AE   0x0022             MOVS     R2,R4
   \   000000B0   0x4659             MOV      R1,R11
   \   000000B2   0x4650             MOV      R0,R10
   \   000000B4   0x.... 0x....      BL       __aeabi_memcpy
    328          
    329          	Crc16 = GetCrc16Check(&SndBuf[2],6+DataLen);
   \   000000B8   0x1DA1             ADDS     R1,R4,#+6
   \   000000BA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BC   0x....             LDR.N    R0,??DataTable6_4
   \   000000BE   0x.... 0x....      BL       GetCrc16Check
   \   000000C2   0x0006             MOVS     R6,R0
    330          
    331          	SndBuf[2+6+DataLen+1] = Crc16;
   \   000000C4   0x....             LDR.N    R0,??DataTable6_3
   \   000000C6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000C8   0x1820             ADDS     R0,R4,R0
   \   000000CA   0x7246             STRB     R6,[R0, #+9]
    332          	SndBuf[2+6+DataLen]   = Crc16>>8;
   \   000000CC   0x0030             MOVS     R0,R6
   \   000000CE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D0   0x0A00             LSRS     R0,R0,#+8
   \   000000D2   0x....             LDR.N    R1,??DataTable6_3
   \   000000D4   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000D6   0x1861             ADDS     R1,R4,R1
   \   000000D8   0x7208             STRB     R0,[R1, #+8]
    333          
    334          	SndBufTmp[0] = SndBuf[0];						    // 准备数据发送
   \   000000DA   0x....             LDR.N    R0,??DataTable6_3
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x....             LDR.N    R1,??DataTable6_6
   \   000000E0   0x7008             STRB     R0,[R1, #+0]
    335          	SndBufTmp[1] = SndBuf[1];
   \   000000E2   0x....             LDR.N    R0,??DataTable6_3
   \   000000E4   0x7840             LDRB     R0,[R0, #+1]
   \   000000E6   0x....             LDR.N    R1,??DataTable6_6
   \   000000E8   0x7048             STRB     R0,[R1, #+1]
    336          	
    337          	AddHeadNum = 0;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x0007             MOVS     R7,R0
    338          	for(i = 2; i< 2+6+DataLen + 2 + AddHeadNum;i++ )	{				// 数据，补移位 FRAM_HERD0
   \   000000EE   0x2002             MOVS     R0,#+2
   \   000000F0   0x4680             MOV      R8,R0
   \                     ??CSNC_SendData_0: (+1)
   \   000000F2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000F6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000F8   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000FA   0x1938             ADDS     R0,R7,R4
   \   000000FC   0x300A             ADDS     R0,R0,#+10
   \   000000FE   0x4580             CMP      R8,R0
   \   00000100   0xDA1F             BGE.N    ??CSNC_SendData_1
    339          	
    340          		SndBufTmp[i+AddHeadNum] = SndBuf[i];
   \   00000102   0x....             LDR.N    R0,??DataTable6_3
   \   00000104   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000108   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000010C   0x....             LDR.N    R1,??DataTable6_6
   \   0000010E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000112   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000114   0xEB17 0x0208      ADDS     R2,R7,R8
   \   00000118   0x5450             STRB     R0,[R2, R1]
    341          		
    342          		if(SndBuf[i] == FRAM_HERD0) {
   \   0000011A   0x....             LDR.N    R0,??DataTable6_3
   \   0000011C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000120   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000124   0x2810             CMP      R0,#+16
   \   00000126   0xD109             BNE.N    ??CSNC_SendData_2
    343          			SndBufTmp[i+AddHeadNum+1] = FRAM_HERD0;
   \   00000128   0x....             LDR.N    R0,??DataTable6_6
   \   0000012A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000012E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000130   0xEB17 0x0108      ADDS     R1,R7,R8
   \   00000134   0x1808             ADDS     R0,R1,R0
   \   00000136   0x2110             MOVS     R1,#+16
   \   00000138   0x7041             STRB     R1,[R0, #+1]
    344          			AddHeadNum++;
   \   0000013A   0x1C7F             ADDS     R7,R7,#+1
    345          		}
    346          	}
   \                     ??CSNC_SendData_2: (+1)
   \   0000013C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000140   0xE7D7             B.N      ??CSNC_SendData_0
    347          
    348          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum] = FRAM_END0;
   \                     ??CSNC_SendData_1: (+1)
   \   00000142   0x....             LDR.N    R0,??DataTable6_6
   \   00000144   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000146   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000148   0x1939             ADDS     R1,R7,R4
   \   0000014A   0x1808             ADDS     R0,R1,R0
   \   0000014C   0x2110             MOVS     R1,#+16
   \   0000014E   0x7281             STRB     R1,[R0, #+10]
    349          	SndBufTmp[2+6+DataLen + 2 +AddHeadNum+1] = FRAM_END1;      
   \   00000150   0x....             LDR.N    R0,??DataTable6_6
   \   00000152   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000154   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000156   0x1939             ADDS     R1,R7,R4
   \   00000158   0x1808             ADDS     R0,R1,R0
   \   0000015A   0x212C             MOVS     R1,#+44
   \   0000015C   0x72C1             STRB     R1,[R0, #+11]
    350              
    351              CPU_INT16U nbr_bytes= (2+6+DataLen + 2 +AddHeadNum +2);
   \   0000015E   0x1938             ADDS     R0,R7,R4
   \   00000160   0xF110 0x0A0C      ADDS     R10,R0,#+12
    352              if ( nbr_bytes < MB_DATA_NBR_REGS * 2 ) {  
   \   00000164   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000168   0xF1BA 0x0FFA      CMP      R10,#+250
   \   0000016C   0xDA0A             BGE.N    ??CSNC_SendData_3
    353                  //串口在非接收状态，发送数据。
    354                  if (pch->RxBufByteCtr == 0) 
   \   0000016E   0x8E28             LDRH     R0,[R5, #+48]
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD106             BNE.N    ??CSNC_SendData_4
    355                  {                
    356                      NMB_Tx(pch,
    357                             (CPU_INT08U  *)SndBufTmp,
    358                             (CPU_INT16U   )nbr_bytes);
   \   00000174   0x4652             MOV      R2,R10
   \   00000176   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000178   0x....             LDR.N    R1,??DataTable6_6
   \   0000017A   0x0028             MOVS     R0,R5
   \   0000017C   0x.... 0x....      BL       NMB_Tx
   \   00000180   0xE000             B.N      ??CSNC_SendData_3
    359                  }
    360                  else
    361                  {
    362                      return;
   \                     ??CSNC_SendData_4: (+1)
   \   00000182   0xE7FF             B.N      ??CSNC_SendData_5
    363                  }
    364              }
    365          }
   \                     ??CSNC_SendData_3: (+1)
   \                     ??CSNC_SendData_5: (+1)
   \   00000184   0xB005             ADD      SP,SP,#+20
   \   00000186   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     l_recslaveaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     l_RecvFrameNbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     SendFrameNbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     SndBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     SndBuf+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     SndBuf+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     SndBufTmp
    366          
    367          /*******************************************************************************
    368           * 				                    end of file                                *
    369           *******************************************************************************/
    370          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   CSNC_GetData
        48   -> GetCheckSumNR
        48   -> GetCrc16Check
      56   CSNC_SendData
        56   -> GetCheckSumNR
        56   -> GetCrc16Check
        56   -> NMB_Tx
        56   -> __aeabi_memcpy
       4   GetCheckSumNR
       0   GetRecSlaveAddr
       0   GetRecvFrameNbr
       0   GetSendFrameNbr
       0   SetRecvFrameNbr
       0   SetSendFrameNbr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
     400  CSNC_GetData
     394  CSNC_SendData
      42  GetCheckSumNR
       8  GetRecSlaveAddr
       8  GetRecvFrameNbr
       6  GetSendFrameNbr
       1  SendFrameNbr
      14  SetRecvFrameNbr
      12  SetSendFrameNbr
     252  SndBuf
     252  SndBufTmp
       1  l_RecvFrameNbr
       1  l_recslaveaddr

 
 507 bytes in section .bss
 912 bytes in section .text
 
 912 bytes of CODE memory
 507 bytes of DATA memory

Errors: none
Warnings: 1
