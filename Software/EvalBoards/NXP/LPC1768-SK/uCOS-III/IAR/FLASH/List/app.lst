###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       06/Sep/2017  10:50:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\app.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\app.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\app.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2012; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                            EXAMPLE CODE
     18          *
     19          *                                             NXP LPC1768
     20          *                                                on the
     21          *                                     IAR LPC1768-SK Kickstart Kit
     22          *
     23          * Filename      : app.c
     24          * Version       : V1.00
     25          * Programmer(s) : FT
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #include <includes.h>
     36          #include <lpc17xx_nvic.h>
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                            LOCAL DEFINES
     41          *********************************************************************************************************
     42          */
     43          
     44          
     45          /*
     46          *********************************************************************************************************
     47          *                                       LOCAL GLOBAL VARIABLES
     48          *********************************************************************************************************
     49          */
     50          
     51                                                                          /* ----------------- APPLICATION GLOBALS ------------------ */
     52                                                                          /* -------- uC/OS-III APPLICATION TASK STACKS ------------- */

   \                                 In section .bss, align 4
     53          static  OS_TCB        App_TaskStartTCB;
   \                     App_TaskStartTCB:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
     54          static  CPU_STK_SIZE  App_TaskStartStk[APP_CFG_TASK_START_STK_SIZE];
   \                     App_TaskStartStk:
   \   00000000                      DS8 256
     55          
     56          
     57          /*
     58          *********************************************************************************************************
     59          *                                      LOCAL FUNCTION PROTOTYPES
     60          *********************************************************************************************************
     61          */
     62          
     63          static  void  App_ObjCreate          (void);
     64          static  void  App_TaskCreate         (void);
     65          static  void  App_TaskStart          (void       *p_arg);
     66          
     67          
     68          /*
     69          *********************************************************************************************************
     70          *                                                main()
     71          *
     72          * Description : This is the standard entry point for C code.  It is assumed that your code will call
     73          *               main() once you have performed all necessary initialization.
     74          *
     75          * Argument(s) : none.
     76          *
     77          * Return(s)   : none.
     78          *
     79          * Caller(s)   : This the main standard entry point.
     80          *
     81          * Note(s)     : none.
     82          *********************************************************************************************************
     83          */
     84          

   \                                 In section .text, align 2, keep-with-next
     85          int  main (void)
     86          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     87              OS_ERR  err;
     88              
     89              App_Main();
   \   00000004   0x.... 0x....      BL       App_Main
     90          
     91              CPU_Init();
   \   00000008   0x.... 0x....      BL       CPU_Init
     92               
     93              //NVIC_SetVTOR(0x10000);  //20170815补充
     94          
     95              BSP_Init();                                                 /* Initialize BSP functions                             */
   \   0000000C   0x.... 0x....      BL       BSP_Init
     96          
     97              Mem_Init();
   \   00000010   0x.... 0x....      BL       Mem_Init
     98          
     99              OSInit(&err);                                               /* Initialize "uC/OS-III, The Real-Time Kernel"         */
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x.... 0x....      BL       OSInit
    100          
    101              OSTaskCreate((OS_TCB     *)&App_TaskStartTCB,               /* Create the start task                                */
    102                           (CPU_CHAR   *)"App Task Start",
    103                           (OS_TASK_PTR ) App_TaskStart,
    104                           (void       *) 0,
    105                           (OS_PRIO     ) APP_CFG_TASK_START_PRIO,
    106                           (CPU_STK    *)&App_TaskStartStk[0],
    107                           (CPU_STK     )(APP_CFG_TASK_START_STK_SIZE / 10u),
    108                           (CPU_STK_SIZE) APP_CFG_TASK_START_STK_SIZE,
    109                           (OS_MSG_QTY  ) 0,
    110                           (OS_TICK     ) 0,
    111                           (void       *) 0,
    112                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    113                           (OS_ERR     *)&err);
   \   0000001A   0xA809             ADD      R0,SP,#+36
   \   0000001C   0x9008             STR      R0,[SP, #+32]
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x9007             STR      R0,[SP, #+28]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9005             STR      R0,[SP, #+20]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9004             STR      R0,[SP, #+16]
   \   0000002E   0x2040             MOVS     R0,#+64
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2006             MOVS     R0,#+6
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x....             LDR.N    R0,??DataTable0
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0x.... 0x....      ADR.W    R2,App_TaskStart
   \   00000044   0x....             LDR.N    R1,??DataTable0_1
   \   00000046   0x....             LDR.N    R0,??DataTable0_2
   \   00000048   0x.... 0x....      BL       OSTaskCreate
    114          #if (OS_TASK_NAME_EN > 0u)
    115              OSTaskNameSet(APP_CFG_TASK_START_PRIO, "Start", &err);
    116          #endif
    117          
    118          
    119              OSStart(&err);                                              /* Start multitasking (i.e. give control to uC/OS-III). */
   \   0000004C   0xA809             ADD      R0,SP,#+36
   \   0000004E   0x.... 0x....      BL       OSStart
    120          
    121              while(DEF_ON){												/* Should Never Get Here							    */
   \                     ??main_0: (+1)
   \   00000052   0xE7FE             B.N      ??main_0
    122              };
    123          }
    124          
    125          /*
    126          *********************************************************************************************************
    127          *                                          App_TaskStart()
    128          *
    129          * Description : This is an example of a startup task.  As mentioned in the book's text, you MUST
    130          *               initialize the ticker only once multitasking has started.
    131          *
    132          * Argument(s) : p_arg   is the argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    133          *
    134          * Return(s)   : none.
    135          *
    136          * Caller(s)   : This is a task.
    137          *
    138          * Notes       : (1) The first line of code is used to prevent a compiler warning because 'p_arg' is not
    139          *                   used.  The compiler should not generate any code for this statement.
    140          *********************************************************************************************************
    141          */
    142          

   \                                 In section .text, align 4, keep-with-next
    143          static  void  App_TaskStart (void *p_arg)
    144          {
   \                     App_TaskStart: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    145              OS_ERR  os_err;
    146          
    147              (void)p_arg;                                                /* See Note #1                                          */
    148              
    149              /***********************************************
    150              * 描述： 设置UCOS钩子函数
    151              */
    152              App_OS_SetAllHooks();
   \   00000006   0x.... 0x....      BL       App_OS_SetAllHooks
    153              
    154              BSP_Start();                                                /* Start BSP and tick initialization                    */
   \   0000000A   0x.... 0x....      BL       BSP_Start
    155          
    156          #if (OS_TASK_STAT_EN > 0)
    157              OSStatInit();                                               /* Determine CPU capacity                               */
    158          #endif
    159          
    160              App_ObjCreate();                                            /* Create Applicaiton kernel objects                    */
   \   0000000E   0x.... 0x....      BL       App_ObjCreate
    161          
    162              App_TaskCreate();                                           /* Create Application tasks                             */
   \   00000012   0x.... 0x....      BL       App_TaskCreate
    163          
    164              BSP_LED_Off(0);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       BSP_LED_Off
    165          
    166              while (DEF_TRUE) {    
    167                                                                          /* Task body, always written as an infinite loop.       */
    168                  //BSP_LED_Toggle(8);
    169                          
    170                  OSTimeDlyHMSM(0, 0, 0, 100,
    171                                OS_OPT_TIME_HMSM_STRICT, &os_err);
   \                     ??App_TaskStart_0: (+1)
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x2364             MOVS     R3,#+100
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       OSTimeDlyHMSM
    172                  
    173                  WDT_Feed();
   \   00000030   0x.... 0x....      BL       WDT_Feed
   \   00000034   0xE7F2             B.N      ??App_TaskStart_0
    174              }
    175          }
    176          
    177          
    178          /*
    179          *********************************************************************************************************
    180          *                                      App_ObjCreate()
    181          *
    182          * Description:  Creates the application kernel objects.
    183          *
    184          * Argument(s) :  none.
    185          *
    186          * Return(s)   :  none.
    187          *
    188          * Caller(s)   :  App_TaskStart().
    189          *
    190          * Note(s)     :  none.
    191          *********************************************************************************************************
    192          */
    193          

   \                                 In section .text, align 2, keep-with-next
    194          static  void  App_ObjCreate (void)
    195          {
    196              
    197          }
   \                     App_ObjCreate: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    198          
    199          /*
    200          *********************************************************************************************************
    201          *                                      App_TaskCreate()
    202          *
    203          * Description :  This function creates the application tasks.
    204          *
    205          * Argument(s) :  none.
    206          *
    207          * Return(s)   :  none.
    208          *
    209          * Caller(s)   :  App_TaskStart().
    210          *
    211          * Note(s)     :  none.
    212          *********************************************************************************************************
    213          */
    214          extern void OS_TaskCreateHook(void);

   \                                 In section .text, align 2, keep-with-next
    215          static  void  App_TaskCreate (void)
    216          {
   \                     App_TaskCreate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    217            
    218              OS_TaskCreateHook();
   \   00000002   0x.... 0x....      BL       OS_TaskCreateHook
    219              /***********************************************
    220              * 描述： 在此处创建OSAL任务
    221              */
    222              App_TaskOsalCreate();
   \   00000006   0x.... 0x....      BL       App_TaskOsalCreate
    223          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     App_TaskStartStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     App_TaskStartTCB

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Start"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0
    224          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_ObjCreate
       8   App_TaskCreate
         8   -> App_TaskOsalCreate
         8   -> OS_TaskCreateHook
      24   App_TaskStart
        24   -> App_OS_SetAllHooks
        24   -> App_ObjCreate
        24   -> App_TaskCreate
        24   -> BSP_LED_Off
        24   -> BSP_Start
        24   -> OSTimeDlyHMSM
        24   -> WDT_Feed
      48   main
        48   -> App_Main
        48   -> BSP_Init
        48   -> CPU_Init
        48   -> Mem_Init
        48   -> OSInit
        48   -> OSStart
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
      16  ?_0
       2  App_ObjCreate
      12  App_TaskCreate
      54  App_TaskStart
     256  App_TaskStartStk
     200  App_TaskStartTCB
      84  main

 
 456 bytes in section .bss
  16 bytes in section .rodata
 164 bytes in section .text
 
 164 bytes of CODE  memory
  16 bytes of CONST memory
 456 bytes of DATA  memory

Errors: none
Warnings: 3
