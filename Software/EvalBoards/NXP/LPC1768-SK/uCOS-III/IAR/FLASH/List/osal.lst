###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Oct/2017  18:40:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\osal.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\osal.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\OSAL\OS\osal.c
      1          /*******************************************************************************
      2           *   Filename:      @osal.c
      3           *   Revised:
      4           *   Revision:
      5           *   Writer:        @Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <global.h>
     20          #include <includes.h>
     21          #include <bsp_hal.h>
     22          #include <osal_event.h>
     23          
     24          #if OSAL_EN > 0
     25          /*******************************************************************************
     26           * CONSTANTS
     27           */
     28          
     29          /*******************************************************************************
     30           * TYPEDEFS
     31           */
     32          /*******************************************************************************
     33           * MACROS
     34           */
     35          
     36          
     37          /*******************************************************************************
     38           * LOCAL VARIABLES
     39           */
     40          
     41          /*******************************************************************************
     42           * GLOBAL VARIABLES
     43           */
     44          //osal_msg_q_t    osal_qHead;
     45          
     46          /*******************************************************************************
     47           * LOCAL FUNCTIONS
     48           */
     49          
     50          /*******************************************************************************
     51           * GLOBAL FUNCTIONS
     52           */
     53          
     54          /*******************************************************************************
     55           * EXTERN VARIABLES
     56           */
     57          
     58           /*******************************************************************************
     59           * EXTERN FUNCTIONS
     60           */
     61          
     62           /*******************************************************************************
     63           * @fn      osal_set_event
     64           *
     65           * @brief
     66           *
     67           *    This function is called to set the event flags for a task.  The
     68           *    event passed in is OR'd into the task's event variable.
     69           *
     70           * @param   byte task_id - receiving tasks ID
     71           * @param   byte event_flag - what event to set
     72           *
     73           * @return  ZSUCCESS, INVALID_TASK
     74           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          byte osal_set_event( osalTid task_id, osalFlg event_flag )
     76          {
   \                     osal_set_event: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     77              OsalTadkREC_t  *srchTask;
     78              halIntState_t   cpu_sr;
     79          
     80              srchTask = osalFindTask( task_id );
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       osalFindTask
   \   0000000C   0x0006             MOVS     R6,R0
     81              if ( srchTask ) {
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD012             BEQ.N    ??osal_set_event_0
     82                  // Hold off interrupts
     83                  CPU_CRITICAL_ENTER();
   \   00000012   0x.... 0x....      BL       CPU_SR_Save
   \   00000016   0x0007             MOVS     R7,R0
   \   00000018   0x.... 0x....      BL       CPU_IntDisMeasStart
     84                  // Stuff the event bit(s)
     85                  srchTask->events |= event_flag;
   \   0000001C   0x6970             LDR      R0,[R6, #+20]
   \   0000001E   0x4328             ORRS     R0,R5,R0
   \   00000020   0x6170             STR      R0,[R6, #+20]
     86                  // Release interrupts
     87                  CPU_CRITICAL_EXIT();
   \   00000022   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0x0038             MOVS     R0,R7
   \   0000002A   0x.... 0x....      BL       CPU_SR_Restore
     88          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
     89                  BSP_OS_SemPost(&Osal_EvtSem);                     // 发送信号量
   \   0000002E   0x....             LDR.N    R0,??DataTable1
   \   00000030   0x.... 0x....      BL       BSP_OS_SemPost
     90          #endif
     91              } else
     92                  return ( INVALID_TASK );
     93              return ( ZSUCCESS );
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE000             B.N      ??osal_set_event_1
   \                     ??osal_set_event_0: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \                     ??osal_set_event_1: (+1)
   \   0000003A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     94          }
     95          
     96          /*******************************************************************************
     97           * @fn      osal_init_system
     98           *
     99           * @brief
    100           *
    101           *   This function initializes the "task" system by creating the
    102           *   tasks defined in the task table (OSAL_Tasks.h).
    103           *
    104           * @param   void
    105           *
    106           * @return  ZSUCCESS
    107           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    108          byte osal_init_system( void )
    109          {
   \                     osal_init_system: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    110              // Initialize the Memory Allocation System
    111          #if OSAL_MEM_EN > 0
    112              osal_mem_init();
    113          #endif
    114              // Initialize the message queue
    115              // osal_qHead = NULL;
    116          
    117          #if defined( OSAL_TOTAL_MEM )
    118            osal_msg_cnt = 0;
    119          #endif
    120          
    121              // Initialize the timers
    122              osalTimerInit();
   \   00000002   0x.... 0x....      BL       osalTimerInit
    123          
    124              // Initialize the tasking system
    125              osal_init_TaskHead();
   \   00000006   0x.... 0x....      BL       osal_init_TaskHead
    126          
    127              return ( ZSUCCESS );
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    128          }
    129          
    130          /*******************************************************************************
    131           * @fn      osal_start_system
    132           *
    133           * @brief
    134           *
    135           *   This function is the main loop function of the task system.  It
    136           *   will look through all task events and call the task_event_processor()
    137           *   function for the task with the event.  If there are no events (for
    138           *   all tasks), this function puts the processor into Sleep.
    139           *   This Function doesn't return.
    140           *
    141           * @param   void
    142           *
    143           * @return  none
    144           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    145          void osal_start_system( void )
    146          {
   \                     osal_start_system: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    147              osalEvt       events;
    148              halIntState_t cpu_sr;
    149          
    150              /***********************************************
    151              * 描述：OSAL任务查询和执行
    152              */
    153              while(1) {
    154                  /***********************************************
    155                  * 描述：用于需要系统总是查询的的事件，如：
    156                  *       串口接收事件，按钮扫描事件等
    157                  */
    158                  HAL_ProcessPoll();
   \                     ??osal_start_system_0: (+1)
   \   00000002   0x.... 0x....      BL       HAL_ProcessPoll
    159                  /***********************************************
    160                  * 描述：查找是否有任务产生事件
    161                  */
    162                  TaskActive = osalNextActiveTask();
   \   00000006   0x.... 0x....      BL       osalNextActiveTask
   \   0000000A   0x....             LDR.N    R1,??DataTable1_1
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    163          
    164                  /***********************************************
    165                  * 描述：如果当前任务有事件发生
    166                  */
    167                  if ( TaskActive ) {
   \   0000000E   0x....             LDR.N    R0,??DataTable1_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD0F5             BEQ.N    ??osal_start_system_0
    168                      CPU_CRITICAL_ENTER();
   \   00000016   0x.... 0x....      BL       CPU_SR_Save
   \   0000001A   0x0005             MOVS     R5,R0
   \   0000001C   0x.... 0x....      BL       CPU_IntDisMeasStart
    169                      events = TaskActive->events;
   \   00000020   0x....             LDR.N    R0,??DataTable1_1
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x6940             LDR      R0,[R0, #+20]
   \   00000026   0x0004             MOVS     R4,R0
    170                      /***********************************************
    171                      * 描述：清除当前任务事件
    172                      */
    173                      TaskActive->events = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable1_1
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x6148             STR      R0,[R1, #+20]
    174                      CPU_CRITICAL_EXIT();
   \   00000030   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x.... 0x....      BL       CPU_SR_Restore
    175          
    176                      /***********************************************
    177                      * 描述：再次检查事件是否存在
    178                      */
    179                      if ( events != 0 ) {
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD0E0             BEQ.N    ??osal_start_system_0
    180                          /***********************************************
    181                          * 描述：判断任务函数是否存在
    182                          */
    183                          if ( TaskActive->pfnEventProcessor ) {
   \   00000040   0x....             LDR.N    R0,??DataTable1_1
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD0DB             BEQ.N    ??osal_start_system_0
    184                              /***********************************************
    185                              * 描述：执行任务处理高优先级事件并返回未处理完的事件
    186                              *       事件值越小，优先级越高
    187                              */
    188                              events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   0000004A   0x0021             MOVS     R1,R4
   \   0000004C   0x....             LDR.N    R0,??DataTable1_1
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x68C0             LDR      R0,[R0, #+12]
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x....             LDR.N    R2,??DataTable1_1
   \   00000056   0x6812             LDR      R2,[R2, #+0]
   \   00000058   0x6892             LDR      R2,[R2, #+8]
   \   0000005A   0x4790             BLX      R2
   \   0000005C   0x0004             MOVS     R4,R0
    189                              /***********************************************
    190                              * 描述：添加返回未处理完的事件到当前任务，等待下次执行
    191                              */
    192                              CPU_CRITICAL_ENTER();
   \   0000005E   0x.... 0x....      BL       CPU_SR_Save
   \   00000062   0x0005             MOVS     R5,R0
   \   00000064   0x.... 0x....      BL       CPU_IntDisMeasStart
    193                              TaskActive->events |= events;
   \   00000068   0x....             LDR.N    R0,??DataTable1_1
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x6940             LDR      R0,[R0, #+20]
   \   0000006E   0x4320             ORRS     R0,R4,R0
   \   00000070   0x....             LDR.N    R1,??DataTable1_1
   \   00000072   0x6809             LDR      R1,[R1, #+0]
   \   00000074   0x6148             STR      R0,[R1, #+20]
    194                              CPU_CRITICAL_EXIT();
   \   00000076   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000007A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007C   0x0028             MOVS     R0,R5
   \   0000007E   0x.... 0x....      BL       CPU_SR_Restore
   \   00000082   0xE7BE             B.N      ??osal_start_system_0
    195                          }
    196                      }
    197                  }
    198              }
    199          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Osal_EvtSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     TaskActive
    200          /*******************************************************************************
    201           * 				end of file                                    *
    202           *******************************************************************************/
    203          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   osal_init_system
         8   -> osalTimerInit
         8   -> osal_init_TaskHead
      24   osal_set_event
        24   -> BSP_OS_SemPost
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> osalFindTask
      16   osal_start_system
        16   -- Indirect call
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> HAL_ProcessPoll
        16   -> osalNextActiveTask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      14  osal_init_system
      60  osal_set_event
     132  osal_start_system

 
 214 bytes in section .text
 
 214 bytes of CODE memory

Errors: none
Warnings: none
