###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/May/2017  11:41:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\DataDeal\MathDipVal.c
#    Command line =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\DataDeal\MathDipVal.c
#        -lCN
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pe174 -o
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\MathDipVal.lst
#    Object file  =  
#        F:\iar\Micrium_LPC1768-SK_uCOS-III\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\MathDipVal.o
#
###############################################################################

F:\iar\Micrium_LPC1768-SK_uCOS-III\Application\Library\DataDeal\MathDipVal.c
      1          ////#include 	"config.h" 
      2          ////#include	"stdlib.h"
      3          ////#include	"stdio.h"
      4          ////
      5          ////#include	"string.h"
      6          ////#include	"Globe.h"
      7          ////#include	"DipMath.h"
      8          ////#include	"CpuDrive.h"
      9          ////#include	"FramStore.h"
     10          ////#include	"DipMath.h"
     11          ////#include	"math.h"
     12          ////#include	"Tax2.h"
     13          ////#include	"HardDrive.h"
     14          //
     15          //
     16          #include 	<includes.h>
     17          #include	"DipMath.h"
     18          
     19          #define     FREQ_DOWN_STATE     1
     20          #define     FREQ_WAVE_STATE     2
     21          #define     FREQ_LAG_WAVE_STATE 3
     22          #define     FREQ_UP_STATE       4           		//频率变化状态
     23          #define     FREQ_STOP_STATE     5
     24          
     25          #define     BUF_SIZE_DIP        30
     26          

   \                                 In section .bss, align 2
     27          int16   l_CurDipAvgPrs 	= 0;                     	//实际平均压强值
   \                     l_CurDipAvgPrs:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     28          uint16  l_DipStorePrs 	= 0;                  		//频率的最终运算结果
   \                     l_DipStorePrs:
   \   00000000                      DS8 2

   \                                 In section .data, align 1
     29          uint8   l_PrsChgState 	= FREQ_WAVE_STATE;    		//频率波动状态
   \                     l_PrsChgState:
   \   00000000   0x02               DC8 2
     30          

   \                                 In section .bss, align 2
     31          int16	l_Dip1Frq10SecChg;
   \                     l_Dip1Frq10SecChg:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     32          int16	l_Dip2Frq10SecChg;
   \                     l_Dip2Frq10SecChg:
   \   00000000                      DS8 2
     33          

   \                                 In section .text, align 2, keep-with-next
     34          uint8	GetDebugModelDisHig(void)
     35          {
   \                     GetDebugModelDisHig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     36          	stcSysRunPara 	sSysRunPara;
     37          
     38          	if(GetSysRunPara((stcSysRunPara * )&sSysRunPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       GetSysRunPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD006             BEQ.N    ??GetDebugModelDisHig_0
     39          	{
     40          		if(sSysRunPara.DisHigFlg)
   \   0000000E   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD002             BEQ.N    ??GetDebugModelDisHig_0
     41          		{
     42          			return	sSysRunPara.DisHigFlg;
   \   00000016   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000001A   0xE000             B.N      ??GetDebugModelDisHig_1
     43          		}	
     44          	}
     45          
     46          	return	0;
   \                     ??GetDebugModelDisHig_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??GetDebugModelDisHig_1: (+1)
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
     47          }
     48          
     49          

   \                                 In section .text, align 2, keep-with-next
     50          uint8	GetNoAvgFlg(void)
     51          {
   \                     GetNoAvgFlg: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     52          	stcSysRunPara 	sSysRunPara;
     53          
     54          	if(GetSysRunPara((stcSysRunPara * )&sSysRunPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       GetSysRunPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD006             BEQ.N    ??GetNoAvgFlg_0
     55          	{
     56          		if(sSysRunPara.NoAvgFlg)
   \   0000000E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD002             BEQ.N    ??GetNoAvgFlg_0
     57          		{
     58          			return	sSysRunPara.NoAvgFlg;
   \   00000016   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000001A   0xE000             B.N      ??GetNoAvgFlg_1
     59          		}	
     60          	}
     61          
     62          	return	0;
   \                     ??GetNoAvgFlg_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??GetNoAvgFlg_1: (+1)
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
     63          }
     64          
     65          
     66          	
     67          
     68          //------------------------------------------------------------------------------
     69          //名    称：    void  GetDip10SecChg(int16	CurDip1Prs,int16	CurDip2Prs )
     70          //功    能：    测量状态变化判断
     71          //入口参数：    油尺1，油尺2当前测量值
     72          //出口参数：    
     73          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     74          void  GetDip10SecChg(int16	CurDip1Prs,int16	CurDip2Prs )
     75          {
   \                     GetDip10SecChg: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     76          	static	uint32	Times = 0;
     77          	static	int16	Dip1PrsBuf[12];
     78          	static	int16	Dip2PrsBuf[12];	
     79          	
     80          	Dip1PrsBuf[Times %12] = CurDip1Prs;
   \   00000002   0x220C             MOVS     R2,#+12
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable14
   \   00000008   0x681B             LDR      R3,[R3, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable14
   \   0000000E   0x6824             LDR      R4,[R4, #+0]
   \   00000010   0xFBB4 0xF4F2      UDIV     R4,R4,R2
   \   00000014   0xFB02 0x3214      MLS      R2,R2,R4,R3
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   0000001C   0xF823 0x0012      STRH     R0,[R3, R2, LSL #+1]
     81          	Dip2PrsBuf[Times %12] = CurDip2Prs;
   \   00000020   0x220C             MOVS     R2,#+12
   \   00000022   0x.... 0x....      LDR.W    R3,??DataTable14
   \   00000026   0x681B             LDR      R3,[R3, #+0]
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable14
   \   0000002C   0x6824             LDR      R4,[R4, #+0]
   \   0000002E   0xFBB4 0xF4F2      UDIV     R4,R4,R2
   \   00000032   0xFB02 0x3214      MLS      R2,R2,R4,R3
   \   00000036   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   0000003A   0xF823 0x1012      STRH     R1,[R3, R2, LSL #+1]
     82              
     83          
     84          	if(Times > 12)
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable14
   \   00000042   0x6812             LDR      R2,[R2, #+0]
   \   00000044   0x2A0D             CMP      R2,#+13
   \   00000046   0xD340             BCC.N    ??GetDip10SecChg_0
     85          	{
     86          		l_Dip1Frq10SecChg = Dip1PrsBuf[Times %12] - Dip1PrsBuf[(Times - 11)%12];		//差值			
   \   00000048   0x220C             MOVS     R2,#+12
   \   0000004A   0x.... 0x....      LDR.W    R3,??DataTable14
   \   0000004E   0x681B             LDR      R3,[R3, #+0]
   \   00000050   0x3B0B             SUBS     R3,R3,#+11
   \   00000052   0x240C             MOVS     R4,#+12
   \   00000054   0x.... 0x....      LDR.W    R5,??DataTable14
   \   00000058   0x682D             LDR      R5,[R5, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R6,??DataTable14
   \   0000005E   0x6836             LDR      R6,[R6, #+0]
   \   00000060   0xFBB6 0xF6F2      UDIV     R6,R6,R2
   \   00000064   0xFB02 0x5216      MLS      R2,R2,R6,R5
   \   00000068   0x.... 0x....      LDR.W    R5,??DataTable14_1
   \   0000006C   0xF835 0x2012      LDRH     R2,[R5, R2, LSL #+1]
   \   00000070   0xFBB3 0xF5F4      UDIV     R5,R3,R4
   \   00000074   0xFB04 0x3315      MLS      R3,R4,R5,R3
   \   00000078   0x.... 0x....      LDR.W    R4,??DataTable14_1
   \   0000007C   0xF834 0x3013      LDRH     R3,[R4, R3, LSL #+1]
   \   00000080   0x1AD2             SUBS     R2,R2,R3
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable14_3
   \   00000086   0x801A             STRH     R2,[R3, #+0]
     87          		l_Dip2Frq10SecChg = Dip2PrsBuf[Times %12] - Dip2PrsBuf[(Times - 11)%12];	
   \   00000088   0x220C             MOVS     R2,#+12
   \   0000008A   0x.... 0x....      LDR.W    R3,??DataTable14
   \   0000008E   0x681B             LDR      R3,[R3, #+0]
   \   00000090   0x3B0B             SUBS     R3,R3,#+11
   \   00000092   0x240C             MOVS     R4,#+12
   \   00000094   0x.... 0x....      LDR.W    R5,??DataTable14
   \   00000098   0x682D             LDR      R5,[R5, #+0]
   \   0000009A   0x.... 0x....      LDR.W    R6,??DataTable14
   \   0000009E   0x6836             LDR      R6,[R6, #+0]
   \   000000A0   0xFBB6 0xF6F2      UDIV     R6,R6,R2
   \   000000A4   0xFB02 0x5216      MLS      R2,R2,R6,R5
   \   000000A8   0x.... 0x....      LDR.W    R5,??DataTable14_2
   \   000000AC   0xF835 0x2012      LDRH     R2,[R5, R2, LSL #+1]
   \   000000B0   0xFBB3 0xF5F4      UDIV     R5,R3,R4
   \   000000B4   0xFB04 0x3315      MLS      R3,R4,R5,R3
   \   000000B8   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   000000BC   0xF834 0x3013      LDRH     R3,[R4, R3, LSL #+1]
   \   000000C0   0x1AD2             SUBS     R2,R2,R3
   \   000000C2   0x.... 0x....      LDR.W    R3,??DataTable14_4
   \   000000C6   0x801A             STRH     R2,[R3, #+0]
   \   000000C8   0xE007             B.N      ??GetDip10SecChg_1
     88          	}
     89          	else
     90          	{
     91          		l_Dip1Frq10SecChg  = 0;
   \                     ??GetDip10SecChg_0: (+1)
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x.... 0x....      LDR.W    R3,??DataTable14_3
   \   000000D0   0x801A             STRH     R2,[R3, #+0]
     92          		l_Dip2Frq10SecChg  = 0;				
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x.... 0x....      LDR.W    R3,??DataTable14_4
   \   000000D8   0x801A             STRH     R2,[R3, #+0]
     93          	}
     94          	
     95          	
     96          	Times++;  	
   \                     ??GetDip10SecChg_1: (+1)
   \   000000DA   0x.... 0x....      LDR.W    R2,??DataTable14
   \   000000DE   0x6812             LDR      R2,[R2, #+0]
   \   000000E0   0x1C52             ADDS     R2,R2,#+1
   \   000000E2   0x.... 0x....      LDR.W    R3,??DataTable14
   \   000000E6   0x601A             STR      R2,[R3, #+0]
     97          }
   \   000000E8   0xBC70             POP      {R4-R6}
   \   000000EA   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??Times:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Dip1PrsBuf:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     ??Dip2PrsBuf:
   \   00000000                      DS8 24
     98          
     99          #define		JUDGE_STATE_TIMES	15
    100          ////------------------------------------------------------------------------------
    101          ////名    称：    uint8  GetFrqChgState( void )
    102          ////功    能：    油尺状态判断
    103          ////入口参数：    无
    104          ////出口参数：    油量变化状态
    105          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    106          uint8  GetFrqChgState(int16	CurDip1Prs,int16	CurDip2Prs)
    107          {
   \                     GetFrqChgState: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    108              static      int32  UpTimes = 0,DownTimes = 0,StopTimes = 0,WaveTimes = 0;
    109              static      uint8	FreqChgState = FREQ_WAVE_STATE;
    110              
    111              GetDip10SecChg(CurDip1Prs,CurDip2Prs);							//取10秒变化值
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       GetDip10SecChg
    112                
    113              if(((l_Dip1Frq10SecChg > 30) && (l_Dip2Frq10SecChg > 30)))		//同升
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000016   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000001A   0x281F             CMP      R0,#+31
   \   0000001C   0xDB2D             BLT.N    ??GetFrqChgState_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000022   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000026   0x281F             CMP      R0,#+31
   \   00000028   0xDB27             BLT.N    ??GetFrqChgState_0
    114              {
    115                  UpTimes++;
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   00000036   0x6008             STR      R0,[R1, #+0]
    116                  DownTimes = WaveTimes = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    117                  //100815
    118                	StopTimes	= 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000052   0x6008             STR      R0,[R1, #+0]
    119          
    120                  if((UpTimes > JUDGE_STATE_TIMES))
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x2810             CMP      R0,#+16
   \   0000005C   0xF2C0 0x80B7      BLT.W    ??GetFrqChgState_1
    121                  {        
    122          	        StopTimes	= 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000066   0x6008             STR      R0,[R1, #+0]
    123                      UpTimes 	= 0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    124                      
    125                      FreqChgState = FREQ_UP_STATE;
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000076   0x7008             STRB     R0,[R1, #+0]
   \   00000078   0xE0A9             B.N      ??GetFrqChgState_1
    126                  }
    127              }
    128              else  if(((l_Dip1Frq10SecChg < -1) && (l_Dip2Frq10SecChg < -1)))		//同降	
   \                     ??GetFrqChgState_0: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   0000007E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000082   0xF110 0x0F01      CMN      R0,#+1
   \   00000086   0xDA3D             BGE.N    ??GetFrqChgState_2
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   0000008C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000090   0xF110 0x0F01      CMN      R0,#+1
   \   00000094   0xDA36             BGE.N    ??GetFrqChgState_2
    129              {
    130              	DownTimes++;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x1C40             ADDS     R0,R0,#+1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    131              	UpTimes = WaveTimes = 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   000000AA   0x6008             STR      R0,[R1, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    132          		//100815
    133          		if(abs(l_Dip1Frq10SecChg) > 30 || abs(l_Dip1Frq10SecChg) > 30)
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   000000BC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       abs
   \   000000C4   0x281F             CMP      R0,#+31
   \   000000C6   0xDA07             BGE.N    ??GetFrqChgState_3
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   000000CC   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000D0   0x.... 0x....      BL       abs
   \   000000D4   0x281F             CMP      R0,#+31
   \   000000D6   0xDB03             BLT.N    ??GetFrqChgState_4
    134          		{
    135          			StopTimes	= 0;
   \                     ??GetFrqChgState_3: (+1)
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   000000DE   0x6008             STR      R0,[R1, #+0]
    136          //			FreqChgState = FREQ_WAVE_STATE;
    137          		}
    138          		
    139                  if((DownTimes > JUDGE_STATE_TIMES) )
   \                     ??GetFrqChgState_4: (+1)
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x2810             CMP      R0,#+16
   \   000000E8   0xDB71             BLT.N    ??GetFrqChgState_1
    140                  {        
    141          	        StopTimes	= 0;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    142                      DownTimes 	= 0;
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000F8   0x6008             STR      R0,[R1, #+0]
    143                      
    144                      FreqChgState = FREQ_DOWN_STATE;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000100   0x7008             STRB     R0,[R1, #+0]
   \   00000102   0xE064             B.N      ??GetFrqChgState_1
    145                  }
    146              }
    147          	else  if(	(abs(l_Dip1Frq10SecChg) < 15 ) && 
    148          			 	(abs(l_Dip2Frq10SecChg) < 15 ))						//稳定
   \                     ??GetFrqChgState_2: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000108   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000010C   0x.... 0x....      BL       abs
   \   00000110   0x280F             CMP      R0,#+15
   \   00000112   0xDA26             BGE.N    ??GetFrqChgState_5
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000118   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000011C   0x.... 0x....      BL       abs
   \   00000120   0x280F             CMP      R0,#+15
   \   00000122   0xDA1E             BGE.N    ??GetFrqChgState_5
    149              {
    150                  StopTimes++;
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000130   0x6008             STR      R0,[R1, #+0]
    151                  UpTimes = DownTimes =  WaveTimes = 0;
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000138   0x6008             STR      R0,[R1, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000013E   0x6008             STR      R0,[R1, #+0]
   \   00000140   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   00000144   0x6008             STR      R0,[R1, #+0]
    152                          
    153                  if(StopTimes > JUDGE_STATE_TIMES * 2)
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   0000014A   0x6800             LDR      R0,[R0, #+0]
   \   0000014C   0x281F             CMP      R0,#+31
   \   0000014E   0xDB3E             BLT.N    ??GetFrqChgState_1
    154                  {
    155                      StopTimes = 0;
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000156   0x6008             STR      R0,[R1, #+0]
    156                      FreqChgState = FREQ_STOP_STATE;
   \   00000158   0x2005             MOVS     R0,#+5
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   0000015E   0x7008             STRB     R0,[R1, #+0]
   \   00000160   0xE035             B.N      ??GetFrqChgState_1
    157                  }
    158              }
    159              else
    160              {
    161                  UpTimes = DownTimes = StopTimes = 0;						
   \                     ??GetFrqChgState_5: (+1)
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000168   0x6008             STR      R0,[R1, #+0]
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000016E   0x6008             STR      R0,[R1, #+0]
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   00000174   0x6008             STR      R0,[R1, #+0]
    162          
    163                  if( abs(l_Dip1Frq10SecChg - l_Dip2Frq10SecChg) > 300 )		//大波动
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   0000017A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   00000182   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000186   0x1A40             SUBS     R0,R0,R1
   \   00000188   0x.... 0x....      BL       abs
   \   0000018C   0xF5B0 0x7F96      CMP      R0,#+300
   \   00000190   0xDD08             BLE.N    ??GetFrqChgState_6
    164                  {
    165          	        WaveTimes 	= JUDGE_STATE_TIMES;
   \   00000192   0x200F             MOVS     R0,#+15
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000198   0x6008             STR      R0,[R1, #+0]
    166          	        FreqChgState = FREQ_LAG_WAVE_STATE;
   \   0000019A   0x2003             MOVS     R0,#+3
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   000001A0   0x7008             STRB     R0,[R1, #+0]
   \   000001A2   0xE014             B.N      ??GetFrqChgState_1
    167          	    }
    168                  else
    169                  {
    170                  	if(WaveTimes > 0)
   \                     ??GetFrqChgState_6: (+1)
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   000001A8   0x6800             LDR      R0,[R0, #+0]
   \   000001AA   0x2801             CMP      R0,#+1
   \   000001AC   0xDB0B             BLT.N    ??GetFrqChgState_7
    171                      {
    172                          WaveTimes--;
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0x1E40             SUBS     R0,R0,#+1
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   000001BA   0x6008             STR      R0,[R1, #+0]
    173                         	FreqChgState = FREQ_LAG_WAVE_STATE;	
   \   000001BC   0x2003             MOVS     R0,#+3
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   000001C2   0x7008             STRB     R0,[R1, #+0]
   \   000001C4   0xE003             B.N      ??GetFrqChgState_1
    174                      }
    175                      else													//波动
    176                      {
    177                          FreqChgState = FREQ_WAVE_STATE;
   \                     ??GetFrqChgState_7: (+1)
   \   000001C6   0x2002             MOVS     R0,#+2
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   000001CC   0x7008             STRB     R0,[R1, #+0]
    178                      }
    179                  }	    
    180              }
    181              
    182              return	FreqChgState;
   \                     ??GetFrqChgState_1: (+1)
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable14_9
   \   000001D2   0x7800             LDRB     R0,[R0, #+0]
   \   000001D4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    183          }

   \                                 In section .bss, align 4
   \                     ??UpTimes:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??DownTimes:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??StopTimes:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??WaveTimes:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??FreqChgState:
   \   00000000   0x02               DC8 2
    184           
    185          ////------------------------------------------------------------------------------
    186          ////名    称：    void	GetDipPrsAvg(void)
    187          ////功    能：    取运算参数
    188          ////入口参数：    无
    189          ////出口参数：    无
    190          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    191          int16	GetDipPrsAvg(int16	CurDip1Prs,int16	CurDip2Prs)
    192          {
   \                     GetDipPrsAvg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    193          	int16	    CurDipAvgPrs = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    194          	static 	uint32	Times = 0;
    195          	int32	    PrsDef;
    196          
    197          //////////////////////////////////////////
    198          	if((GetMyDip1Err() & 0x03 )== 0x03)	  //油尺1故障
   \   00000008   0x.... 0x....      BL       GetMyDip1Err
   \   0000000C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD101             BNE.N    ??GetDipPrsAvg_0
    199          	{
    200          		CurDip1Prs = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0004             MOVS     R4,R0
    201          	}
    202          
    203          	if((GetMyDip2Err() & 0x03 )== 0x03)	  //油尺2故障
   \                     ??GetDipPrsAvg_0: (+1)
   \   00000018   0x.... 0x....      BL       GetMyDip2Err
   \   0000001C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD101             BNE.N    ??GetDipPrsAvg_1
    204          	{
    205          		CurDip2Prs = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0005             MOVS     R5,R0
    206          	}
    207          /////////////////////////////////////////////////	
    208          	if(CurDip1Prs > 10000 || CurDip1Prs < -500 )  //20120611传感器最大值
   \                     ??GetDipPrsAvg_1: (+1)
   \   00000028   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000002A   0xF242 0x7011      MOVW     R0,#+10001
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xDA03             BGE.N    ??GetDipPrsAvg_2
   \   00000032   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000034   0xF514 0x7FFA      CMN      R4,#+500
   \   00000038   0xDA01             BGE.N    ??GetDipPrsAvg_3
    209          	{
    210          		CurDip1Prs = 0;
   \                     ??GetDipPrsAvg_2: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x0004             MOVS     R4,R0
    211          	}
    212          	
    213          	if(CurDip2Prs > 10000 || CurDip2Prs < -500 )
   \                     ??GetDipPrsAvg_3: (+1)
   \   0000003E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000040   0xF242 0x7011      MOVW     R0,#+10001
   \   00000044   0x4285             CMP      R5,R0
   \   00000046   0xDA03             BGE.N    ??GetDipPrsAvg_4
   \   00000048   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000004A   0xF515 0x7FFA      CMN      R5,#+500
   \   0000004E   0xDA01             BGE.N    ??GetDipPrsAvg_5
    214          	{
    215          		CurDip2Prs = 0;
   \                     ??GetDipPrsAvg_4: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0005             MOVS     R5,R0
    216          	}
    217          
    218          	PrsDef = CurDip1Prs - CurDip2Prs;
   \                     ??GetDipPrsAvg_5: (+1)
   \   00000054   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000056   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000058   0x1B60             SUBS     R0,R4,R5
   \   0000005A   0x0007             MOVS     R7,R0
    219          
    220          	//printfcom0("\r\n %d,%d,%d",CurDip1Prs,CurDip2Prs,PrsDef);	
    221          	//if(CurDip1Prs > 1000 || CurDip2Prs >1000)   //根据K3所数据调整
    222          	if(CurDip1Prs > 1000 || CurDip2Prs >1000)
   \   0000005C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000005E   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   00000062   0xDC03             BGT.N    ??GetDipPrsAvg_6
   \   00000064   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000066   0xF5B5 0x7F7A      CMP      R5,#+1000
   \   0000006A   0xDD28             BLE.N    ??GetDipPrsAvg_7
    223          	{
    224          		if(fabs(PrsDef) > 2000 )
   \                     ??GetDipPrsAvg_6: (+1)
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       __aeabi_i2d
   \   00000072   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   00000076   0x2201             MOVS     R2,#+1
   \   00000078   0x.... 0x....      LDR.W    R3,??DataTable14_10  ;; 0x409f4000
   \   0000007C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000080   0xD819             BHI.N    ??GetDipPrsAvg_8
    225          		{
    226          			Times++;
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    227          			
    228          			if(Times > 120)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x2879             CMP      R0,#+121
   \   00000098   0xD311             BCC.N    ??GetDipPrsAvg_7
    229          			{
    230          				if(CurDip1Prs < 500)
   \   0000009A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000009C   0xF5B4 0x7FFA      CMP      R4,#+500
   \   000000A0   0xDA02             BGE.N    ??GetDipPrsAvg_9
    231          				{
    232          					CurDip1Prs = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x0004             MOVS     R4,R0
   \   000000A6   0xE00A             B.N      ??GetDipPrsAvg_7
    233          				}
    234          				else if(CurDip2Prs < 500)
   \                     ??GetDipPrsAvg_9: (+1)
   \   000000A8   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000000AA   0xF5B5 0x7FFA      CMP      R5,#+500
   \   000000AE   0xDA06             BGE.N    ??GetDipPrsAvg_7
    235          				{
    236          					CurDip2Prs = 0;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x0005             MOVS     R5,R0
   \   000000B4   0xE003             B.N      ??GetDipPrsAvg_7
    237          				}
    238          			}
    239          		}
    240          		else
    241          		{
    242          			Times = 0;
   \                     ??GetDipPrsAvg_8: (+1)
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    243          		}
    244          	}
    245          
    246          	
    247          	if(CurDip1Prs && CurDip2Prs  )							//求频率平均值
   \                     ??GetDipPrsAvg_7: (+1)
   \   000000BE   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000C0   0x2C00             CMP      R4,#+0
   \   000000C2   0xD00A             BEQ.N    ??GetDipPrsAvg_10
   \   000000C4   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000000C6   0x2D00             CMP      R5,#+0
   \   000000C8   0xD007             BEQ.N    ??GetDipPrsAvg_10
    248          	{
    249          		CurDipAvgPrs  =	(CurDip1Prs + CurDip2Prs) / 2;		//
   \   000000CA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000CC   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000000CE   0x1928             ADDS     R0,R5,R4
   \   000000D0   0x2102             MOVS     R1,#+2
   \   000000D2   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000D6   0x0006             MOVS     R6,R0
   \   000000D8   0xE008             B.N      ??GetDipPrsAvg_11
    250          	}
    251          	else if( CurDip1Prs )
   \                     ??GetDipPrsAvg_10: (+1)
   \   000000DA   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000DC   0x2C00             CMP      R4,#+0
   \   000000DE   0xD001             BEQ.N    ??GetDipPrsAvg_12
    252          	{
    253          		CurDipAvgPrs  = CurDip1Prs;
   \   000000E0   0x0026             MOVS     R6,R4
   \   000000E2   0xE003             B.N      ??GetDipPrsAvg_11
    254          	}
    255          	else if( CurDip2Prs )
   \                     ??GetDipPrsAvg_12: (+1)
   \   000000E4   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   000000E6   0x2D00             CMP      R5,#+0
   \   000000E8   0xD000             BEQ.N    ??GetDipPrsAvg_11
    256          	{
    257          		CurDipAvgPrs  = CurDip2Prs;
   \   000000EA   0x002E             MOVS     R6,R5
    258          	}
    259          	//printfcom0("\r\n11 %d,%d,%d",CurDip1Prs,CurDip2Prs,CurDipAvgPrs);
    260          	return	CurDipAvgPrs;
   \                     ??GetDipPrsAvg_11: (+1)
   \   000000EC   0x0030             MOVS     R0,R6
   \   000000EE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000F0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    261          }

   \                                 In section .bss, align 4
   \                     ??Times_1:
   \   00000000                      DS8 4
    262          //
    263          ////------------------------------------------------------------------------------
    264          ////名    称：    void	GetMathPara(void)
    265          ////功    能：    取输入的运算参数
    266          ////入口参数：    无
    267          ////出口参数：    无
    268          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    269          void	GetMathPara(void)
    270          {
   \                     GetMathPara: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    271          	int16	CurDip1Prs;
    272          	int16	CurDip2Prs;
    273          
    274          	CurDip1Prs	=	GetDip1Hig();
   \   00000002   0x.... 0x....      BL       GetDip1Hig
   \   00000006   0x0004             MOVS     R4,R0
    275          	CurDip2Prs	=	GetDip2Hig();
   \   00000008   0x.... 0x....      BL       GetDip2Hig
   \   0000000C   0x0005             MOVS     R5,R0
    276          
    277          	l_CurDipAvgPrs 	= GetDipPrsAvg(CurDip1Prs,CurDip2Prs);		//平均值
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      BL       GetDipPrsAvg
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable14_12
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
    278          	
    279          	l_PrsChgState 	= GetFrqChgState(CurDip1Prs,CurDip2Prs);	//波动状态	
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000028   0x.... 0x....      BL       GetFrqChgState
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable14_13
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    280          	
    281          //	printfcom0("\r\n油1压强：%d,油2压强：%d,平均压强：%d"
    282          //	    	,CurDip1Prs,CurDip2Prs,l_CurDipAvgPrs);	
    283          //
    284          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    285          
    286          //#define     FREQ_DOWN_STATE     1
    287          //#define     FREQ_WAVE_STATE     2
    288          //#define     FREQ_LAG_WAVE_STATE 3
    289          //#define     FREQ_UP_STATE       4           		//频率变化状态
    290          //#define     FREQ_STOP_STATE     5
    291          //
    292          //------------------------------------------------------------------------------
    293          //名    称：    int16    GetDipPrsMinVal(int16    Frq)
    294          //功    能：    取1分钟的平均值
    295          //入口参数：    无
    296          //出口参数：    无
    297          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    298          void    MinToMaxOder(int16 * Buf,uint32 BufSize)
    299          {
   \                     MinToMaxOder: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    300          	uint32	i,j;
    301          	int32	Tmp;
    302          	
    303          	for(i = 0;i < BufSize;i++)
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x002A             MOVS     R2,R5
   \                     ??MinToMaxOder_0: (+1)
   \   00000006   0x428A             CMP      R2,R1
   \   00000008   0xD21D             BCS.N    ??MinToMaxOder_1
    304          	{
    305          		for(j = 0;j <BufSize-i-1;j++)
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x002B             MOVS     R3,R5
   \                     ??MinToMaxOder_2: (+1)
   \   0000000E   0x1A8D             SUBS     R5,R1,R2
   \   00000010   0x1E6D             SUBS     R5,R5,#+1
   \   00000012   0x42AB             CMP      R3,R5
   \   00000014   0xD215             BCS.N    ??MinToMaxOder_3
    306          		{
    307          			if(Buf[j] > Buf[j + 1])
   \   00000016   0xEB10 0x0543      ADDS     R5,R0,R3, LSL #+1
   \   0000001A   0xF9B5 0x5002      LDRSH    R5,[R5, #+2]
   \   0000001E   0xF930 0x6013      LDRSH    R6,[R0, R3, LSL #+1]
   \   00000022   0x42B5             CMP      R5,R6
   \   00000024   0xDA0B             BGE.N    ??MinToMaxOder_4
    308          			{
    309          				Tmp = Buf[j + 1];
   \   00000026   0xEB10 0x0543      ADDS     R5,R0,R3, LSL #+1
   \   0000002A   0xF9B5 0x5002      LDRSH    R5,[R5, #+2]
   \   0000002E   0x002C             MOVS     R4,R5
    310          				Buf[j + 1] = Buf[j];
   \   00000030   0xF830 0x5013      LDRH     R5,[R0, R3, LSL #+1]
   \   00000034   0xEB10 0x0643      ADDS     R6,R0,R3, LSL #+1
   \   00000038   0x8075             STRH     R5,[R6, #+2]
    311          				Buf[j]  = Tmp;
   \   0000003A   0xF820 0x4013      STRH     R4,[R0, R3, LSL #+1]
    312          			}
    313          		}
   \                     ??MinToMaxOder_4: (+1)
   \   0000003E   0x1C5B             ADDS     R3,R3,#+1
   \   00000040   0xE7E5             B.N      ??MinToMaxOder_2
    314          	}
   \                     ??MinToMaxOder_3: (+1)
   \   00000042   0x1C52             ADDS     R2,R2,#+1
   \   00000044   0xE7DF             B.N      ??MinToMaxOder_0
    315          }
   \                     ??MinToMaxOder_1: (+1)
   \   00000046   0xBC70             POP      {R4-R6}
   \   00000048   0x4770             BX       LR               ;; return
    316          //
    317          //////------------------------------------------------------------------------------
    318          //////名    称：    int16    GetDipPrsMinVal(int16    Frq)
    319          //////功    能：    取1分钟的平均值
    320          //////入口参数：    无
    321          //////出口参数：    无
    322          //////------------------------------------------------------------------------------
    323          //int16    GetDipPrs30SecVal(int16   PrsAvg)
    324          //{
    325          //	static	uint32	Times	= 0;
    326          //	static	int32	Sum30 = 0;
    327          //	static	int32	Sum5 = 0;
    328          //	int16	PrsAvg30 = 0;
    329          //	int16	PrsAvg10 = 0;
    330          //	int16	PrsAvg5  = 0;
    331          //	int16 	MinutePrsAvg;
    332          //	uint8	PrsChgState;
    333          //	int32	AvgTmp;
    334          //		
    335          //	PrsChgState = GetFrqChgState(sCtrl.sRec.Myhig1,sCtrl.sRec.Myhig2);	//波动状态	
    336          //
    337          //	if(Times < 30)
    338          //	{
    339          //		Sum30 += PrsAvg;	
    340          //		if(Times < 5)
    341          //		{
    342          //			Sum5 += PrsAvg;
    343          //		}
    344          //		else
    345          //		{
    346          //			AvgTmp = Sum5 / 5; 
    347          //			Sum5  = Sum5 + PrsAvg - AvgTmp;			
    348          //		}
    349          //
    350          //		Times++;
    351          //		return	PrsAvg;
    352          //	}
    353          //	else
    354          //	{
    355          //		AvgTmp = Sum30 / 30;
    356          //		Sum30  = Sum30 + PrsAvg - AvgTmp;		
    357          //
    358          //		AvgTmp = Sum5 / 5; 
    359          //		Sum5  = Sum5 + PrsAvg - AvgTmp;		
    360          //	}
    361          //
    362          //	PrsAvg30 	= Sum30 / 30;
    363          //	PrsAvg5 	= Sum5 / 5;
    364          //	PrsAvg10 	=(PrsAvg5*2 + PrsAvg30) / 3;
    365          //
    366          //	if( (PrsChgState != FREQ_WAVE_STATE) && (PrsChgState != FREQ_LAG_WAVE_STATE))
    367          //	{
    368          //		if(PrsChgState == FREQ_STOP_STATE)
    369          //		{
    370          //			MinutePrsAvg = PrsAvg10;
    371          //		}
    372          //		else 
    373          //		{
    374          //			MinutePrsAvg = PrsAvg5;
    375          //		}
    376          //	}
    377          //	else
    378          //	{
    379          //		MinutePrsAvg = PrsAvg30;
    380          //	}
    381          //	
    382          //	Times++;
    383          //	return	MinutePrsAvg;
    384          //}
    385          //
    386          ////------------------------------------------------------------------------------
    387          ////名    称：    int16    GetDipPrsMinVal(int16    Frq)
    388          ////功    能：    取1分钟的平均值
    389          ////入口参数：    无
    390          ////出口参数：    无
    391          ////------------------------------------------------------------------------------
    392          //int16    GetDipPrs20SecVal(int16   PrsAvg)
    393          //{
    394          //	static	uint32	Times	= 0;
    395          //	static	int32	Sum	=  0;
    396          //	static	int16	PrsAvg20 = 0;
    397          //	static	int16	PrsAvg10 = 0;
    398          //	static	int16	PrsAvg5  = 0;
    399          //	static	int16	Buf20[20];
    400          //	int32			i;	
    401          //	int16			MinutePrsAvg;
    402          //	uint8			PrsChgState;
    403          //
    404          //	PrsChgState = GetPrsChgState();
    405          //		
    406          //	Buf20[Times % 20] = PrsAvg;
    407          //	
    408          //	if(Times < 29)
    409          //	{
    410          //		if(Times < 4)
    411          //		{
    412          //			Sum = 0;
    413          //			
    414          //			for(i = 0;i <= Times;i++)
    415          //			{
    416          //				Sum += Buf20[(Times + 20 - i) % 20];
    417          //			}
    418          //			
    419          //			PrsAvg20 = Sum / (Times + 1);
    420          //			PrsAvg10 = PrsAvg20;
    421          //			PrsAvg5  = PrsAvg20; 		
    422          //		}
    423          //		else if(Times < 9)
    424          //		{
    425          //			Sum = 0;
    426          //			for(i = 0;i <= Times;i++)
    427          //			{
    428          //				Sum += Buf20[(Times + 20 - i) % 20];
    429          //				
    430          //				if(i == 4)
    431          //				{
    432          //					PrsAvg5 = Sum / 5;		
    433          //				}
    434          //			}
    435          //			
    436          //			PrsAvg20 = Sum / (Times + 1);
    437          //			PrsAvg10 = PrsAvg20;
    438          //		}
    439          //		else
    440          //		{
    441          //			Sum = 0;
    442          //			for(i = 0;i <= Times;i++)
    443          //			{
    444          //				Sum += Buf20[(Times + 20 - i) % 20];
    445          //				
    446          //				if(i == 4)
    447          //				{
    448          //					PrsAvg5 = Sum / 5;		
    449          //				}
    450          //				if(i == 9)
    451          //				{
    452          //					PrsAvg10 = Sum / 10;		
    453          //				}				
    454          //			}
    455          //			
    456          //			PrsAvg20 = Sum / (Times + 1);
    457          //		}		
    458          //	}
    459          //	else
    460          //	{
    461          //		Sum = 0;
    462          //		for(i = 0;i < 20;i++ )
    463          //		{
    464          //			Sum += Buf20[(Times + 20 - i) % 20];
    465          //			
    466          //			if(i == 4)
    467          //			{
    468          //				PrsAvg5 = Sum / 5;		
    469          //			}
    470          //			if(i == 9)
    471          //			{
    472          //				PrsAvg10 = Sum / 10;		
    473          //			}
    474          //			if(i == 19)
    475          //			{
    476          //				PrsAvg20 = Sum / 20;
    477          //			}
    478          //		}
    479          //	}
    480          //	
    481          //	if( (PrsChgState != FREQ_WAVE_STATE) && (PrsChgState != FREQ_LAG_WAVE_STATE))
    482          //	{
    483          //		if(PrsChgState == FREQ_STOP_STATE)
    484          //		{
    485          //			MinutePrsAvg = PrsAvg10;
    486          //		}
    487          //		else 
    488          //		{
    489          //			MinutePrsAvg = PrsAvg5;
    490          //		}
    491          //	}
    492          //	else
    493          //	{
    494          //		MinutePrsAvg = PrsAvg20;
    495          //	}
    496          //	
    497          //	Times++;
    498          //	
    499          //	return	MinutePrsAvg;
    500          //}
    501          //

   \                                 In section .data, align 1
    502          uint8		l_ModelErrFlg 		= NO_ERROR;		//模型故障
   \                     l_ModelErrFlg:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
    503          uint8		l_DensityErrFlg 	= NO_ERROR;		//密度值未设
   \                     l_DensityErrFlg:
   \   00000000   0x01               DC8 1
    504          //

   \                                 In section .bss, align 4
    505          float  	 	l_ReviseHight;              		//修正高度
   \                     l_ReviseHight:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    506          float		l_Density;							//密度值
   \                     l_Density:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    507          int32		l_AddDipVal;						//增加的油量值
   \                     l_AddDipVal:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
    508          int8		l_SetParaFlg        = NO_ERROR;		//参数设置事件
   \                     l_SetParaFlg:
   \   00000000   0x01               DC8 1
    509          //
    510          ////------------------------------------------------------------------------------
    511          ////名    称：    void    GetMathModelPara(void)
    512          ////功    能：    取油量运算模型参数
    513          ////入口参数：    无
    514          ////出口参数：    无
    515          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    516          void    GetMathModelPara(stcModelComplex * sComplexModel,uint8 	ReCalFlg)
    517          {
   \                     GetMathModelPara: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    518          	static	uint32	Times = 0 ;								//运算次数
    519          	static	uint32	ErrTimes = 0 ;							//运算次数
    520          	
    521          	stcReviseHight	sReviseHight;
    522          	stcDensity		sDensity;								//燃油密度
    523          	stcAddDipVal	sAddDipVal;								//燃油密度
    524          //	uint32		i;
    525          //	//printfcom0("\r\n GetMathModelPara");
    526          	if(ReCalFlg == 1)										//如果重新计算，计数器清零
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D01             CMP      R5,#+1
   \   0000000C   0xD10C             BNE.N    ??GetMathModelPara_0
    527          	{
    528          		Times 		= 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000014   0x6008             STR      R0,[R1, #+0]
    529          		ErrTimes 	= 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable14_15
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    530          		l_SetParaFlg = ERROR;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable14_16
   \   00000024   0x7008             STRB     R0,[R1, #+0]
   \   00000026   0xE003             B.N      ??GetMathModelPara_1
    531          	}
    532          	else
    533          	{
    534          		l_SetParaFlg = NO_ERROR;
   \                     ??GetMathModelPara_0: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable14_16
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    535          	}
    536          
    537          	if(Times > 20) return ;	
   \                     ??GetMathModelPara_1: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable14_14
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2815             CMP      R0,#+21
   \   00000036   0xF080 0x8081      BCS.W    ??GetMathModelPara_2
    538          
    539            	if( GetOilBoxModel(sComplexModel))			
   \                     ??GetMathModelPara_3: (+1)
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       GetOilBoxModel
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD003             BEQ.N    ??GetMathModelPara_4
    540            	{		
    541            		l_ModelErrFlg = NO_ERROR;   
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x....             LDR.N    R1,??DataTable14_17
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0xE00E             B.N      ??GetMathModelPara_5
    542            	}
    543            	else
    544            	{	
    545            		ErrTimes++;		
   \                     ??GetMathModelPara_4: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable14_15
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable14_15
   \   00000054   0x6008             STR      R0,[R1, #+0]
    546            		
    547            		Times = ErrTimes / 10;
   \   00000056   0x....             LDR.N    R0,??DataTable14_15
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x210A             MOVS     R1,#+10
   \   0000005C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000060   0x....             LDR.N    R1,??DataTable14_14
   \   00000062   0x6008             STR      R0,[R1, #+0]
    548            		
    549            		l_ModelErrFlg = ERROR;							//油箱模型未设
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable14_17
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    550            	}
    551          	
    552          	
    553          
    554          			 
    555          	if(Times++ == 0 )										//如果读出的模型错误码，则需多次读取	
   \                     ??GetMathModelPara_5: (+1)
   \   0000006A   0x....             LDR.N    R0,??DataTable14_14
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x1C41             ADDS     R1,R0,#+1
   \   00000070   0x....             LDR.N    R2,??DataTable14_14
   \   00000072   0x6011             STR      R1,[R2, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD161             BNE.N    ??GetMathModelPara_6
    556            	{	  	
    557          	  	if( ReadDensity((stcDensity *) &sDensity)
    558          //	  		|| ReadDensity_Flsh((stcDensity *) &sDensity) 
    559          			)			//取密度  20120213
   \   00000078   0xA802             ADD      R0,SP,#+8
   \   0000007A   0x.... 0x....      BL       ReadDensity
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD01F             BEQ.N    ??GetMathModelPara_7
    560          	  	{
    561          	  		l_Density	=  ((float)sDensity.Density / 1000);
   \   00000082   0x9804             LDR      R0,[SP, #+16]
   \   00000084   0x.... 0x....      BL       __aeabi_ui2f
   \   00000088   0x....             LDR.N    R1,??DataTable14_18  ;; 0x447a0000
   \   0000008A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000008E   0x....             LDR.N    R1,??DataTable14_19
   \   00000090   0x6008             STR      R0,[R1, #+0]
    562          			
    563          	  		if(l_Density > 0.9 || l_Density < 0.75)
   \   00000092   0x....             LDR.N    R0,??DataTable14_19
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x....             LDR.N    R1,??DataTable14_20  ;; 0x3f666667
   \   00000098   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000009C   0xD906             BLS.N    ??GetMathModelPara_8
   \   0000009E   0x....             LDR.N    R0,??DataTable14_19
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF05F 0x517D      MOVS     R1,#+1061158912
   \   000000A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000AA   0xD206             BCS.N    ??GetMathModelPara_9
    564          	  		{	
    565          				l_DensityErrFlg = ERROR;
   \                     ??GetMathModelPara_8: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x....             LDR.N    R1,??DataTable14_21
   \   000000B0   0x7008             STRB     R0,[R1, #+0]
    566          				
    567          				l_Density = 0.845;
   \   000000B2   0x....             LDR.N    R0,??DataTable14_22  ;; 0x3f5851ec
   \   000000B4   0x....             LDR.N    R1,??DataTable14_19
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0xE009             B.N      ??GetMathModelPara_10
    568          				
    569          //				//printfcom0("\r\n读出密度值超限 l_Density = %f",l_Density);
    570          	  		}
    571          	  		else
    572          	  		{
    573          				l_DensityErrFlg = NO_ERROR;
   \                     ??GetMathModelPara_9: (+1)
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x....             LDR.N    R1,??DataTable14_21
   \   000000BE   0x7008             STRB     R0,[R1, #+0]
   \   000000C0   0xE005             B.N      ??GetMathModelPara_10
    574          	  		}
    575          	  	}
    576          	  	else
    577          	  	{
    578          	  		l_Density = 0.845;		
   \                     ??GetMathModelPara_7: (+1)
   \   000000C2   0x....             LDR.N    R0,??DataTable14_22  ;; 0x3f5851ec
   \   000000C4   0x....             LDR.N    R1,??DataTable14_19
   \   000000C6   0x6008             STR      R0,[R1, #+0]
    579          	  					
    580          			l_DensityErrFlg = ERROR;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR.N    R1,??DataTable14_21
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
    581          				
    582          			//PrintfDebug("\r\nl_DensityErrFlg = ERROR; l_Density = %f",l_Density);
    583          	  	}
    584          //	  	
    585          	  	if(ReadReviseHight((stcReviseHight *) &sReviseHight)
    586          	  		//||ReadReviseHight_Flsh((stcReviseHight *) &sReviseHight)
    587          		 )
   \                     ??GetMathModelPara_10: (+1)
   \   000000CE   0xA801             ADD      R0,SP,#+4
   \   000000D0   0x.... 0x....      BL       ReadReviseHight
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD015             BEQ.N    ??GetMathModelPara_11
    588          	  	{	
    589          	  		l_ReviseHight = sReviseHight.ReviseHight;
   \   000000D8   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \   000000DC   0x.... 0x....      BL       __aeabi_i2f
   \   000000E0   0x....             LDR.N    R1,??DataTable14_23
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    590          	  		
    591          	  		if((l_ReviseHight > 500) || (l_ReviseHight < -500))
   \   000000E4   0x....             LDR.N    R0,??DataTable14_23
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x....             LDR.N    R1,??DataTable14_24  ;; 0x43fa0001
   \   000000EA   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000EE   0xD905             BLS.N    ??GetMathModelPara_12
   \   000000F0   0x....             LDR.N    R0,??DataTable14_23
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x....             LDR.N    R1,??DataTable14_25  ;; 0xc3fa0000
   \   000000F6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000FA   0xD206             BCS.N    ??GetMathModelPara_13
    592          	  		{		
    593          //				//printfcom0("\r\n修正高度值超限 l_ReviseHight = %f",l_ReviseHight);
    594          	  		
    595          	  			l_ReviseHight = 0;
   \                     ??GetMathModelPara_12: (+1)
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x....             LDR.N    R1,??DataTable14_23
   \   00000100   0x6008             STR      R0,[R1, #+0]
   \   00000102   0xE002             B.N      ??GetMathModelPara_13
    596          	  		}
    597          	  	}
    598          	  	else
    599          	  	{
    600          	  		l_ReviseHight = 0;
   \                     ??GetMathModelPara_11: (+1)
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0x....             LDR.N    R1,??DataTable14_23
   \   00000108   0x6008             STR      R0,[R1, #+0]
    601          	  	}
    602          	  	
    603          //	 	printfcom0("\r\n l_ReviseHight %d, %d",(int16)l_ReviseHight,(int16)(l_Density*1000));
    604          	 									   
    605          	  	if(ReadAddDipVal((stcAddDipVal *) &sAddDipVal))
   \                     ??GetMathModelPara_13: (+1)
   \   0000010A   0x4668             MOV      R0,SP
   \   0000010C   0x.... 0x....      BL       ReadAddDipVal
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD010             BEQ.N    ??GetMathModelPara_14
    606          	  	{
    607          	  		l_AddDipVal = sAddDipVal.AddDipVal;
   \   00000114   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \   00000118   0x....             LDR.N    R1,??DataTable14_26
   \   0000011A   0x6008             STR      R0,[R1, #+0]
    608          	  		if((l_AddDipVal > 100) || (l_AddDipVal < -100))
   \   0000011C   0x....             LDR.N    R0,??DataTable14_26
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x2865             CMP      R0,#+101
   \   00000122   0xDA04             BGE.N    ??GetMathModelPara_15
   \   00000124   0x....             LDR.N    R0,??DataTable14_26
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xF110 0x0F64      CMN      R0,#+100
   \   0000012C   0xDA06             BGE.N    ??GetMathModelPara_6
    609          	  		{		
    610          				//printfcom0("\r\n 油量增加值超限 l_AddDipVal = %d",l_AddDipVal);	  		
    611          	  			l_AddDipVal = 0;
   \                     ??GetMathModelPara_15: (+1)
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x....             LDR.N    R1,??DataTable14_26
   \   00000132   0x6008             STR      R0,[R1, #+0]
   \   00000134   0xE002             B.N      ??GetMathModelPara_6
    612          	  		}
    613          	  	}
    614          	  	else
    615          	  	{
    616          	  		l_AddDipVal = 0;
   \                     ??GetMathModelPara_14: (+1)
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x....             LDR.N    R1,??DataTable14_26
   \   0000013A   0x6008             STR      R0,[R1, #+0]
    617          	  	}  	
    618            	}
    619          }
   \                     ??GetMathModelPara_6: (+1)
   \                     ??GetMathModelPara_2: (+1)
   \   0000013C   0xB009             ADD      SP,SP,#+36
   \   0000013E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??Times_2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??ErrTimes:
   \   00000000                      DS8 4
    620          
    621          ////------------------------------------------------------------------------------
    622          ////名    称：    int16    GetDensityVal(void)
    623          ////功    能：    返回密度值
    624          ////入口参数：    无
    625          ////出口参数：    无
    626          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    627          uint8	GetSetParaFlg(void)
    628          {
    629          	return	l_SetParaFlg;	
   \                     GetSetParaFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_16
   \   00000002   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x4770             BX       LR               ;; return
    630          }
    631          //
    632          ////------------------------------------------------------------------------------
    633          ////名    称：    int16    GetDensityVal(void)
    634          ////功    能：    返回密度值
    635          ////入口参数：    无
    636          ////出口参数：    无
    637          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    638          uint8	SetParaFlgTrue(void)
    639          {
    640          	return	l_SetParaFlg = NO_ERROR;	
   \                     SetParaFlgTrue: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable14_16
   \   00000004   0x7008             STRB     R0,[R1, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable14_16
   \   00000008   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
    641          }
    642          ////------------------------------------------------------------------------------
    643          ////名    称：    int16    GetDensityVal(void)
    644          ////功    能：    返回密度值
    645          ////入口参数：    无
    646          ////出口参数：    无
    647          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    648          uint16	GetDensityVal(void)
    649          {
   \                     GetDensityVal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    650          	return	1000*l_Density;	
   \   00000002   0x....             LDR.N    R0,??DataTable14_19
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x....             LDR.N    R0,??DataTable14_18  ;; 0x447a0000
   \   00000008   0x.... 0x....      BL       __aeabi_fmul
   \   0000000C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    651          }
    652          //
    653          ////------------------------------------------------------------------------------
    654          ////名    称：    int16    GetDensityVal(void)
    655          ////功    能：    返回密度值
    656          ////入口参数：    无
    657          ////出口参数：    无
    658          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    659          uint16	GetReviseHight(void)
    660          {
   \                     GetReviseHight: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    661          	return	l_ReviseHight;	
   \   00000002   0x....             LDR.N    R0,??DataTable14_23
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       __aeabi_f2iz
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    662          }
    663          //
    664          //
    665          ////------------------------------------------------------------------------------
    666          ////名    称：    int16    InitHXn5Model(int16    Frq)
    667          ////功    能：    油尺油量值计算方法
    668          ////入口参数：    无
    669          ////出口参数：    无
    670          ////------------------------------------------------------------------------------
    671          ////void    InitHXn5Model(void)
    672          ////{
    673          ///*
    674          //	stcModPot	sModPot[200] = 
    675          //	{
    676          //		285,227,
    677          //		569,495,
    678          //		857,766,
    679          //		897,805,
    680          //		949,855,
    681          //		1001,905,
    682          //		1052,955,
    683          //		1103,1004,
    684          //		1155,1054,  
    685          //		1208,1104,
    686          //		1262,1154,
    687          //		1314,1204,
    688          //		1370,1254,
    689          //		1421,1304,
    690          //		1473,1354,
    691          //		1525,1403,
    692          //		1575,1453,
    693          //		1625,1503,
    694          //		1678,1553,
    695          //		1730,1603,
    696          //		1780,1653,
    697          //		1832,1703,
    698          //		1886,1752,
    699          //		1936,1802,
    700          //		1986,1852,
    701          //		2036,1902,
    702          //		2086,1952,
    703          //		2137,2002,
    704          //		2189,2052,
    705          //		2241,2102,
    706          //		2293,2151,
    707          //		2345,2201,
    708          //		2395,2250,
    709          //		2446,2300,
    710          //		2496,2349,
    711          //		2546,2399,
    712          //		2596,2448,
    713          //		2646,2498,
    714          //		2696,2546,
    715          //		2748,2596,
    716          //		2805,2645,
    717          //		2853,2695,
    718          //		2899,2744,
    719          //		2954,2794,
    720          //		3001,2844,
    721          //		3054,2893,
    722          //		3100,2943,
    723          //		3147,2993,
    724          //		3194,3043,
    725          //		3244,3093,
    726          //		3292,3143,
    727          //		3340,3193,
    728          //		3390,3243,
    729          //		3440,3292,
    730          //		3495,3342,
    731          //		3543,3392,
    732          //		3594,3442,
    733          //		3645,3492,
    734          //		3689,3542,
    735          //		3737,3592,
    736          //		3787,3642,
    737          //		3838,3691,
    738          //		3882,3741,
    739          //		3931,3791,
    740          //		3977,3841,
    741          //		4027,3891,
    742          //		4078,3941,
    743          //		4125,3991,
    744          //		4170,4041,
    745          //		4215,4090,
    746          //		4263,4140,
    747          //		4317,4189,
    748          //		4360,4239,
    749          //		4410,4288,
    750          //		4454,4337,
    751          //		4504,4387,
    752          //		4551,4436,
    753          //		4600,4484,
    754          //		4642,4533,
    755          //		4691,4583,
    756          //		4738,4632,
    757          //		4785,4681,
    758          //		4830,4731,
    759          //		4875,4781,
    760          //		4920,4831,
    761          //		4964,4881,
    762          //		5012,4930,
    763          //		5057,4980,
    764          //		5107,5030,
    765          //		5146,5069,
    766          //		5187,5115,
    767          //		5243,5178,
    768          //		5287,5227,
    769          //		5332,5277,
    770          //		5379,5329,
    771          //		5425,5381,
    772          //		5470,5431,
    773          //		5512,5479,
    774          //		5559,5531,
    775          //		5565,5538,
    776          //		5618,5598,
    777          //		5669,5657,
    778          //		5720,5717,
    779          //		5774,5777,
    780          //		5827,5836,
    781          //		5879,5896,
    782          //		5894,5911,
    783          //		5997,5970,
    784          //		6103,6030,
    785          //		6207,6090,
    786          //		6312,6149,
    787          //		6413,6209,
    788          //		6512,6268,
    789          //		6608,6328,
    790          //		6692,6388,
    791          //		6773,6447,
    792          //		6854,6507,
    793          //		6935,6566,
    794          //		7016,6626,
    795          //		7069,6665,
    796          //		7138,6715,
    797          //		7206,6765,
    798          //		7275,6815,
    799          //		7343,6864,
    800          //		7412,6914,
    801          //		7480,6964,
    802          //		7549,7014,
    803          //		7617,7063,
    804          //		7686,7113,
    805          //		7755,7163,
    806          //		7823,7213,
    807          //		7892,7263,
    808          //		7960,7312,
    809          //		8029,7363,
    810          //		8097,7412,
    811          //		8166,7462,
    812          //		8234,7511,
    813          //		8303,7562,
    814          //		8371,7611,
    815          //		8440,7661,
    816          //		8508,7711,
    817          //		8577,7761,
    818          //		8645,7810,
    819          //		8714,7860,
    820          //		8782,7910,
    821          //		8851,7960,
    822          //		8919,8009,
    823          //		8988,8059,
    824          //		9056,8109,
    825          //		9125,8159,
    826          //		9193,8208,
    827          //		9262,8258,
    828          //		9331,8309,
    829          //		9399,8358,
    830          //		9468,8408,
    831          //		9536,8457,
    832          //		9605,8508,
    833          //		9673,8557,
    834          //		9742,8607,
    835          //		9810,8657,
    836          //		9879,8707,
    837          //		9947,8756,
    838          //		10016,8806,
    839          //		10084,8856,
    840          //		10153,8906,
    841          //		10221,8955,
    842          //		10294,9008,
    843          //		10357,9054,
    844          //		11612,9966,		
    845          //	};						
    846          //
    847          //	l_sModel.PotNum = 169;
    848          //	l_sModel.StartHight = 0;
    849          //	//l_sModel.PotNum = 87;
    850          //	//l_sModel.StartHight = 0;
    851          //	
    852          //	memcpy((uint8 *)l_sModel.sModPot,(uint8 *)sModPot,sizeof(l_sModel.sModPot));
    853          //*/
    854          ////}	
    855          //

   \                                 In section .data, align 1
    856          uint8			l_ModelParaErrFlg = NO_ERROR;
   \                     l_ModelParaErrFlg:
   \   00000000   0x01               DC8 1
    857          ////------------------------------------------------------------------------------
    858          ////名    称：    int16    GetDipMathVal(int16    Frq)
    859          ////功    能：    油尺油量值计算方法
    860          ////入口参数：    无
    861          ////出口参数：    无
    862          ////------------------------------------------------------------------------------
    863          //uint16    GetDipMathVal(int16   Prs)
    864          //{
    865          //  	float 		DipVal = 0;                  		
    866          //  	float 		Hight;                  			
    867          //	float		MinHig,MaxHig;	
    868          //	float		MinDip,MaxDip;					
    869          //	float		fTmp; 	
    870          //	float       StartHight;              			
    871          //
    872          //	uint32		ModelPotNum;
    873          //	uint32		i;
    874          //    
    875          //    uint32      calcpara;
    876          //	
    877          //	GetMathModelPara((stcModelComplex *)&l_sModel,0);		//模型参数	
    878          //
    879          //	ModelPotNum = l_sModel.PotNum;
    880          //	StartHight	= l_sModel.StartHight;
    881          ////	printfcom0("\r\n l_sModel.PotNum %d",l_sModel.PotNum);
    882          ////	for(i = 0; i <  ModelPotNum; i++)
    883          ////	{
    884          ////		printfcom0("\r\n %d,%d",l_sModel.sModPot[i].HigVal,l_sModel.sModPot[i].DipVal);	
    885          ////	}
    886          ////	ModelNum	= l_sModel.ModelNum;
    887          //	
    888          ////	memcpy((uint8 *)sModPot,(uint8 *)l_sModel.sModPot,sizeof(sModPot));	
    889          //
    890          //		//201509
    891          ////  	Hight = ((float)Prs)/(G * l_Density );			//计算高度
    892          //	Hight = Prs;      //输入直接为高度	
    893          //
    894          ////	Hight += ((float)StartHight / 10  + (float)l_ReviseHight / 10);	
    895          //	Hight += ((float)StartHight   + (float)l_ReviseHight );	
    896          //  	
    897          //	printfcom0("\r\n Hight %d,Prs %d",(int)Hight,(int)Prs);
    898          //
    899          //  	for(i = 1; i <  ModelPotNum; i++)					//计算点的个数
    900          //  	{
    901          //		////printfcom0("\r\n l_sModel");
    902          //		fTmp 	= 	l_sModel.sModPot[i-1].HigVal;
    903          /////		MinHig 	= fTmp / 10;
    904          //		MinHig 	= fTmp;
    905          //
    906          //		fTmp 	= 	l_sModel.sModPot[i].HigVal;
    907          ////		MaxHig 	= fTmp / 10;
    908          //		MaxHig 	= fTmp;
    909          //
    910          //		fTmp 	= 	l_sModel.sModPot[i-1].DipVal;
    911          //		MinDip 	= fTmp ;
    912          //
    913          //		fTmp 	= 	l_sModel.sModPot[i].DipVal;
    914          //		MaxDip 	= fTmp ;
    915          //		
    916          ////		printfcom0("\r\n l_sModel3 %d,%d,%d,%d Hight %d",(int)MinHig,(int)MaxHig,(int)MinDip,(int)MaxDip,(int16)Hight);
    917          //				
    918          //		if(MinHig == MaxHig)							//计算模型中出现两个相同点
    919          //		{
    920          //			l_ModelParaErrFlg = ERROR;
    921          //			
    922          //			//printfcom0("\r\n***油箱模型错误，MinHig == MaxHig");	
    923          //			
    924          //			DisplaySet(60,1,"E-OL");					//显示油量值
    925          //
    926          //			return	Hight;
    927          //		}
    928          //		else
    929          //		{
    930          //			l_ModelParaErrFlg = NO_ERROR;
    931          //		}
    932          //		////printfcom0("\r\n l_MinHig <= Hight");
    933          //		if(MinHig <= Hight && Hight < MaxHig)		//计算油量
    934          //		{	
    935          //			DipVal = MinDip + ((Hight - MinHig)  * ((MaxDip - MinDip)) / (MaxHig - MinHig));
    936          //
    937          //			break;
    938          //		}
    939          //	
    940          //		if(i == 1)									//小于最小高度
    941          //		{			
    942          //			if(Hight < MinHig)
    943          //			{
    944          //				DipVal = MinDip + ((Hight - MinHig)  * ((MaxDip - MinDip)) / (MaxHig - MinHig));
    945          //				
    946          //				break;
    947          //			}
    948          //		}
    949          //		
    950          //		if(i == (ModelPotNum - 1))					//大于最大高度
    951          //		{
    952          //			
    953          //			if(Hight >= MaxHig)
    954          //			{
    955          //				DipVal = MinDip + ((Hight - MinHig)  * ((MaxDip - MinDip)) / (MaxHig - MinHig));
    956          //			}
    957          //		}
    958          //	}
    959          //
    960          ////	printfcom0("\r\n DipVal = %d ",(int16)DipVal);
    961          //	DipVal += l_AddDipVal;
    962          //    
    963          //    calcpara = ReadCalcPara();
    964          //    DipVal *=  calcpara;
    965          //    
    966          //    DipVal /= 10000;
    967          ////	printfcom0("\r\n DipVal +l_AddDipVal = %d ",(int16)DipVal);
    968          //	
    969          //    return  DipVal;
    970          //}
    971          
    972          //------------------------------------------------------------------------------
    973          //名    称：    uint8	GetModelErrFlg(void)	
    974          //功    能：    计算油尺状态变化值
    975          //入口参数：    无
    976          //出口参数：    无
    977          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    978          uint8	GetModelErrFlg(void)	
    979          {
    980          	return	l_ModelErrFlg;
   \                     GetModelErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_17
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    981          }
    982          //
    983          //------------------------------------------------------------------------------
    984          //名    称：    uint8	GetDensityErrFlg(void)	
    985          //功    能：    计算油尺状态变化值
    986          //入口参数：    无
    987          //出口参数：    无
    988          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    989          uint8	GetDensityErrFlg(void)	
    990          {
    991          	return	l_DensityErrFlg;
   \                     GetDensityErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_21
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    992          }
    993          
    994          ////------------------------------------------------------------------------------
    995          //名    称：    uint8	GetModelParaErrFlg(void)	
    996          //功    能：    计算油尺状态变化值
    997          //入口参数：    无
    998          //出口参数：    无
    999          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1000          uint8	GetModelParaErrFlg(void)	
   1001          {
   1002          	return	l_ModelParaErrFlg;
   \                     GetModelParaErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_27
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   1003          }
   1004          //
   1005          //------------------------------------------------------------------------------
   1006          //名    称：    uint8	GetPrsChgState(void)
   1007          //功    能：    计算油尺状态变化值
   1008          //入口参数：    无
   1009          //出口参数：    无
   1010          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1011          uint8	GetPrsChgState(void)	
   1012          {
   1013          	return	 l_PrsChgState;
   \                     GetPrsChgState: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_13
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   1014          }
   1015          
   1016          
   1017          //extern	void	StoreFramToFlsh(void);
   1018          ////------------------------------------------------------------------------------
   1019          ////名    称：    void	ReCalPara(void)
   1020          ////功    能：    重新计算参数
   1021          ////入口参数：    无
   1022          ////出口参数：    无
   1023          ////------------------------------------------------------------------------------
   1024          //void	ReCalPara(uint8	Flg)	
   1025          //{
   1026          //	GetMathModelPara((stcModelComplex *)&l_sModel,1);			//模型参数		
   1027          //}
   1028          //
   1029          //
   1030          ////------------------------------------------------------------------------------
   1031          ////名    称：    void	GetDeviceParaStr(uint8 *Buf)
   1032          ////功    能：    重新计算参数
   1033          ////入口参数：    无
   1034          ////出口参数：    无
   1035          ////------------------------------------------------------------------------------
   1036          //void	GetDeviceParaStr(uint8 *Buf)
   1037          //{
   1038          //	uint32	strLen,AllStrLen = 0;
   1039          //	uint32	i;
   1040          //	
   1041          //	ReCalPara(1);
   1042          //	
   1043          //	//printfcom0("\r\n 设备运行参数如下!");
   1044          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 设备运行参数如下：");
   1045          //
   1046          //	AllStrLen += strLen;
   1047          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 密度：%f  ",l_Density);
   1048          //
   1049          //	AllStrLen += strLen;
   1050          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 高度：%f",l_ReviseHight);
   1051          //	
   1052          //	AllStrLen += strLen;
   1053          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 油箱模型编号：%d",GetOilBoxCod());
   1054          //	
   1055          //	AllStrLen += strLen;
   1056          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 油箱模型参数：");
   1057          //	
   1058          //	AllStrLen += strLen;
   1059          //	strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 模型编数：%d,模型点数：%d,起始高度：%d",
   1060          //											l_sModel.ModelNum,l_sModel.PotNum,l_sModel.StartHight);	
   1061          //	
   1062          //	DisplaySet(150,1,"MODE");								//显示油箱模型
   1063          //	DisplaySet(200,1,"C_%d",GetOilBoxCod());				//显示油箱模型
   1064          //	
   1065          //	DisplaySet(150,1,"DENS");
   1066          //	DisplaySet(200,1,"%d",(uint32)l_Density*1000);
   1067          //	
   1068          //	DisplaySet(150,1,"HIGH");
   1069          //	DisplaySet(200,1,"%d",(uint32)l_ReviseHight);
   1070          //	
   1071          //											
   1072          //	//油箱模型											
   1073          //	for(i = 0 ; i < l_sModel.PotNum;i++)							
   1074          //	{
   1075          //		AllStrLen += strLen;
   1076          //		strLen = sprintf((int8 *)&Buf[AllStrLen],"\r\n 高度：%d,油量：%d"
   1077          //						,l_sModel.sModPot[i].HigVal,l_sModel.sModPot[i].DipVal);
   1078          //	}
   1079          //}
   1080          //
   1081          //
   1082          ////------------------------------------------------------------------------------
   1083          ////名    称：    void	CalcDip(void)
   1084          ////功    能：    计算油尺油量
   1085          ////入口参数：    无
   1086          ////出口参数：    无
   1087          ////------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1088          void	CalcDip(void)							
   1089          {
   \                     CalcDip: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1090          	static	uint32		Time = 0;
   1091          	static	uint32		times = 0;
   1092          	int16	Avg30SecPrs;
   1093             
   1094          	if(GetSysTime() - Time > 100 )					
   \   00000002   0x.... 0x....      BL       GetSysTime
   \   00000006   0x....             LDR.N    R1,??DataTable14_28
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x2865             CMP      R0,#+101
   \   0000000E   0xD332             BCC.N    ??CalcDip_0
   1095          	{
   1096          		GetMathPara();											//取运算参数
   \   00000010   0x.... 0x....      BL       GetMathPara
   1097          		
   1098          		Avg30SecPrs = GetDipPrs30SecVal(l_CurDipAvgPrs);		//计算30S的平均值
   \   00000014   0x....             LDR.N    R0,??DataTable14_12
   \   00000016   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       GetDipPrs30SecVal
   \   0000001E   0x0004             MOVS     R4,R0
   1099          
   1100          		if(GetNoAvgFlg() || GetSetModelFlg())
   \   00000020   0x.... 0x....      BL       GetNoAvgFlg
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD103             BNE.N    ??CalcDip_1
   \   00000028   0x.... 0x....      BL       GetSetModelFlg
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD003             BEQ.N    ??CalcDip_2
   1101          		{
   1102          			Avg30SecPrs = l_CurDipAvgPrs;	
   \                     ??CalcDip_1: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable14_12
   \   00000032   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000036   0x0004             MOVS     R4,R0
   1103          		}
   1104          		
   1105          		
   1106          //			
   1107          ////	Avg10SecPrs = GetDipPrs20SecVal(l_CurDipAvgPrs);		//计算20S的平均值
   1108          												
   1109          		g_DipDisVal = GetDipMathVal(Avg30SecPrs);				//计算油量值
   \                     ??CalcDip_2: (+1)
   \   00000038   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       GetDipMathVal
   \   00000040   0x....             LDR.N    R1,??DataTable14_29
   \   00000042   0x6008             STR      R0,[R1, #+0]
   1110          		
   1111          		g_DipVal 	= g_DipDisVal;
   \   00000044   0x....             LDR.N    R0,??DataTable14_29
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable14_30
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   1112          //		
   1113          //		if(times++ %4 == 0)
   1114          //		{
   1115          //			if(Avg30SecPrs == 0)	
   1116          //				Avg30SecPrs = 1;
   1117          //			g_DipVal = Avg30SecPrs;
   1118          //		}
   1119          		if(GetDebugModelDisHig())								//
   \   0000004C   0x.... 0x....      BL       GetDebugModelDisHig
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD00C             BEQ.N    ??CalcDip_3
   1120          		{
   1121          			g_DipVal = l_CurDipAvgPrs;
   \   00000054   0x....             LDR.N    R0,??DataTable14_12
   \   00000056   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000005A   0x....             LDR.N    R1,??DataTable14_30
   \   0000005C   0x6008             STR      R0,[R1, #+0]
   1122          			
   1123          			printfcom0("\r\n g_DipVal,%d l_CurDipAvgPrs %d",g_DipVal,l_CurDipAvgPrs);	
   \   0000005E   0x....             LDR.N    R0,??DataTable14_12
   \   00000060   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000064   0x....             LDR.N    R0,??DataTable14_30
   \   00000066   0x6801             LDR      R1,[R0, #+0]
   \   00000068   0x....             LDR.N    R0,??DataTable14_31
   \   0000006A   0x.... 0x....      BL       printfcom0
   1124          		}
   1125          		
   1126          		Time = GetSysTime();
   \                     ??CalcDip_3: (+1)
   \   0000006E   0x.... 0x....      BL       GetSysTime
   \   00000072   0x....             LDR.N    R1,??DataTable14_28
   \   00000074   0x6008             STR      R0,[R1, #+0]
   1127          	}
   1128          }
   \                     ??CalcDip_0: (+1)
   \   00000076   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??Time:
   \   00000000                      DS8 4
   1129          
   1130          //extern	uint8	GetSelModelErrFlg(void);
   1131          //
   1132          #define		UN_SET_MATH_PARP				32					//没有进行参数设置
   1133          #define		UN_SET_OIL_BOX_MODEL		33					//没有设置油箱模型
   1134          #define		UN_SET_DENSITY					34					//没有设置密度
   1135          #define		SET_OIL_BOX_MODEL_ERR		35					//设置的油箱模型错误
   1136          ////-------------------------------------------------------------------------------------------------
   1137          ////函数名称:            	uint8  JudgeCalcError(void) 
   1138          ////函数功能:             对计算过程的参数进行正确性判断
   1139          ////入口参数:            
   1140          ////出口参数:             
   1141          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1142          uint8  JudgeCalcError(void) 
   1143          {
   \                     JudgeCalcError: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1144          //	static		uint32		Time = 0;
   1145          	uint8		ErrorType = RIGHT_DATA;
   \   00000002   0x24FF             MOVS     R4,#+255
   1146          	
   1147          //	if( GetSysTime() - Time > 100)	
   1148          	{
   1149          //		Time = GetSysTime();
   1150          
   1151          		if(GetDensityErrFlg() == NO_ERROR && GetModelErrFlg() == NO_ERROR )
   \   00000004   0x.... 0x....      BL       GetDensityErrFlg
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD10D             BNE.N    ??JudgeCalcError_0
   \   0000000C   0x.... 0x....      BL       GetModelErrFlg
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD109             BNE.N    ??JudgeCalcError_0
   1152          		{
   1153          			if( GetModelParaErrFlg()  == NO_ERROR)
   \   00000014   0x.... 0x....      BL       GetModelParaErrFlg
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD102             BNE.N    ??JudgeCalcError_1
   1154          			{
   1155          				ErrorType = RIGHT_DATA;
   \   0000001C   0x20FF             MOVS     R0,#+255
   \   0000001E   0x0004             MOVS     R4,R0
   \   00000020   0xE016             B.N      ??JudgeCalcError_2
   1156          			}
   1157          			else
   1158          			{
   1159          				ErrorType = SET_OIL_BOX_MODEL_ERR;				//模型错误
   \                     ??JudgeCalcError_1: (+1)
   \   00000022   0x2023             MOVS     R0,#+35
   \   00000024   0x0004             MOVS     R4,R0
   \   00000026   0xE013             B.N      ??JudgeCalcError_2
   1160          			}
   1161          		}
   1162          		else  if( ( GetModelErrFlg()  == ERROR) && (GetDensityErrFlg() ==  ERROR) )	//未设参数
   \                     ??JudgeCalcError_0: (+1)
   \   00000028   0x.... 0x....      BL       GetModelErrFlg
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD106             BNE.N    ??JudgeCalcError_3
   \   00000030   0x.... 0x....      BL       GetDensityErrFlg
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD102             BNE.N    ??JudgeCalcError_3
   1163          		{
   1164          			ErrorType = UN_SET_MATH_PARP;
   \   00000038   0x2020             MOVS     R0,#+32
   \   0000003A   0x0004             MOVS     R4,R0
   \   0000003C   0xE008             B.N      ??JudgeCalcError_2
   1165          		}
   1166          		else if( GetDensityErrFlg() == NO_ERROR)
   \                     ??JudgeCalcError_3: (+1)
   \   0000003E   0x.... 0x....      BL       GetDensityErrFlg
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD102             BNE.N    ??JudgeCalcError_4
   1167          		{
   1168          			ErrorType = UN_SET_OIL_BOX_MODEL;
   \   00000046   0x2021             MOVS     R0,#+33
   \   00000048   0x0004             MOVS     R4,R0
   \   0000004A   0xE001             B.N      ??JudgeCalcError_2
   1169          		}
   1170          		else
   1171          		{
   1172          			ErrorType = UN_SET_DENSITY;
   \                     ??JudgeCalcError_4: (+1)
   \   0000004C   0x2022             MOVS     R0,#+34
   \   0000004E   0x0004             MOVS     R4,R0
   1173          		}
   1174          	}
   1175          	
   1176          	return	ErrorType;
   \                     ??JudgeCalcError_2: (+1)
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   1177          }
   1178          
   1179          #define 	ADD_OIL_EVT				34
   1180          #define 	ADD_OIL_FIN_EVT		35
   1181          #define 	STOP_TO_WAVE			36
   1182          #define 	WAVE_TO_STOP			37
   1183          
   1184          //
   1185          #define     FREQ_DOWN_STATE     1
   1186          #define     FREQ_WAVE_STATE     2
   1187          #define     FREQ_LAG_WAVE_STATE 3
   1188          #define     FREQ_UP_STATE       4           		//频率变化状态
   1189          #define     FREQ_STOP_STATE     5
   1190          
   1191          //-------------------------------------------------------------------------------
   1192          //函数名称:        	uint8	JudgeOilEvt(void)
   1193          //函数功能:       	判断Flsh事件
   1194          //入口参数:        	无
   1195          //出口参数:      	无
   1196          //-------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1197          uint8	JudgeOilEvt(void)
   1198          {
   \                     JudgeOilEvt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1199          	static	uint32	C_Times = 0;
   1200          	static	uint8	l_PrsState,C_PrsState;
   1201          	uint8	EvtFlg = RIGHT_DATA;
   \   00000002   0x24FF             MOVS     R4,#+255
   1202          	
   1203          	EvtFlg = RIGHT_DATA;
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x0004             MOVS     R4,R0
   1204          	
   1205          	C_Times++;
   \   00000008   0x....             LDR.N    R0,??DataTable14_32
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable14_32
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1206          	
   1207          	C_PrsState = GetPrsChgState();
   \   00000012   0x.... 0x....      BL       GetPrsChgState
   \   00000016   0x....             LDR.N    R1,??DataTable14_33
   \   00000018   0x7008             STRB     R0,[R1, #+0]
   1208          	
   1209          	if(C_Times > 1)
   \   0000001A   0x....             LDR.N    R0,??DataTable14_32
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD333             BCC.N    ??JudgeOilEvt_0
   1210          	{
   1211          		if((C_PrsState != l_PrsState) && (C_PrsState == FREQ_UP_STATE))
   \   00000022   0x....             LDR.N    R0,??DataTable14_33
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable14_34
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD005             BEQ.N    ??JudgeOilEvt_1
   \   0000002E   0x....             LDR.N    R0,??DataTable14_33
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2804             CMP      R0,#+4
   \   00000034   0xD101             BNE.N    ??JudgeOilEvt_1
   1212          		{
   1213          			EvtFlg = ADD_OIL_EVT;
   \   00000036   0x2022             MOVS     R0,#+34
   \   00000038   0x0004             MOVS     R4,R0
   1214          		}
   1215          		
   1216          		if((C_PrsState != l_PrsState) && (l_PrsState == FREQ_UP_STATE))
   \                     ??JudgeOilEvt_1: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable14_33
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x....             LDR.N    R1,??DataTable14_34
   \   00000040   0x7809             LDRB     R1,[R1, #+0]
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD005             BEQ.N    ??JudgeOilEvt_2
   \   00000046   0x....             LDR.N    R0,??DataTable14_34
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2804             CMP      R0,#+4
   \   0000004C   0xD101             BNE.N    ??JudgeOilEvt_2
   1217          		{
   1218          			EvtFlg = ADD_OIL_FIN_EVT;
   \   0000004E   0x2023             MOVS     R0,#+35
   \   00000050   0x0004             MOVS     R4,R0
   1219          		}
   1220          		
   1221          		if((C_PrsState == FREQ_WAVE_STATE || C_PrsState == FREQ_LAG_WAVE_STATE) && (l_PrsState == FREQ_STOP_STATE))
   \                     ??JudgeOilEvt_2: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable14_33
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD003             BEQ.N    ??JudgeOilEvt_3
   \   0000005A   0x....             LDR.N    R0,??DataTable14_33
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x2803             CMP      R0,#+3
   \   00000060   0xD105             BNE.N    ??JudgeOilEvt_4
   \                     ??JudgeOilEvt_3: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable14_34
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2805             CMP      R0,#+5
   \   00000068   0xD101             BNE.N    ??JudgeOilEvt_4
   1222          		{
   1223          			EvtFlg = STOP_TO_WAVE;
   \   0000006A   0x2024             MOVS     R0,#+36
   \   0000006C   0x0004             MOVS     R4,R0
   1224          		}
   1225          
   1226          		if((C_PrsState == FREQ_STOP_STATE) && (l_PrsState == FREQ_WAVE_STATE || l_PrsState == FREQ_LAG_WAVE_STATE))
   \                     ??JudgeOilEvt_4: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable14_33
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2805             CMP      R0,#+5
   \   00000074   0xD109             BNE.N    ??JudgeOilEvt_0
   \   00000076   0x....             LDR.N    R0,??DataTable14_34
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x2802             CMP      R0,#+2
   \   0000007C   0xD003             BEQ.N    ??JudgeOilEvt_5
   \   0000007E   0x....             LDR.N    R0,??DataTable14_34
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x2803             CMP      R0,#+3
   \   00000084   0xD101             BNE.N    ??JudgeOilEvt_0
   1227          		{
   1228          			EvtFlg = WAVE_TO_STOP;
   \                     ??JudgeOilEvt_5: (+1)
   \   00000086   0x2025             MOVS     R0,#+37
   \   00000088   0x0004             MOVS     R4,R0
   1229          		}
   1230          	}
   1231          	
   1232          	l_PrsState = C_PrsState;
   \                     ??JudgeOilEvt_0: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable14_33
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x....             LDR.N    R1,??DataTable14_34
   \   00000090   0x7008             STRB     R0,[R1, #+0]
   1233          	
   1234          	return	EvtFlg;
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xBD10             POP      {R4,PC}          ;; return
   1235          }

   \                                 In section .bss, align 4
   \                     ??C_Times:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??l_PrsState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??C_PrsState:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     ??Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     ??Dip1PrsBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     ??Dip2PrsBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     l_Dip1Frq10SecChg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     l_Dip2Frq10SecChg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     ??UpTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     ??WaveTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     ??DownTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     ??StopTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     ??FreqChgState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x409F4000         DC32     0x409f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     ??Times_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     l_CurDipAvgPrs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     l_PrsChgState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     ??Times_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     ??ErrTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     l_SetParaFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     l_ModelErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     l_Density

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x3F666667         DC32     0x3f666667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     l_DensityErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x3F5851EC         DC32     0x3f5851ec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     l_ReviseHight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x43FA0001         DC32     0x43fa0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0xC3FA0000         DC32     0xc3fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     l_AddDipVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     l_ModelParaErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x........         DC32     ??Time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x........         DC32     g_DipDisVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x........         DC32     g_DipVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \   00000000   0x........         DC32     ??C_Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_33:
   \   00000000   0x........         DC32     ??C_PrsState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_34:
   \   00000000   0x........         DC32     ??l_PrsState

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012 g_DipVal,%d l_CurDipAvgPrs %d"
   \              0x20 0x67    
   \              0x5F 0x44    
   \              0x69 0x70    
   \              0x56 0x61    
   \              0x6C 0x2C    
   \              0x25 0x64    
   \              0x20 0x6C    
   \              0x5F 0x43    
   \              0x75 0x72    
   \              0x44 0x69    
   \              0x70 0x41    
   \              0x76 0x67    
   \              0x50 0x72    
   \              0x73 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CalcDip
         8   -> GetDebugModelDisHig
         8   -> GetDipMathVal
         8   -> GetDipPrs30SecVal
         8   -> GetMathPara
         8   -> GetNoAvgFlg
         8   -> GetSetModelFlg
         8   -> GetSysTime
         8   -> printfcom0
      16   GetDebugModelDisHig
        16   -> GetSysRunPara
       0   GetDensityErrFlg
       8   GetDensityVal
         8   -> __aeabi_f2iz
         8   -> __aeabi_fmul
      12   GetDip10SecChg
      24   GetDipPrsAvg
        24   -> GetMyDip1Err
        24   -> GetMyDip2Err
        24   -> __aeabi_i2d
        24 __aeabi_cdrcmple
      16   GetFrqChgState
        16   -> GetDip10SecChg
        16   -> abs
      48   GetMathModelPara
        48   -> GetOilBoxModel
        48   -> ReadAddDipVal
        48   -> ReadDensity
        48   -> ReadReviseHight
        48   -> __aeabi_fdiv
        48   -> __aeabi_i2f
        48   -> __aeabi_ui2f
        48 __aeabi_cfcmple
        48 __aeabi_cfrcmple
      16   GetMathPara
        16   -> GetDip1Hig
        16   -> GetDip2Hig
        16   -> GetDipPrsAvg
        16   -> GetFrqChgState
       0   GetModelErrFlg
       0   GetModelParaErrFlg
      16   GetNoAvgFlg
        16   -> GetSysRunPara
       0   GetPrsChgState
       8   GetReviseHight
         8   -> __aeabi_f2iz
       0   GetSetParaFlg
       8   JudgeCalcError
         8   -> GetDensityErrFlg
         8   -> GetModelErrFlg
         8   -> GetModelParaErrFlg
       8   JudgeOilEvt
         8   -> GetPrsChgState
      12   MinToMaxOder
       0   SetParaFlgTrue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_33
       4  ??DataTable14_34
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      36  ?_0
       1  C_PrsState
       4  C_Times
     120  CalcDip
      24  Dip1PrsBuf
      24  Dip2PrsBuf
       4  DownTimes
       4  ErrTimes
       1  FreqChgState
      32  GetDebugModelDisHig
       6  GetDensityErrFlg
      20  GetDensityVal
     236  GetDip10SecChg
     242  GetDipPrsAvg
     470  GetFrqChgState
     320  GetMathModelPara
      52  GetMathPara
       6  GetModelErrFlg
       6  GetModelParaErrFlg
      32  GetNoAvgFlg
       6  GetPrsChgState
      14  GetReviseHight
      10  GetSetParaFlg
      86  JudgeCalcError
     152  JudgeOilEvt
      74  MinToMaxOder
      16  SetParaFlgTrue
       4  StopTimes
       4  Time
       4  Times
       4  Times
       4  Times
       4  UpTimes
       4  WaveTimes
       4  l_AddDipVal
       2  l_CurDipAvgPrs
       4  l_Density
       1  l_DensityErrFlg
       2  l_Dip1Frq10SecChg
       2  l_Dip2Frq10SecChg
       2  l_DipStorePrs
       1  l_ModelErrFlg
       1  l_ModelParaErrFlg
       1  l_PrsChgState
       1  l_PrsState
       4  l_ReviseHight
       1  l_SetParaFlg

 
   110 bytes in section .bss
     6 bytes in section .data
    36 bytes in section .rodata
 2 040 bytes in section .text
 
 2 040 bytes of CODE  memory
    36 bytes of CONST memory
   116 bytes of DATA  memory

Errors: none
Warnings: 13
