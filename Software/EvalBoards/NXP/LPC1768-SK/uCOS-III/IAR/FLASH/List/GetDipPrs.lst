###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Oct/2017  18:40:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\MastConTask\GetDipPrs.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\MastConTask\GetDipPrs.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\GetDipPrs.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\GetDipPrs.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\MastConTask\GetDipPrs.c
      1          #include    "includes.h"  
      2          
      3          
      4          #define		COM_START_CODE		0x55
      5          #define		PC_ADDR				0xaa
      6          #define		HOST_ADDR			0x80
      7          #define		DIP1_ADDR			0xA1
      8          #define		DIP2_ADDR			0xA2
      9          #define		BROAD_ADDR			0xAF
     10          #define		SENSOR1_ADDR		0xB1
     11          #define		SENSOR2_ADDR		0xB2
     12          
     13          #define		GET_DIP_PRS			0xc0
     14          #define		SET_DIP_MOD			0xD7
     15          #define		SET_PRS_LIN			0xD6
     16          #define		OUT_SET_PRS			0xD4
     17          //
     18          ////------------------------------------------------------------------------
     19          //// 名    称：   void SentDatToDip1(uint8 *Buf,uint32	BufLen)
     20          //// 功    能：   将数据发送到油尺1 
     21          //// 入口参数：	Buf:数据缓冲区 BufLen:数据缓冲区数据长度 ；Typ:数据类型
     22          //// 出口参数：	无
     23          ////------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     24          void SentDatToDip1(uint8 *Buf,uint32 BufLen,uint8 Typ)		
     25          {
   \                     SentDatToDip1: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0015             MOVS     R5,R2
     26          	uint8	SourceAddr,TargetAddr,DatTyp,StartCode,FramLen;
     27          	uint8	BufTmp[50];
     28          	uint8	i = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
     29          	uint16	CrcCheck;
     30          	
     31          	DatTyp		=	Typ;
   \   0000000E   0xF88D 0x5001      STRB     R5,[SP, #+1]
     32          	StartCode 	= 	COM_START_CODE;
   \   00000012   0x2055             MOVS     R0,#+85
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
     33          	TargetAddr  = 	DIP1_ADDR;	
   \   00000018   0x20A1             MOVS     R0,#+161
   \   0000001A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     34          	SourceAddr 	=	HOST_ADDR;
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
     35          	FramLen		= 	BufLen + sizeof(DatTyp);
   \   00000024   0x1C60             ADDS     R0,R4,#+1
   \   00000026   0x4683             MOV      R11,R0
     36          	
     37          	BufTmp[i++] =	StartCode;
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xA902             ADD      R1,SP,#+8
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x5470             STRB     R0,[R6, R1]
   \   00000032   0x1C76             ADDS     R6,R6,#+1
     38          	BufTmp[i++] =	TargetAddr;
   \   00000034   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000038   0xA902             ADD      R1,SP,#+8
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x5470             STRB     R0,[R6, R1]
   \   0000003E   0x1C76             ADDS     R6,R6,#+1
     39          	BufTmp[i++] =	SourceAddr;
   \   00000040   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000044   0xA902             ADD      R1,SP,#+8
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x5470             STRB     R0,[R6, R1]
   \   0000004A   0x1C76             ADDS     R6,R6,#+1
     40          	BufTmp[i++] =	FramLen;
   \   0000004C   0xA802             ADD      R0,SP,#+8
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0xF806 0xB000      STRB     R11,[R6, R0]
   \   00000054   0x1C76             ADDS     R6,R6,#+1
     41          	BufTmp[i++] =	DatTyp;
   \   00000056   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x5470             STRB     R0,[R6, R1]
   \   00000060   0x1C76             ADDS     R6,R6,#+1
     42           	
     43          	memcpy(&BufTmp[i],Buf,BufLen);
   \   00000062   0xA802             ADD      R0,SP,#+8
   \   00000064   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   0x1837             ADDS     R7,R6,R0
   \   00000068   0x0022             MOVS     R2,R4
   \   0000006A   0x4651             MOV      R1,R10
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       __aeabi_memcpy
     44          							 
     45          	CrcCheck 	=	GetCrc16Check(BufTmp,BufLen + i);				//求校验和
   \   00000072   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000074   0x1931             ADDS     R1,R6,R4
   \   00000076   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000078   0xA802             ADD      R0,SP,#+8
   \   0000007A   0x.... 0x....      BL       GetCrc16Check
   \   0000007E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     46          	
     47          	memcpy(&BufTmp[BufLen + i],(uint8 *)&CrcCheck,sizeof(CrcCheck));	
   \   00000082   0x2702             MOVS     R7,#+2
   \   00000084   0xF10D 0x0804      ADD      R8,SP,#+4
   \   00000088   0xA802             ADD      R0,SP,#+8
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x1931             ADDS     R1,R6,R4
   \   0000008E   0xEB11 0x0900      ADDS     R9,R1,R0
   \   00000092   0x003A             MOVS     R2,R7
   \   00000094   0x4641             MOV      R1,R8
   \   00000096   0x4648             MOV      R0,R9
   \   00000098   0x.... 0x....      BL       __aeabi_memcpy
     48          
     49          	SendCOM0(BufTmp,i + BufLen + sizeof(CrcCheck));					//发送内容
   \   0000009C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009E   0x19A0             ADDS     R0,R4,R6
   \   000000A0   0x1C81             ADDS     R1,R0,#+2
   \   000000A2   0xA802             ADD      R0,SP,#+8
   \   000000A4   0x.... 0x....      BL       SendCOM0
     50          }
   \   000000A8   0xB00F             ADD      SP,SP,#+60
   \   000000AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     51          
     52          //------------------------------------------------------------------------
     53          // 名    称：   void SentDatToDip2(uint8 *Buf,uint32	BufLen)
     54          // 功    能：   将数据发送到测量装置2
     55          // 入口参数：	Buf:数据缓冲区 BufLen:数据缓冲区数据长度 ；Typ:数据类型
     56          // 出口参数：	无
     57          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     58          void SentDatToDip2(uint8 *Buf,uint32 BufLen,uint8 Typ)		
     59          {
   \                     SentDatToDip2: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0015             MOVS     R5,R2
     60          	uint8	SourceAddr,TargetAddr,DatTyp,StartCode,FramLen;
     61          	uint8	BufTmp[50];
     62          	uint8	i = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
     63          	uint16	CrcCheck;
     64          	
     65          	DatTyp		=	Typ;
   \   0000000E   0xF88D 0x5001      STRB     R5,[SP, #+1]
     66          	StartCode 	= 	COM_START_CODE;
   \   00000012   0x2055             MOVS     R0,#+85
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
     67          	TargetAddr  = 	DIP2_ADDR;	
   \   00000018   0x20A2             MOVS     R0,#+162
   \   0000001A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     68          	SourceAddr 	=	HOST_ADDR;
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
     69          	FramLen		= 	BufLen + sizeof(DatTyp);
   \   00000024   0x1C60             ADDS     R0,R4,#+1
   \   00000026   0x4683             MOV      R11,R0
     70          	
     71          	BufTmp[i++] =	StartCode;
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xA902             ADD      R1,SP,#+8
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x5470             STRB     R0,[R6, R1]
   \   00000032   0x1C76             ADDS     R6,R6,#+1
     72          	BufTmp[i++] =	TargetAddr;
   \   00000034   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000038   0xA902             ADD      R1,SP,#+8
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x5470             STRB     R0,[R6, R1]
   \   0000003E   0x1C76             ADDS     R6,R6,#+1
     73          	BufTmp[i++] =	SourceAddr;
   \   00000040   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000044   0xA902             ADD      R1,SP,#+8
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x5470             STRB     R0,[R6, R1]
   \   0000004A   0x1C76             ADDS     R6,R6,#+1
     74          	BufTmp[i++] =	FramLen;
   \   0000004C   0xA802             ADD      R0,SP,#+8
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0xF806 0xB000      STRB     R11,[R6, R0]
   \   00000054   0x1C76             ADDS     R6,R6,#+1
     75          	BufTmp[i++] =	DatTyp;
   \   00000056   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x5470             STRB     R0,[R6, R1]
   \   00000060   0x1C76             ADDS     R6,R6,#+1
     76          	
     77          	memcpy(&BufTmp[i],Buf,BufLen);
   \   00000062   0xA802             ADD      R0,SP,#+8
   \   00000064   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   0x1837             ADDS     R7,R6,R0
   \   00000068   0x0022             MOVS     R2,R4
   \   0000006A   0x4651             MOV      R1,R10
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       __aeabi_memcpy
     78          	
     79          	CrcCheck 	=	GetCrc16Check(BufTmp,BufLen + i);				//求校验和
   \   00000072   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000074   0x1931             ADDS     R1,R6,R4
   \   00000076   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000078   0xA802             ADD      R0,SP,#+8
   \   0000007A   0x.... 0x....      BL       GetCrc16Check
   \   0000007E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     80          	
     81          	memcpy(&BufTmp[BufLen + i],(uint8 *)&CrcCheck,sizeof(CrcCheck));	
   \   00000082   0x2702             MOVS     R7,#+2
   \   00000084   0xF10D 0x0804      ADD      R8,SP,#+4
   \   00000088   0xA802             ADD      R0,SP,#+8
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x1931             ADDS     R1,R6,R4
   \   0000008E   0xEB11 0x0900      ADDS     R9,R1,R0
   \   00000092   0x003A             MOVS     R2,R7
   \   00000094   0x4641             MOV      R1,R8
   \   00000096   0x4648             MOV      R0,R9
   \   00000098   0x.... 0x....      BL       __aeabi_memcpy
     82          
     83          	SendCOM0(BufTmp,i + BufLen + sizeof(CrcCheck));					//发送内容
   \   0000009C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009E   0x19A0             ADDS     R0,R4,R6
   \   000000A0   0x1C81             ADDS     R1,R0,#+2
   \   000000A2   0xA802             ADD      R0,SP,#+8
   \   000000A4   0x.... 0x....      BL       SendCOM0
     84          }
   \   000000A8   0xB00F             ADD      SP,SP,#+60
   \   000000AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     85          //
     86          ////------------------------------------------------------------------------
     87          //// 名    称：   void SentDatToDip2(uint8 *Buf,uint32	BufLen)
     88          //// 功    能：   向测量装置广播信息
     89          //// 入口参数：	Buf:数据缓冲区 BufLen:数据缓冲区数据长度 ；Typ:数据类型
     90          //// 出口参数：	无
     91          ////------------------------------------------------------------------------
     92          //void SendBroadInfo(uint8 *Buf,uint32	BufLen,uint8 Typ)		
     93          //{
     94          //	uint8	SourceAddr,TargetAddr,DatTyp,StartCode,FramLen;
     95          //	uint8	BufTmp[50];
     96          //	uint8	i = 0;
     97          //	uint16	CrcCheck;
     98          //	
     99          //	DatTyp		=	Typ;
    100          //	StartCode 	= 	COM_START_CODE;
    101          //	TargetAddr  = 	BROAD_ADDR;	
    102          //	SourceAddr 	=	HOST_ADDR;
    103          //	FramLen		= 	BufLen + sizeof(DatTyp);
    104          //	
    105          //	BufTmp[i++] =	StartCode;
    106          //	BufTmp[i++] =	TargetAddr;
    107          //	BufTmp[i++] =	SourceAddr;
    108          //	BufTmp[i++] =	FramLen;
    109          //	BufTmp[i++] =	DatTyp;
    110          //	
    111          //	memcpy(&BufTmp[i],Buf,BufLen);
    112          //	
    113          //	CrcCheck 	=	GetCrc16Check(BufTmp,BufLen + i);				
    114          //	
    115          //	memcpy(&BufTmp[BufLen + i],(uint8 *)&CrcCheck,sizeof(CrcCheck));	
    116          //
    117          //	SendCOM0(BufTmp,i + BufLen + sizeof(CrcCheck));					
    118          //}
    119          //
    120          ////------------------------------------------------------------------------
    121          //// 名    称：   void    BroadDipCod(void)	
    122          //// 功    能：   将取数据指令发送到测量装置
    123          //// 入口参数：	无
    124          //// 出口参数：	无
    125          ////------------------------------------------------------------------------
    126          //void    BroadDipCod(void)
    127          //{
    128          //	static	uint32	Time = 0;
    129          //	static	uint32	Times = 0;
    130          //
    131          //
    132          ////2014	if(GetPlugFlg()== PLUG_IN_CARD)
    133          //	{
    134          //		if( GetSysTime() - Time > 100 && Times < 1800)
    135          //		{
    136          //			uint8	BufTmp[100] = {0};
    137          //			
    138          //			memcpy(&BufTmp[1],(uint8 *)&g_DipVal,sizeof(g_DipVal));	
    139          //			
    140          //			SendBroadInfo(BufTmp,sizeof(g_DipVal) + 1,GET_DIP_PRS);	
    141          //			
    142          //			Time = GetSysTime();											//读当前值
    143          //			
    144          //			Times++;
    145          //		}
    146          //	}
    147          ////2014	else
    148          //	{
    149          //		Times = 0;
    150          //	}
    151          //}
    152          //

   \                                 In section .data, align 1
    153          uint8 	l_DipComErrFlg = NO_ERROR;
   \                     l_DipComErrFlg:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
    154          uint8	l_Dip1ComErrFlg =NO_ERROR;
   \                     l_Dip1ComErrFlg:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
    155          uint8	l_Dip2ComErrFlg =NO_ERROR;
   \                     l_Dip2ComErrFlg:
   \   00000000   0x01               DC8 1
    156          extern	uint8  GetDip1Data(uint8	*Buf,uint32	RecBufLen);
    157          extern	uint8  GetDip2Data(uint8	*Buf,uint32	RecBufLen);
    158          ////------------------------------------------------------------------------
    159          //// 名    称：   uint16  SendReadCOM1DataCod(void)	
    160          //// 功    能：   将取数据指令发送到测量装置
    161          //// 入口参数：	无
    162          //// 出口参数：	无
    163          ////------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    164          void    SendReadCOM0DataCod(void)
    165          {
   \                     SendReadCOM0DataCod: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    166          	static	uint32	Time = 0;
    167          	static	uint8	SendTimes = 0;
    168          	static	uint8	Flg=0;
    169          	static	uint8	Err1Times = 0;
    170          	static	uint8	Err2Times = 0;
    171          
    172          	uint8	BufTmp[50] = {0};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x2134             MOVS     R1,#+52
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    173          	uint32	RecBufLen;
    174          	
    175          	BufTmp[0] = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    176          
    177          	if(Flg == 0)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable22
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD177             BNE.N    ??SendReadCOM0DataCod_0
    178          	{
    179          		if(SendTimes == 0)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD11A             BNE.N    ??SendReadCOM0DataCod_1
    180          		{
    181          			memcpy(&BufTmp[1],(uint8 *)&g_DipDisVal,sizeof(g_DipVal));	
   \   00000026   0x2504             MOVS     R5,#+4
   \   00000028   0x.... 0x....      LDR.W    R6,??DataTable22_2
   \   0000002C   0xF10D 0x0701      ADD      R7,SP,#+1
   \   00000030   0x002A             MOVS     R2,R5
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x0038             MOVS     R0,R7
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy
    182          			SentDatToDip1(BufTmp,sizeof(g_DipVal) + 1,GET_DIP_PRS);	
   \   0000003A   0x22C0             MOVS     R2,#+192
   \   0000003C   0x2105             MOVS     R1,#+5
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x.... 0x....      BL       SentDatToDip1
    183          			
    184          			Time = GetSysTime();
   \   00000044   0x.... 0x....      BL       GetSysTime
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    185          			SendTimes++;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    186          		}
    187          
    188          		if(GetSysTime() - Time > 20)
   \                     ??SendReadCOM0DataCod_1: (+1)
   \   0000005C   0x.... 0x....      BL       GetSysTime
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x1A40             SUBS     R0,R0,R1
   \   00000068   0x2815             CMP      R0,#+21
   \   0000006A   0xF0C0 0x80C4      BCC.W    ??SendReadCOM0DataCod_2
    189          		{
    190          			RecBufLen = ReadCOM0(BufTmp,sizeof(BufTmp));
   \   0000006E   0x2132             MOVS     R1,#+50
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       ReadCOM0
   \   00000076   0x0004             MOVS     R4,R0
    191           						   
    192          			if( RecBufLen )
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD030             BEQ.N    ??SendReadCOM0DataCod_3
    193          			{
    194          				if(GetDip1Data(BufTmp,RecBufLen))						
   \   0000007C   0x0021             MOVS     R1,R4
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x.... 0x....      BL       GetDip1Data
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD014             BEQ.N    ??SendReadCOM0DataCod_4
    195          				{
    196          					l_DipComErrFlg = NO_ERROR;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
    197          					l_Dip1ComErrFlg = NO_ERROR;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    198          					SendTimes = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000009E   0x7008             STRB     R0,[R1, #+0]
    199          					Err1Times  = 0;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
    200          					Flg = 1;				
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
   \   000000B0   0xE0A1             B.N      ??SendReadCOM0DataCod_2
    201          				}
    202          				else
    203          				{
    204          				   Flg = 0;
   \                     ??SendReadCOM0DataCod_4: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000000B8   0x7008             STRB     R0,[R1, #+0]
    205          
    206          				   if(GetSysTime() - Time > 50)
   \   000000BA   0x.... 0x....      BL       GetSysTime
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   000000C2   0x6809             LDR      R1,[R1, #+0]
   \   000000C4   0x1A40             SUBS     R0,R0,R1
   \   000000C6   0x2833             CMP      R0,#+51
   \   000000C8   0xF0C0 0x8095      BCC.W    ??SendReadCOM0DataCod_2
    207          				   {
    208          				   		SendTimes = 0;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
    209          				   		Flg = 1;	
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
   \   000000DC   0xE08B             B.N      ??SendReadCOM0DataCod_2
    210          				   }
    211          				}
    212          			}
    213          			else
    214          			{
    215          				if(Err1Times++ > 5)
   \                     ??SendReadCOM0DataCod_3: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable22_6
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0x1C41             ADDS     R1,R0,#+1
   \   000000E6   0x.... 0x....      LDR.W    R2,??DataTable22_6
   \   000000EA   0x7011             STRB     R1,[R2, #+0]
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x2806             CMP      R0,#+6
   \   000000F0   0xDB03             BLT.N    ??SendReadCOM0DataCod_5
    216          				{
    217          					l_Dip1ComErrFlg= ERROR;		
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
    218          				}
    219          
    220          				SendTimes = 0;
   \                     ??SendReadCOM0DataCod_5: (+1)
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   00000100   0x7008             STRB     R0,[R1, #+0]
    221          				Flg = 1;	
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000108   0x7008             STRB     R0,[R1, #+0]
   \   0000010A   0xE074             B.N      ??SendReadCOM0DataCod_2
    222          			}
    223          		}
    224          	}
    225          	else
    226          	{
    227          		if(SendTimes == 0)
   \                     ??SendReadCOM0DataCod_0: (+1)
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000110   0x7800             LDRB     R0,[R0, #+0]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD11A             BNE.N    ??SendReadCOM0DataCod_6
    228          		{
    229          			memcpy(&BufTmp[1],(uint8 *)&g_DipDisVal,sizeof(g_DipVal));	
   \   00000116   0x2504             MOVS     R5,#+4
   \   00000118   0x.... 0x....      LDR.W    R6,??DataTable22_2
   \   0000011C   0xF10D 0x0701      ADD      R7,SP,#+1
   \   00000120   0x002A             MOVS     R2,R5
   \   00000122   0x0031             MOVS     R1,R6
   \   00000124   0x0038             MOVS     R0,R7
   \   00000126   0x.... 0x....      BL       __aeabi_memcpy
    230          			SentDatToDip2(BufTmp,sizeof(g_DipVal) + 1,GET_DIP_PRS);	
   \   0000012A   0x22C0             MOVS     R2,#+192
   \   0000012C   0x2105             MOVS     R1,#+5
   \   0000012E   0x4668             MOV      R0,SP
   \   00000130   0x.... 0x....      BL       SentDatToDip2
    231          			
    232          			Time = GetSysTime();
   \   00000134   0x.... 0x....      BL       GetSysTime
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000013C   0x6008             STR      R0,[R1, #+0]
    233          			SendTimes++;
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000142   0x7800             LDRB     R0,[R0, #+0]
   \   00000144   0x1C40             ADDS     R0,R0,#+1
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000014A   0x7008             STRB     R0,[R1, #+0]
    234          		}
    235          
    236          		if(GetSysTime() - Time > 20)
   \                     ??SendReadCOM0DataCod_6: (+1)
   \   0000014C   0x.... 0x....      BL       GetSysTime
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000154   0x6809             LDR      R1,[R1, #+0]
   \   00000156   0x1A40             SUBS     R0,R0,R1
   \   00000158   0x2815             CMP      R0,#+21
   \   0000015A   0xD34C             BCC.N    ??SendReadCOM0DataCod_2
    237          		{
    238          			RecBufLen = ReadCOM0(BufTmp,sizeof(BufTmp));
   \   0000015C   0x2132             MOVS     R1,#+50
   \   0000015E   0x4668             MOV      R0,SP
   \   00000160   0x.... 0x....      BL       ReadCOM0
   \   00000164   0x0004             MOVS     R4,R0
    239           
    240          			if( RecBufLen )
   \   00000166   0x2C00             CMP      R4,#+0
   \   00000168   0xD02F             BEQ.N    ??SendReadCOM0DataCod_7
    241          			{
    242          				if(GetDip2Data(BufTmp,RecBufLen))						
   \   0000016A   0x0021             MOVS     R1,R4
   \   0000016C   0x4668             MOV      R0,SP
   \   0000016E   0x.... 0x....      BL       GetDip2Data
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD014             BEQ.N    ??SendReadCOM0DataCod_8
    243          				{
    244          					l_DipComErrFlg  = NO_ERROR;
   \   00000176   0x2001             MOVS     R0,#+1
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   0000017C   0x7008             STRB     R0,[R1, #+0]
    245          					l_Dip2ComErrFlg = NO_ERROR;
   \   0000017E   0x2001             MOVS     R0,#+1
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable22_7
   \   00000184   0x7008             STRB     R0,[R1, #+0]
    246          					SendTimes = 0;
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000018C   0x7008             STRB     R0,[R1, #+0]
    247          					Flg = 0;
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000194   0x7008             STRB     R0,[R1, #+0]
    248          					Err2Times = 0;
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   0000019C   0x7008             STRB     R0,[R1, #+0]
   \   0000019E   0xE02A             B.N      ??SendReadCOM0DataCod_2
    249          
    250          				}
    251          				else
    252          				{
    253          				   Flg = 1;
   \                     ??SendReadCOM0DataCod_8: (+1)
   \   000001A0   0x2001             MOVS     R0,#+1
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000001A6   0x7008             STRB     R0,[R1, #+0]
    254          				   if(GetSysTime() - Time > 50)
   \   000001A8   0x.... 0x....      BL       GetSysTime
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   000001B0   0x6809             LDR      R1,[R1, #+0]
   \   000001B2   0x1A40             SUBS     R0,R0,R1
   \   000001B4   0x2833             CMP      R0,#+51
   \   000001B6   0xD31E             BCC.N    ??SendReadCOM0DataCod_2
    255          				   {
    256          				   		SendTimes = 0;
   \   000001B8   0x2000             MOVS     R0,#+0
   \   000001BA   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
    257          				   		Flg = 0;	
   \   000001C0   0x2000             MOVS     R0,#+0
   \   000001C2   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000001C6   0x7008             STRB     R0,[R1, #+0]
   \   000001C8   0xE015             B.N      ??SendReadCOM0DataCod_2
    258          				   }
    259          				}
    260          			}
    261          			else
    262          			{
    263          				if(Err2Times++ > 5)
   \                     ??SendReadCOM0DataCod_7: (+1)
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable22_8
   \   000001CE   0x7800             LDRB     R0,[R0, #+0]
   \   000001D0   0x1C41             ADDS     R1,R0,#+1
   \   000001D2   0x.... 0x....      LDR.W    R2,??DataTable22_8
   \   000001D6   0x7011             STRB     R1,[R2, #+0]
   \   000001D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DA   0x2806             CMP      R0,#+6
   \   000001DC   0xDB03             BLT.N    ??SendReadCOM0DataCod_9
    264          				{
    265          					l_Dip2ComErrFlg = ERROR;
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x.... 0x....      LDR.W    R1,??DataTable22_7
   \   000001E4   0x7008             STRB     R0,[R1, #+0]
    266          				}
    267          				SendTimes = 0;
   \                     ??SendReadCOM0DataCod_9: (+1)
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   000001EC   0x7008             STRB     R0,[R1, #+0]
    268          				Flg = 0;
   \   000001EE   0x2000             MOVS     R0,#+0
   \   000001F0   0x.... 0x....      LDR.W    R1,??DataTable22
   \   000001F4   0x7008             STRB     R0,[R1, #+0]
    269          			}
    270          		}		
    271          	}
    272          
    273          	if(l_Dip1ComErrFlg == ERROR && l_Dip2ComErrFlg == ERROR)
   \                     ??SendReadCOM0DataCod_2: (+1)
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000001FA   0x7800             LDRB     R0,[R0, #+0]
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xD108             BNE.N    ??SendReadCOM0DataCod_10
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable22_7
   \   00000204   0x7800             LDRB     R0,[R0, #+0]
   \   00000206   0x2800             CMP      R0,#+0
   \   00000208   0xD103             BNE.N    ??SendReadCOM0DataCod_10
    274          	{
    275          		l_DipComErrFlg = ERROR;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   00000210   0x7008             STRB     R0,[R1, #+0]
    276          	}
    277          }
   \                     ??SendReadCOM0DataCod_10: (+1)
   \   00000212   0xB00D             ADD      SP,SP,#+52
   \   00000214   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??Time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??SendTimes:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Flg:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Err1Times:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Err2Times:
   \   00000000                      DS8 1
    278          

   \                                 In section .text, align 2, keep-with-next
    279          uint8	GetDip1ComErrFlg(void)
    280          {
    281          	return  l_Dip1ComErrFlg;
   \                     GetDip1ComErrFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    282          }
    283          

   \                                 In section .text, align 2, keep-with-next
    284          uint8	GetDip2ComErrFlg(void)
    285          {
    286          	return  l_Dip2ComErrFlg;
   \                     GetDip2ComErrFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_7
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    287          }
    288          
    289          ////------------------------------------------------------------------------
    290          //// 名    称：   void    SetPrs2Line(stcPrsLine * sPrsLine)	
    291          //// 功    能：   将取数据指令发送到测量装置
    292          //// 入口参数：	无
    293          //// 出口参数：	无
    294          ////------------------------------------------------------------------------
    295          //void    SentPrs1Line(stcPrsLine * sPrsLine)
    296          //{
    297          //	uint8	BufTmp[50] = {0};
    298          //
    299          //	BufTmp[0] = 0;
    300          //
    301          //	memcpy(&BufTmp[1],(uint8 *)&g_DipDisVal,sizeof(g_DipVal));	
    302          //
    303          //	SentDatToDip1(BufTmp,sizeof(g_DipVal) + 1,SET_DIP_MOD);	
    304          //	
    305          //	DelayX10ms(5);
    306          //
    307          //	memcpy(BufTmp,(uint8 *)sPrsLine,sizeof(stcPrsLine));
    308          //	
    309          //	SentDatToDip1(BufTmp,sizeof(stcPrsLine),SET_PRS_LIN);		
    310          //}
    311          //
    312          //
    313          ////------------------------------------------------------------------------
    314          //// 名    称：   void    SetPrs2Line(stcPrsLine * sPrsLine)	
    315          //// 功    能：   将取数据指令发送到测量装置
    316          //// 入口参数：	无
    317          //// 出口参数：	无
    318          ////------------------------------------------------------------------------
    319          //void    SentOutSetPrs(void)
    320          //{
    321          //	uint8	BufTmp[50] = {0};
    322          //
    323          //	BufTmp[0] = 0;
    324          //
    325          //	memcpy(&BufTmp[1],(uint8 *)&g_DipDisVal,sizeof(g_DipVal));	
    326          //
    327          //	SendBroadInfo(BufTmp,sizeof(g_DipVal) + 1,OUT_SET_PRS);
    328          //}
    329          //
    330          //
    331          ////------------------------------------------------------------------------
    332          //// 名    称：   void    SetPrs2Line(stcPrsLine * sPrsLine)	
    333          //// 功    能：   将取数据指令发送到测量装置
    334          //// 入口参数：	无
    335          //// 出口参数：	无
    336          ////------------------------------------------------------------------------
    337          //void    SentPrs2Line(stcPrsLine * sPrsLine)
    338          //{
    339          //	uint8	BufTmp[50] = {0};
    340          //
    341          //	BufTmp[0] = 0;
    342          //
    343          //	memcpy(&BufTmp[1],(uint8 *)&g_DipDisVal,sizeof(g_DipVal));	
    344          //
    345          //	SentDatToDip2(BufTmp,sizeof(g_DipVal) + 1,SET_DIP_MOD);	
    346          //	
    347          //	DelayX10ms(5);
    348          //	
    349          //	memcpy(BufTmp,(uint8 *)sPrsLine,sizeof(stcPrsLine));
    350          //	
    351          //	SentDatToDip2(BufTmp,sizeof(stcPrsLine),SET_PRS_LIN);		
    352          //}
    353          //
    354          //
    355          #define		DIP_REC_FRAM_LEN		15									//测量装置返回的数据帧长
    356          #define		INF_START_POS			4

   \                                 In section .bss, align 2
    357          int16		l_Dip1Prs = 0;							
   \                     l_Dip1Prs:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    358          int16		l_Dip2Prs = 0;
   \                     l_Dip2Prs:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    359          int8		l_Dip1Tmp = 0;
   \                     l_Dip1Tmp:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    360          int8		l_Dip2Tmp = 0;
   \                     l_Dip2Tmp:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    361          uint8		l_Dip1ErrCod = 0;
   \                     l_Dip1ErrCod:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    362          uint8		l_Dip2ErrCod = 0;
   \                     l_Dip2ErrCod:
   \   00000000                      DS8 1
    363          
    364          
    365          
    366          
    367          

   \                                 In section .bss, align 2
    368          unsigned short 	l_dip1den;
   \                     l_dip1den:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    369          unsigned short 	l_dip2den;
   \                     l_dip2den:
   \   00000000                      DS8 2
    370          

   \                                 In section .text, align 2, keep-with-next
    371          uint8	GetMyDip1Tmp(void)	  		//油尺1温度
    372          {
    373          	return	l_Dip1Tmp;
   \                     GetMyDip1Tmp: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_9
   \   00000004   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x4770             BX       LR               ;; return
    374          }
    375          
    376          

   \                                 In section .text, align 2, keep-with-next
    377          uint8	GetMyDip2Tmp(void)			//油尺2温度
    378          {
    379          	return	l_Dip2Tmp;
   \                     GetMyDip2Tmp: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_10
   \   00000004   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x4770             BX       LR               ;; return
    380          }
    381          		

   \                                 In section .text, align 2, keep-with-next
    382          uint8  GetMyDip1Err(void)
    383          {
    384          	return	l_Dip1ErrCod;
   \                     GetMyDip1Err: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    385          }
    386          		

   \                                 In section .text, align 2, keep-with-next
    387          uint8  GetMyDip2Err(void)
    388          {
    389          	return	l_Dip2ErrCod;
   \                     GetMyDip2Err: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    390          }
    391          
    392          		

   \                                 In section .text, align 2, keep-with-next
    393          uint16  GetMyDip1Den(void)
    394          {
    395          	return	l_dip1den;
   \                     GetMyDip1Den: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          uint16  GetMyDip2Den(void)
    399          {
    400          	return	l_dip2den;
   \                     GetMyDip2Den: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    401          }		
    402          
    403          //

   \                                 In section .data, align 1
    404          uint8		l_Dip1DataErrFlg = NO_ERROR;
   \                     l_Dip1DataErrFlg:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
    405          uint8		l_Dip2DataErrFlg = NO_ERROR;
   \                     l_Dip2DataErrFlg:
   \   00000000   0x01               DC8 1
    406          ////----------------------------------------------------------------------------
    407          //// 名    称：   uint8  GetDip1Data(uint8	*Buf,uint32	RecBufLen)
    408          //// 功    能：   取油尺1数据
    409          //// 入口参数：   无
    410          //// 出口参数：   无
    411          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    412          uint8  GetDip1Data(uint8	*Buf,uint32	RecBufLen)
    413          {
   \                     GetDip1Data: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    414              uint16			CrcCheck;
    415              uint16			i;
    416              uint8			StartCode,TargetAddr,SourceAddr,DataLen;
    417              static			uint32	ErrTimes = 0;
    418              static			uint32	Times = 0;
    419          	        
    420          	StartCode 	= COM_START_CODE;
   \   0000000A   0x2055             MOVS     R0,#+85
   \   0000000C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    421          	TargetAddr 	= HOST_ADDR;
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
    422          	SourceAddr 	= DIP1_ADDR;
   \   00000016   0x20A1             MOVS     R0,#+161
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    423          	DataLen		= DIP_REC_FRAM_LEN - INF_START_POS - 2;
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    424          	
    425          	Times++;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable22_15
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable22_15
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    426          
    427          	if(RecBufLen >= DIP_REC_FRAM_LEN)
   \   00000030   0x2D0F             CMP      R5,#+15
   \   00000032   0xD376             BCC.N    ??GetDip1Data_0
    428              {
    429          	    for(i = 0; i <= (RecBufLen - DIP_REC_FRAM_LEN);i++)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x0006             MOVS     R6,R0
   \                     ??GetDip1Data_1: (+1)
   \   00000038   0xF1B5 0x000F      SUBS     R0,R5,#+15
   \   0000003C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003E   0x42B0             CMP      R0,R6
   \   00000040   0xD366             BCC.N    ??GetDip1Data_2
    430          	    {  	
    431          			if(	(Buf[i] == StartCode )		&&		
    432          				(Buf[i + 1] == TargetAddr) 	&& 
    433          				(Buf[i + 2] == SourceAddr) 	&& 
    434          				(Buf[i + 3] == DataLen)  )
   \   00000042   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000044   0x5D30             LDRB     R0,[R6, R4]
   \   00000046   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD15E             BNE.N    ??GetDip1Data_3
   \   0000004E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000050   0x1930             ADDS     R0,R6,R4
   \   00000052   0x7840             LDRB     R0,[R0, #+1]
   \   00000054   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD157             BNE.N    ??GetDip1Data_3
   \   0000005C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005E   0x1930             ADDS     R0,R6,R4
   \   00000060   0x7880             LDRB     R0,[R0, #+2]
   \   00000062   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD150             BNE.N    ??GetDip1Data_3
   \   0000006A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006C   0x1930             ADDS     R0,R6,R4
   \   0000006E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000070   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD149             BNE.N    ??GetDip1Data_3
    435          			{					
    436          				memcpy((uint8 *)&CrcCheck,&Buf[i+DIP_REC_FRAM_LEN - 2],sizeof(CrcCheck));
   \   00000078   0x2702             MOVS     R7,#+2
   \   0000007A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   0x1930             ADDS     R0,R6,R4
   \   0000007E   0xF110 0x080D      ADDS     R8,R0,#+13
   \   00000082   0xF10D 0x0904      ADD      R9,SP,#+4
   \   00000086   0x003A             MOVS     R2,R7
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x4648             MOV      R0,R9
   \   0000008C   0x.... 0x....      BL       __aeabi_memcpy
    437          				
    438          				if(CrcCheck == GetCrc16Check(&Buf[i],DIP_REC_FRAM_LEN - 2))
   \   00000090   0x210D             MOVS     R1,#+13
   \   00000092   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000094   0x1930             ADDS     R0,R6,R4
   \   00000096   0x.... 0x....      BL       GetCrc16Check
   \   0000009A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000009E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A0   0x4281             CMP      R1,R0
   \   000000A2   0xD133             BNE.N    ??GetDip1Data_3
    439          				{
    440          					memcpy((uint8 *)&l_Dip1Prs,&Buf[i+INF_START_POS],sizeof(l_Dip1Prs));
   \   000000A4   0x2702             MOVS     R7,#+2
   \   000000A6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A8   0x1930             ADDS     R0,R6,R4
   \   000000AA   0x1D00             ADDS     R0,R0,#+4
   \   000000AC   0x9003             STR      R0,[SP, #+12]
   \   000000AE   0x.... 0x....      LDR.W    R8,??DataTable22_16
   \   000000B2   0x003A             MOVS     R2,R7
   \   000000B4   0x9903             LDR      R1,[SP, #+12]
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x.... 0x....      BL       __aeabi_memcpy
    441          					memcpy((uint8 *)&l_Dip1Tmp,&Buf[i+INF_START_POS+sizeof(l_Dip1Prs)],
    442          									sizeof(l_Dip1Tmp));
   \   000000BC   0xF05F 0x0801      MOVS     R8,#+1
   \   000000C0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C2   0x1930             ADDS     R0,R6,R4
   \   000000C4   0x1D80             ADDS     R0,R0,#+6
   \   000000C6   0x9002             STR      R0,[SP, #+8]
   \   000000C8   0x.... 0x....      LDR.W    R9,??DataTable22_9
   \   000000CC   0x4642             MOV      R2,R8
   \   000000CE   0x9902             LDR      R1,[SP, #+8]
   \   000000D0   0x4648             MOV      R0,R9
   \   000000D2   0x.... 0x....      BL       __aeabi_memcpy
    443          					memcpy((uint8 *)&l_Dip1ErrCod,
    444          							&Buf[i+INF_START_POS+sizeof(l_Dip1Prs)+sizeof(l_Dip1Tmp)],sizeof(l_Dip1ErrCod));
   \   000000D6   0xF05F 0x0901      MOVS     R9,#+1
   \   000000DA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000DC   0x1930             ADDS     R0,R6,R4
   \   000000DE   0xF110 0x0A07      ADDS     R10,R0,#+7
   \   000000E2   0x.... 0x....      LDR.W    R11,??DataTable22_11
   \   000000E6   0x464A             MOV      R2,R9
   \   000000E8   0x4651             MOV      R1,R10
   \   000000EA   0x4658             MOV      R0,R11
   \   000000EC   0x.... 0x....      BL       __aeabi_memcpy
    445          					
    446          					l_Dip1DataErrFlg = NO_ERROR;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable22_17
   \   000000F6   0x7008             STRB     R0,[R1, #+0]
    447          					
    448          					Times = 0;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable22_15
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    449          					ErrTimes = 0;						
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable22_18
   \   00000106   0x6008             STR      R0,[R1, #+0]
    450          					return 1;
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0xE01B             B.N      ??GetDip1Data_4
    451          				}
    452          			}
    453          	    }
   \                     ??GetDip1Data_3: (+1)
   \   0000010C   0x1C76             ADDS     R6,R6,#+1
   \   0000010E   0xE793             B.N      ??GetDip1Data_1
    454          	    
    455          	    if(Times > 5)
   \                     ??GetDip1Data_2: (+1)
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable22_15
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x2806             CMP      R0,#+6
   \   00000118   0xD303             BCC.N    ??GetDip1Data_0
    456          	    {
    457          	    	l_Dip1Prs = 0;
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable22_16
   \   00000120   0x8008             STRH     R0,[R1, #+0]
    458          	    }
    459              }    
    460          	
    461          	ErrTimes++;
   \                     ??GetDip1Data_0: (+1)
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable22_18
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0x1C40             ADDS     R0,R0,#+1
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable22_18
   \   0000012E   0x6008             STR      R0,[R1, #+0]
    462          	
    463          	if(ErrTimes > 10)
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable22_18
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0x280B             CMP      R0,#+11
   \   00000138   0xD303             BCC.N    ??GetDip1Data_5
    464          	{
    465          		l_Dip1DataErrFlg = ERROR;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable22_17
   \   00000140   0x7008             STRB     R0,[R1, #+0]
    466          	}
    467          	
    468              return	0;												//接收失败
   \                     ??GetDip1Data_5: (+1)
   \   00000142   0x2000             MOVS     R0,#+0
   \                     ??GetDip1Data_4: (+1)
   \   00000144   0xB005             ADD      SP,SP,#+20
   \   00000146   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    469          }

   \                                 In section .bss, align 4
   \                     ??ErrTimes:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times:
   \   00000000                      DS8 4
    470          
    471          ////----------------------------------------------------------------------------
    472          //// 名    称：   uint8  GetDip2Data(uint8	*Buf,uint32	RecBufLen)
    473          //// 功    能：   取油尺2数据
    474          //// 入口参数：   无
    475          //// 出口参数：   无
    476          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    477          uint8  GetDip2Data(uint8	*Buf,uint32	RecBufLen)
    478          {
   \                     GetDip2Data: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    479              uint16		CrcCheck;
    480              uint16		i;
    481              uint8		StartCode,TargetAddr,SourceAddr,DataLen;
    482              static		uint32	ErrTimes = 0;
    483              static	uint32	Times = 0;
    484              
    485          	StartCode 	= COM_START_CODE;
   \   0000000A   0x2055             MOVS     R0,#+85
   \   0000000C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    486          	TargetAddr 	= HOST_ADDR;
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
    487          	SourceAddr 	= DIP2_ADDR;
   \   00000016   0x20A2             MOVS     R0,#+162
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    488          	DataLen		= DIP_REC_FRAM_LEN - INF_START_POS - 2;
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    489          	
    490          	Times++;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable22_19
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable22_19
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    491          
    492              if(RecBufLen >= DIP_REC_FRAM_LEN)
   \   00000030   0x2D0F             CMP      R5,#+15
   \   00000032   0xD374             BCC.N    ??GetDip2Data_0
    493              {    
    494          	    for(i = 0; i <= (RecBufLen - DIP_REC_FRAM_LEN);i++)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x0006             MOVS     R6,R0
   \                     ??GetDip2Data_1: (+1)
   \   00000038   0xF1B5 0x000F      SUBS     R0,R5,#+15
   \   0000003C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003E   0x42B0             CMP      R0,R6
   \   00000040   0xD366             BCC.N    ??GetDip2Data_2
    495          	    {
    496          			if(	(Buf[i] == StartCode )		&&		
    497          				(Buf[i + 1] == TargetAddr) 	&& 
    498          				(Buf[i + 2] == SourceAddr) 	&& 
    499          				(Buf[i + 3] == DataLen)  )
   \   00000042   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000044   0x5D30             LDRB     R0,[R6, R4]
   \   00000046   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD15E             BNE.N    ??GetDip2Data_3
   \   0000004E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000050   0x1930             ADDS     R0,R6,R4
   \   00000052   0x7840             LDRB     R0,[R0, #+1]
   \   00000054   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD157             BNE.N    ??GetDip2Data_3
   \   0000005C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005E   0x1930             ADDS     R0,R6,R4
   \   00000060   0x7880             LDRB     R0,[R0, #+2]
   \   00000062   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD150             BNE.N    ??GetDip2Data_3
   \   0000006A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006C   0x1930             ADDS     R0,R6,R4
   \   0000006E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000070   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD149             BNE.N    ??GetDip2Data_3
    500          			{									
    501          				memcpy((uint8 *)&CrcCheck,&Buf[i+DIP_REC_FRAM_LEN - 2],sizeof(CrcCheck));
   \   00000078   0x2702             MOVS     R7,#+2
   \   0000007A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   0x1930             ADDS     R0,R6,R4
   \   0000007E   0xF110 0x080D      ADDS     R8,R0,#+13
   \   00000082   0xF10D 0x0904      ADD      R9,SP,#+4
   \   00000086   0x003A             MOVS     R2,R7
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x4648             MOV      R0,R9
   \   0000008C   0x.... 0x....      BL       __aeabi_memcpy
    502          				
    503          				if(CrcCheck == GetCrc16Check(&Buf[i],DIP_REC_FRAM_LEN - 2))
   \   00000090   0x210D             MOVS     R1,#+13
   \   00000092   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000094   0x1930             ADDS     R0,R6,R4
   \   00000096   0x.... 0x....      BL       GetCrc16Check
   \   0000009A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000009E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A0   0x4281             CMP      R1,R0
   \   000000A2   0xD133             BNE.N    ??GetDip2Data_3
    504          				{
    505          					memcpy((uint8 *)&l_Dip2Prs,&Buf[i+INF_START_POS],sizeof(l_Dip2Prs));
   \   000000A4   0x2702             MOVS     R7,#+2
   \   000000A6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A8   0x1930             ADDS     R0,R6,R4
   \   000000AA   0x1D00             ADDS     R0,R0,#+4
   \   000000AC   0x9003             STR      R0,[SP, #+12]
   \   000000AE   0x.... 0x....      LDR.W    R8,??DataTable22_20
   \   000000B2   0x003A             MOVS     R2,R7
   \   000000B4   0x9903             LDR      R1,[SP, #+12]
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x.... 0x....      BL       __aeabi_memcpy
    506          					memcpy((uint8 *)&l_Dip2Tmp,&Buf[i+INF_START_POS + sizeof(l_Dip2Prs)],
    507          									sizeof(l_Dip2Tmp));
   \   000000BC   0xF05F 0x0801      MOVS     R8,#+1
   \   000000C0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C2   0x1930             ADDS     R0,R6,R4
   \   000000C4   0x1D80             ADDS     R0,R0,#+6
   \   000000C6   0x9002             STR      R0,[SP, #+8]
   \   000000C8   0x.... 0x....      LDR.W    R9,??DataTable22_10
   \   000000CC   0x4642             MOV      R2,R8
   \   000000CE   0x9902             LDR      R1,[SP, #+8]
   \   000000D0   0x4648             MOV      R0,R9
   \   000000D2   0x.... 0x....      BL       __aeabi_memcpy
    508          					memcpy((uint8 *)&l_Dip2ErrCod,
    509          					&Buf[i+INF_START_POS + sizeof(l_Dip2Prs)+sizeof(l_Dip2Tmp)],sizeof(l_Dip2ErrCod));
   \   000000D6   0xF05F 0x0901      MOVS     R9,#+1
   \   000000DA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000DC   0x1930             ADDS     R0,R6,R4
   \   000000DE   0xF110 0x0A07      ADDS     R10,R0,#+7
   \   000000E2   0x.... 0x....      LDR.W    R11,??DataTable22_12
   \   000000E6   0x464A             MOV      R2,R9
   \   000000E8   0x4651             MOV      R1,R10
   \   000000EA   0x4658             MOV      R0,R11
   \   000000EC   0x.... 0x....      BL       __aeabi_memcpy
    510          					
    511          					l_Dip2DataErrFlg = NO_ERROR;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable22_21
   \   000000F6   0x7008             STRB     R0,[R1, #+0]
    512          					
    513          					Times = 0;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable22_19
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    514          					ErrTimes = 0;						
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable22_22
   \   00000106   0x6008             STR      R0,[R1, #+0]
    515          					return 1;
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0xE015             B.N      ??GetDip2Data_4
    516          				}
    517          			}
    518          	    }
   \                     ??GetDip2Data_3: (+1)
   \   0000010C   0x1C76             ADDS     R6,R6,#+1
   \   0000010E   0xE793             B.N      ??GetDip2Data_1
    519          	    
    520          	    if(Times > 5)
   \                     ??GetDip2Data_2: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable22_19
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x2806             CMP      R0,#+6
   \   00000116   0xD302             BCC.N    ??GetDip2Data_0
    521          	    {
    522          	    	l_Dip2Prs = 0;
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0x....             LDR.N    R1,??DataTable22_20
   \   0000011C   0x8008             STRH     R0,[R1, #+0]
    523          	    }	    
    524              }    
    525              
    526          	ErrTimes++;
   \                     ??GetDip2Data_0: (+1)
   \   0000011E   0x....             LDR.N    R0,??DataTable22_22
   \   00000120   0x6800             LDR      R0,[R0, #+0]
   \   00000122   0x1C40             ADDS     R0,R0,#+1
   \   00000124   0x....             LDR.N    R1,??DataTable22_22
   \   00000126   0x6008             STR      R0,[R1, #+0]
    527          	
    528          	if(ErrTimes > 10)
   \   00000128   0x....             LDR.N    R0,??DataTable22_22
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0x280B             CMP      R0,#+11
   \   0000012E   0xD302             BCC.N    ??GetDip2Data_5
    529          	{
    530          		l_Dip2DataErrFlg = ERROR;
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x....             LDR.N    R1,??DataTable22_21
   \   00000134   0x7008             STRB     R0,[R1, #+0]
    531          	}
    532          
    533              return	0;												//接收失败
   \                     ??GetDip2Data_5: (+1)
   \   00000136   0x2000             MOVS     R0,#+0
   \                     ??GetDip2Data_4: (+1)
   \   00000138   0xB005             ADD      SP,SP,#+20
   \   0000013A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    534          }

   \                                 In section .bss, align 4
   \                     ??ErrTimes_1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times_1:
   \   00000000                      DS8 4
    535          
    536          ////----------------------------------------------------------------------------
    537          //// 名    称：   uint8  Dip2DataErrFlg(void)
    538          //// 功    能：   取接油尺2数据是否正确标识
    539          //// 入口参数：   无
    540          //// 出口参数：   无
    541          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    542          uint8  GetDip2DataErrFlg(void)
    543          {
    544          	return	l_Dip2DataErrFlg;
   \                     GetDip2DataErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_21
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    545          }
    546          //
    547          ////----------------------------------------------------------------------------
    548          //// 名    称：   uint8  Dip2DataErrFlg(void)
    549          //// 功    能：   接收TAX2后部分。
    550          //// 入口参数：   无
    551          //// 出口参数：   无
    552          ////----------------------------------------------------------------------------
    553          //uint8  GetDip2ErrCod(void)
    554          //{
    555          //	return	l_Dip2ErrCod;
    556          //}
    557          //
    558          ////----------------------------------------------------------------------------
    559          //// 名    称：   uint8  Dip2DataErrFlg(void)
    560          //// 功    能：   接收TAX2后部分。
    561          //// 入口参数：   无
    562          //// 出口参数：   无
    563          ////----------------------------------------------------------------------------
    564          //uint8  GetDip1ErrCod(void)
    565          //{
    566          //	return	l_Dip1ErrCod;
    567          //}
    568          ////----------------------------------------------------------------------------
    569          //// 名    称：   uint8  Dip1DataErrFlg(void)
    570          //// 功    能：   取油尺1通信数据正确标识。
    571          //// 入口参数：   无
    572          //// 出口参数：   无
    573          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    574          uint8  GetDip1DataErrFlg(void)
    575          {
    576          	return	l_Dip1DataErrFlg;
   \                     GetDip1DataErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_17
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    577          }
    578          
    579          
    580          ////----------------------------------------------------------------------------
    581          //// 名    称：   uint8  GetDipData(void)
    582          //// 功    能：   取油量数据
    583          //// 入口参数：   无
    584          //// 出口参数：   无
    585          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    586          uint8  GetCOM0Data(void)
    587          {
   \                     GetCOM0Data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
    588          	uint8			Buf[64];									
    589          	static	uint32			Time = 0;
    590          	static	uint32			Times = 0;
    591          	uint32					RecBufLen;		
    592          	static	uint32			ErrTimes = 0;	
    593          	
    594          	if(GetSysTime() - Time > 150 )						
   \   00000004   0x.... 0x....      BL       GetSysTime
   \   00000008   0x....             LDR.N    R1,??DataTable22_23
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0x2897             CMP      R0,#+151
   \   00000010   0xD329             BCC.N    ??GetCOM0Data_0
    595          	{
    596          		if(Times++)
   \   00000012   0x....             LDR.N    R0,??DataTable22_24
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1C41             ADDS     R1,R0,#+1
   \   00000018   0x....             LDR.N    R2,??DataTable22_24
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01E             BEQ.N    ??GetCOM0Data_1
    597          		{
    598          			RecBufLen = ReadCOM0(Buf,sizeof(Buf));
   \   00000020   0x2140             MOVS     R1,#+64
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       ReadCOM0
   \   00000028   0x0004             MOVS     R4,R0
    599           
    600          			if( RecBufLen )
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD00B             BEQ.N    ??GetCOM0Data_2
    601          			{
    602          				l_DipComErrFlg = NO_ERROR;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable22_4
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    603          				////printfcom0("\r\n l_DipComErrFlg = NO_ERROR;;");
    604          
    605          				if(!GetDip1Data(Buf,RecBufLen))						
   \   00000034   0x0021             MOVS     R1,R4
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       GetDip1Data
    606          				{
    607          //					PrintfDebug("\r\n!GetDip1Data(Buf,RecBufLen)");
    608          				}	
    609          //				
    610          				if(!GetDip2Data(Buf,RecBufLen))							
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x.... 0x....      BL       GetDip2Data
   \   00000044   0xE00B             B.N      ??GetCOM0Data_1
    611          				{
    612          //					PrintfDebug("\r\n!GetDip2Data(Buf,RecBufLen)");
    613          				}	
    614          //				
    615          //				if(!GetPowerVal(Buf,RecBufLen))	
    616          				{
    617          //					PrintfDebug("\r\n!GetPowerVal(Buf,RecBufLen)");
    618          				}	
    619          //				
    620          //				ErrTimes = 0;
    621          		    }
    622          		    else
    623          		    {
    624          				ErrTimes++;
   \                     ??GetCOM0Data_2: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable22_25
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable22_25
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    625          				
    626          				if(ErrTimes > 2)
   \   00000050   0x....             LDR.N    R0,??DataTable22_25
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x2803             CMP      R0,#+3
   \   00000056   0xD302             BCC.N    ??GetCOM0Data_1
    627          				{
    628          					l_DipComErrFlg = ERROR;		
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR.N    R1,??DataTable22_4
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    629          				}
    630          				
    631          				////printfcom0("\r\n l_DipComErrFlg = ERROR;");
    632          		    }
    633          	    }
    634          	    
    635          	    Time = GetSysTime();
   \                     ??GetCOM0Data_1: (+1)
   \   0000005E   0x.... 0x....      BL       GetSysTime
   \   00000062   0x....             LDR.N    R1,??DataTable22_23
   \   00000064   0x6008             STR      R0,[R1, #+0]
    636              }
    637              
    638              return	0;
   \                     ??GetCOM0Data_0: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xB010             ADD      SP,SP,#+64
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
    639          }

   \                                 In section .bss, align 4
   \                     ??Time_1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times_2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??ErrTimes_2:
   \   00000000                      DS8 4
    640          //
    641          ////----------------------------------------------------------------------------
    642          //// 名    称：   uint8  DipComErrFlg(void)
    643          //// 功    能：   取测量装置1压强
    644          //// 入口参数：   无
    645          //// 出口参数：   无
    646          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    647          uint8  GetDipComErrFlg(void)
    648          {
    649          	return	l_DipComErrFlg;
   \                     GetDipComErrFlg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_4
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    650          }
    651          	    
    652          ////----------------------------------------------------------------------------
    653          //// 名    称：   uint16  GetDip1Prs(void)
    654          //// 功    能：   取测量装置1压强
    655          //// 入口参数：   无
    656          //// 出口参数：   无
    657          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    658          int16  GetDip1Prs(void)
    659          {
    660          	return	l_Dip1Prs;
   \                     GetDip1Prs: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_16
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    661          }
    662          
    663          ////----------------------------------------------------------------------------
    664          //// 名    称：   uint16  GetDip1Prs(void)
    665          //// 功    能：   取测量装置1压强
    666          //// 入口参数：   无
    667          //// 出口参数：   无
    668          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    669          int16  GetDip1Hig(void)
    670          {
    671          	return	l_Dip1Prs;
   \                     GetDip1Hig: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_16
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    672          }
    673          //
    674          ////----------------------------------------------------------------------------
    675          //// 名    称：   uint16  GetDip2Prs(void)
    676          //// 功    能：   取测量装置2压强
    677          //// 入口参数：   无
    678          //// 出口参数：   无
    679          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    680          int16  GetDip2Prs(void)
    681          {
    682          	return	l_Dip2Prs;
   \                     GetDip2Prs: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_20
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    683          }
    684          

   \                                 In section .text, align 2, keep-with-next
    685          int16  GetDip2Hig(void)
    686          {
    687          	return	l_Dip2Prs;
   \                     GetDip2Hig: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_20
   \   00000002   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    688          }
    689          //
    690          ////----------------------------------------------------------------------------
    691          //// 名    称：   uint16  GetDipTmp(void)
    692          //// 功    能：   取测量装置1压强
    693          //// 入口参数：   无
    694          //// 出口参数：   无
    695          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    696          int8	GetDipTmp(void)
    697          {
    698          	if(l_Dip1Tmp && l_Dip2Tmp)
   \                     GetDipTmp: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable22_9
   \   00000002   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD010             BEQ.N    ??GetDipTmp_0
   \   0000000A   0x....             LDR.N    R0,??DataTable22_10
   \   0000000C   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD00B             BEQ.N    ??GetDipTmp_0
    699          	{
    700          		return	(l_Dip1Tmp + l_Dip2Tmp) / 2;
   \   00000014   0x....             LDR.N    R0,??DataTable22_9
   \   00000016   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable22_10
   \   0000001C   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   00000020   0x1808             ADDS     R0,R1,R0
   \   00000022   0x2102             MOVS     R1,#+2
   \   00000024   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000028   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000002A   0xE00B             B.N      ??GetDipTmp_1
    701          	}
    702          	else if(l_Dip1Tmp)
   \                     ??GetDipTmp_0: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable22_9
   \   0000002E   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD003             BEQ.N    ??GetDipTmp_2
    703          	{
    704          		return l_Dip1Tmp;
   \   00000036   0x....             LDR.N    R0,??DataTable22_9
   \   00000038   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000003C   0xE002             B.N      ??GetDipTmp_1
    705          	}
    706          	else
    707          	{
    708          		return l_Dip2Tmp;
   \                     ??GetDipTmp_2: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable22_10
   \   00000040   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \                     ??GetDipTmp_1: (+1)
   \   00000044   0x4770             BX       LR               ;; return
    709          	}
    710          
    711          }
    712          
    713          ////----------------------------------------------------------------------------
    714          //// 名    称：   uint16  JudgeDip1Prs(void)
    715          //// 功    能：   取测量装置1压强值是否超限标识
    716          //// 入口参数：   无
    717          //// 出口参数：   无
    718          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    719          uint8	JudgeDip1Prs(void)
    720          {
   \                     JudgeDip1Prs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    721          	static 	uint32	Time 	=	0;	//时间
    722          	static	uint32	Times	=	0;	//次数
    723          	static	uint8	Flg  	=   NO_ERROR;
    724          
    725          	int16	DipPrs;
    726          	
    727          	if(GetSysTime() - Time > 100)
   \   00000002   0x.... 0x....      BL       GetSysTime
   \   00000006   0x....             LDR.N    R1,??DataTable22_26
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x2865             CMP      R0,#+101
   \   0000000E   0xD322             BCC.N    ??JudgeDip1Prs_0
    728          	{
    729          		Time = GetSysTime();
   \   00000010   0x.... 0x....      BL       GetSysTime
   \   00000014   0x....             LDR.N    R1,??DataTable22_26
   \   00000016   0x6008             STR      R0,[R1, #+0]
    730          		
    731          		DipPrs = GetDip1Prs();
   \   00000018   0x.... 0x....      BL       GetDip1Prs
   \   0000001C   0x0004             MOVS     R4,R0
    732          		
    733          		if((DipPrs > DIP_PRS_MAX_VAL) || (DipPrs < - (DIP_PRS_MAX_VAL/10)))
   \   0000001E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000020   0xF242 0x7011      MOVW     R0,#+10001
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xDA03             BGE.N    ??JudgeDip1Prs_1
   \   00000028   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000002A   0xF514 0x7F7A      CMN      R4,#+1000
   \   0000002E   0xDA0C             BGE.N    ??JudgeDip1Prs_2
    734          		{
    735          		
    736          			Times++;
   \                     ??JudgeDip1Prs_1: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable22_27
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable22_27
   \   00000038   0x6008             STR      R0,[R1, #+0]
    737          			if(Times > 30)
   \   0000003A   0x....             LDR.N    R0,??DataTable22_27
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x281F             CMP      R0,#+31
   \   00000040   0xD309             BCC.N    ??JudgeDip1Prs_0
    738          			{
    739          				Flg = ERROR;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable22_28
   \   00000046   0x7008             STRB     R0,[R1, #+0]
   \   00000048   0xE005             B.N      ??JudgeDip1Prs_0
    740          			}
    741          		}
    742          		else
    743          		{
    744          			Times = 0;
   \                     ??JudgeDip1Prs_2: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable22_27
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    745          			Flg = NO_ERROR;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable22_28
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    746          		}
    747          	}
    748          	
    749          	return	Flg;
   \                     ??JudgeDip1Prs_0: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable22_28
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    750          }

   \                                 In section .bss, align 4
   \                     ??Time_2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times_3:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??Flg_1:
   \   00000000   0x01               DC8 1
    751          //
    752          //
    753          ////----------------------------------------------------------------------------
    754          //// 名    称：   uint16  GetDipTmp(void)
    755          //// 功    能：   取测量装置2压强值是否超限
    756          //// 入口参数：   无
    757          //// 出口参数：   无
    758          ////----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    759          uint8	JudgeDip2Prs(void)
    760          {
   \                     JudgeDip2Prs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    761          	static 	uint32	Time 	=	0;	//时间
    762          	static	uint32	Times	=	0;	//次数
    763          	static	uint8	Flg  	=  NO_ERROR;
    764          	
    765          	int16	DipPrs;
    766          	
    767          	if(GetSysTime() - Time > 100)
   \   00000002   0x.... 0x....      BL       GetSysTime
   \   00000006   0x....             LDR.N    R1,??DataTable22_29
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x2865             CMP      R0,#+101
   \   0000000E   0xD322             BCC.N    ??JudgeDip2Prs_0
    768          	{
    769          		Time = GetSysTime();
   \   00000010   0x.... 0x....      BL       GetSysTime
   \   00000014   0x....             LDR.N    R1,??DataTable22_29
   \   00000016   0x6008             STR      R0,[R1, #+0]
    770          
    771          		DipPrs = GetDip2Prs();
   \   00000018   0x.... 0x....      BL       GetDip2Prs
   \   0000001C   0x0004             MOVS     R4,R0
    772          		
    773          		if(DipPrs > DIP_PRS_MAX_VAL || DipPrs < (-DIP_PRS_MAX_VAL/10))
   \   0000001E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000020   0xF242 0x7011      MOVW     R0,#+10001
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xDA03             BGE.N    ??JudgeDip2Prs_1
   \   00000028   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000002A   0xF514 0x7F7A      CMN      R4,#+1000
   \   0000002E   0xDA0C             BGE.N    ??JudgeDip2Prs_2
    774          		{
    775          		
    776          			Times++;
   \                     ??JudgeDip2Prs_1: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable22_30
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable22_30
   \   00000038   0x6008             STR      R0,[R1, #+0]
    777          			if(Times > 30)
   \   0000003A   0x....             LDR.N    R0,??DataTable22_30
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x281F             CMP      R0,#+31
   \   00000040   0xD309             BCC.N    ??JudgeDip2Prs_0
    778          			{
    779          				Flg = ERROR;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable22_31
   \   00000046   0x7008             STRB     R0,[R1, #+0]
   \   00000048   0xE005             B.N      ??JudgeDip2Prs_0
    780          			}
    781          		}
    782          		else
    783          		{
    784          			Times = 0;
   \                     ??JudgeDip2Prs_2: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable22_30
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    785          			Flg = NO_ERROR;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable22_31
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    786          		}
    787          	}
    788          
    789          	return	Flg;
   \                     ??JudgeDip2Prs_0: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable22_31
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    790          }

   \                                 In section .bss, align 4
   \                     ??Time_3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times_4:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??Flg_2:
   \   00000000   0x01               DC8 1
    791          //
    792          //
    793          //extern	uint8	JudgeDipPrsDif(void);
    794          
    795          
    796          //----------------------------------------------------------------------------
    797          // 名    称：   uint16  JudgeDipPrsDif(void)
    798          // 功    能：   取测量装置1压强值是否超限标识
    799          // 入口参数：   无
    800          // 出口参数：   无
    801          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    802          uint8	JudgeDipPrsDif(void)
    803          {
   \                     JudgeDipPrsDif: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    804          	static 	uint32	Time 	=	0;	//时间
    805          	static	uint32	Times	=	0;	//次数
    806          	uint8	DipErrorType = RIGHT_DATA;
   \   00000002   0x24FF             MOVS     R4,#+255
    807          	
    808          	int16	Dip1Prs;
    809          	int16	Dip2Prs;
    810          	int16	DipPrs;
    811          
    812          	if(GetSysTime() - Time > 100)
   \   00000004   0x.... 0x....      BL       GetSysTime
   \   00000008   0x....             LDR.N    R1,??DataTable22_32
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0x2865             CMP      R0,#+101
   \   00000010   0xD370             BCC.N    ??JudgeDipPrsDif_0
    813          	{	
    814          		Time = GetSysTime();
   \   00000012   0x.... 0x....      BL       GetSysTime
   \   00000016   0x....             LDR.N    R1,??DataTable22_32
   \   00000018   0x6008             STR      R0,[R1, #+0]
    815          		
    816          		if(GetDipComErrFlg() == NO_ERROR  )
   \   0000001A   0x.... 0x....      BL       GetDipComErrFlg
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD166             BNE.N    ??JudgeDipPrsDif_1
    817          		{
    818          			if( GetDip2DataErrFlg() == NO_ERROR && JudgeDip2Prs() == NO_ERROR 
    819          			&& GetDip1DataErrFlg() == NO_ERROR && JudgeDip1Prs() == NO_ERROR)
   \   00000022   0x.... 0x....      BL       GetDip2DataErrFlg
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD162             BNE.N    ??JudgeDipPrsDif_1
   \   0000002A   0x.... 0x....      BL       JudgeDip2Prs
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD15E             BNE.N    ??JudgeDipPrsDif_1
   \   00000032   0x.... 0x....      BL       GetDip1DataErrFlg
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD15A             BNE.N    ??JudgeDipPrsDif_1
   \   0000003A   0x.... 0x....      BL       JudgeDip1Prs
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD156             BNE.N    ??JudgeDipPrsDif_1
    820          			{		
    821          				Dip1Prs = GetDip1Prs();
   \   00000042   0x.... 0x....      BL       GetDip1Prs
   \   00000046   0x0005             MOVS     R5,R0
    822          				Dip2Prs = GetDip2Prs();
   \   00000048   0x.... 0x....      BL       GetDip2Prs
   \   0000004C   0x0006             MOVS     R6,R0
    823          				DipPrs  = Dip1Prs - Dip2Prs;
   \   0000004E   0x1BA8             SUBS     R0,R5,R6
   \   00000050   0x0007             MOVS     R7,R0
    824          				
    825          				if(fabs(Dip1Prs) > 1000 || fabs(Dip2Prs) >1000)
   \   00000052   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0x.... 0x....      BL       __aeabi_i2d
   \   0000005A   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   0000005E   0x2201             MOVS     R2,#+1
   \   00000060   0x....             LDR.N    R3,??DataTable22_33  ;; 0x408f4000
   \   00000062   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000066   0xD90A             BLS.N    ??JudgeDipPrsDif_2
   \   00000068   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000006A   0x0030             MOVS     R0,R6
   \   0000006C   0x.... 0x....      BL       __aeabi_i2d
   \   00000070   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x....             LDR.N    R3,??DataTable22_33  ;; 0x408f4000
   \   00000078   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000007C   0xD81C             BHI.N    ??JudgeDipPrsDif_3
    826          				{
    827          					if((fabs(DipPrs) > 2000))
   \                     ??JudgeDipPrsDif_2: (+1)
   \   0000007E   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000080   0x0038             MOVS     R0,R7
   \   00000082   0x.... 0x....      BL       __aeabi_i2d
   \   00000086   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   0000008A   0x2201             MOVS     R2,#+1
   \   0000008C   0x....             LDR.N    R3,??DataTable22_34  ;; 0x409f4000
   \   0000008E   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000092   0xD80D             BHI.N    ??JudgeDipPrsDif_4
    828          					{
    829          						Times++;
   \   00000094   0x....             LDR.N    R0,??DataTable22_35
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable22_35
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    830          						if(Times > 120)
   \   0000009E   0x....             LDR.N    R0,??DataTable22_35
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x2879             CMP      R0,#+121
   \   000000A4   0xD324             BCC.N    ??JudgeDipPrsDif_1
    831          						{
    832          							DipErrorType = DIP_PRE_DIF;
   \   000000A6   0x2054             MOVS     R0,#+84
   \   000000A8   0x0004             MOVS     R4,R0
    833          							return	DipErrorType;
   \   000000AA   0x0020             MOVS     R0,R4
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0xE023             B.N      ??JudgeDipPrsDif_5
    834          						}
    835          					}
    836          					else
    837          					{
    838          						Times = 0;
   \                     ??JudgeDipPrsDif_4: (+1)
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x....             LDR.N    R1,??DataTable22_35
   \   000000B4   0x6008             STR      R0,[R1, #+0]
   \   000000B6   0xE01B             B.N      ??JudgeDipPrsDif_1
    839          					}
    840          				}
    841          				else
    842          				{
    843          					if((fabs(DipPrs) > 1500))
   \                     ??JudgeDipPrsDif_3: (+1)
   \   000000B8   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000BA   0x0038             MOVS     R0,R7
   \   000000BC   0x.... 0x....      BL       __aeabi_i2d
   \   000000C0   0xF031 0x4100      BICS     R1,R1,#0x80000000
   \   000000C4   0x2201             MOVS     R2,#+1
   \   000000C6   0x....             LDR.N    R3,??DataTable22_36  ;; 0x40977000
   \   000000C8   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000000CC   0xD80D             BHI.N    ??JudgeDipPrsDif_6
    844          					{
    845          						Times++;
   \   000000CE   0x....             LDR.N    R0,??DataTable22_35
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x1C40             ADDS     R0,R0,#+1
   \   000000D4   0x....             LDR.N    R1,??DataTable22_35
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    846          						if(Times > 60)
   \   000000D8   0x....             LDR.N    R0,??DataTable22_35
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x283D             CMP      R0,#+61
   \   000000DE   0xD307             BCC.N    ??JudgeDipPrsDif_1
    847          						{
    848          							DipErrorType = DIP_PRE_DIF;
   \   000000E0   0x2054             MOVS     R0,#+84
   \   000000E2   0x0004             MOVS     R4,R0
    849          							return	DipErrorType;
   \   000000E4   0x0020             MOVS     R0,R4
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0xE006             B.N      ??JudgeDipPrsDif_5
    850          						}
    851          					}
    852          					else
    853          					{
    854          						Times = 0;
   \                     ??JudgeDipPrsDif_6: (+1)
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x....             LDR.N    R1,??DataTable22_35
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    855          					}			
    856          				}
    857          			}
    858          		}	
    859          		
    860          		DipErrorType = RIGHT_DATA;
   \                     ??JudgeDipPrsDif_1: (+1)
   \   000000F0   0x20FF             MOVS     R0,#+255
   \   000000F2   0x0004             MOVS     R4,R0
    861          	}
    862          	
    863          	return	DipErrorType;
   \                     ??JudgeDipPrsDif_0: (+1)
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??JudgeDipPrsDif_5: (+1)
   \   000000F8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    864          }

   \                                 In section .bss, align 4
   \                     ??Time_4:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times_5:
   \   00000000                      DS8 4
    865          
    866          
    867          #define		DIP_PRE_DIF				84
    868          #define		DIP_NO_COM_ERROR		83
    869          #define		DIP1_DATA_ERROR			85
    870          #define		DIP1_COM_ERROR			81
    871          #define		DIP2_DATA_ERROR			75
    872          #define		DIP2_COM_ERROR			71
    873          #define		DIP1_LIMIT_ERROR		82
    874          #define		DIP2_LIMIT_ERROR		72
    875          
    876          
    877          
    878          

   \                                 In section .text, align 2, keep-with-next
    879          uint8  JudgeDip1Error(void) 
    880          {
   \                     JudgeDip1Error: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    881          	uint8	DipErrorType = RIGHT_DATA;
   \   00000002   0x24FF             MOVS     R4,#+255
    882          	
    883          	DipErrorType = RIGHT_DATA;
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x0004             MOVS     R4,R0
    884          		
    885          	if(GetDipComErrFlg() == ERROR)
   \   00000008   0x.... 0x....      BL       GetDipComErrFlg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD104             BNE.N    ??JudgeDip1Error_0
    886          	{
    887          		return	DipErrorType = DIP_NO_COM_ERROR;
   \   00000010   0x2053             MOVS     R0,#+83
   \   00000012   0x0004             MOVS     R4,R0
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xE025             B.N      ??JudgeDip1Error_1
    888          	}
    889          
    890          	if((GetDip1ComErrFlg()==ERROR))
   \                     ??JudgeDip1Error_0: (+1)
   \   0000001A   0x.... 0x....      BL       GetDip1ComErrFlg
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD104             BNE.N    ??JudgeDip1Error_2
    891          	{
    892          		return	DipErrorType = DIP1_COM_ERROR;
   \   00000022   0x2051             MOVS     R0,#+81
   \   00000024   0x0004             MOVS     R4,R0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xE01C             B.N      ??JudgeDip1Error_1
    893          	}
    894          
    895          	if(GetDip1DataErrFlg() == ERROR)
   \                     ??JudgeDip1Error_2: (+1)
   \   0000002C   0x.... 0x....      BL       GetDip1DataErrFlg
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD104             BNE.N    ??JudgeDip1Error_3
    896          	{
    897          		return	DipErrorType = DIP1_DATA_ERROR;
   \   00000034   0x2055             MOVS     R0,#+85
   \   00000036   0x0004             MOVS     R4,R0
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xE013             B.N      ??JudgeDip1Error_1
    898          	}
    899          
    900          	if(JudgeDip1Prs() == ERROR)
   \                     ??JudgeDip1Error_3: (+1)
   \   0000003E   0x.... 0x....      BL       JudgeDip1Prs
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD104             BNE.N    ??JudgeDip1Error_4
    901          	{
    902          		return	DipErrorType = DIP1_LIMIT_ERROR;
   \   00000046   0x2052             MOVS     R0,#+82
   \   00000048   0x0004             MOVS     R4,R0
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xE00A             B.N      ??JudgeDip1Error_1
    903          	}
    904          
    905          	if(JudgeDipPrsDif() == ERROR)
   \                     ??JudgeDip1Error_4: (+1)
   \   00000050   0x.... 0x....      BL       JudgeDipPrsDif
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD104             BNE.N    ??JudgeDip1Error_5
    906          	{
    907          		 return	DipErrorType = DIP_PRE_DIF;
   \   00000058   0x2054             MOVS     R0,#+84
   \   0000005A   0x0004             MOVS     R4,R0
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xE001             B.N      ??JudgeDip1Error_1
    908          	}
    909          //		else
    910          //		{
    911          //			//if(JudgeDipPrsDif() == ERROR)						//压强差大
    912          //			//{
    913          //			//	DipErrorType = DIP_PRE_DIF;
    914          //			//}
    915          //			//else
    916          //			Time = GetSysTime();
    917          //
    918          //			{
    919          //				Times++;
    920          //
    921          //			}
    922          //		
    923          //			////printfcom0("\r\n DipErrorType = DIP_NO_COM_ERROR;");
    924          //
    925          //		}
    926          //	}
    927          	
    928            	
    929          	return	DipErrorType;
   \                     ??JudgeDip1Error_5: (+1)
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??JudgeDip1Error_1: (+1)
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    930          }
    931          //
    932          //extern	uint8	JudgeDip2Prs(void);
    933          //
    934          ////-------------------------------------------------------------------------------------------------
    935          ////函数名称:             uint8  JudgeDipError(void) 
    936          ////函数功能:             对测量装置故障进行判断
    937          ////入口参数:             无
    938          ////出口参数:             返回测量装置故障代码
    939          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    940          uint8  JudgeDip2Error(void) 
    941          {
   \                     JudgeDip2Error: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    942          	uint8			DipErrorType = RIGHT_DATA;
   \   00000002   0x24FF             MOVS     R4,#+255
    943          //	static	uint32	Times 	= 0;
    944          	
    945          	DipErrorType = RIGHT_DATA;
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x0004             MOVS     R4,R0
    946          		
    947          	if(GetDipComErrFlg() == ERROR)
   \   00000008   0x.... 0x....      BL       GetDipComErrFlg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD102             BNE.N    ??JudgeDip2Error_0
    948          	{
    949          //		return	DipErrorType = DIP_NO_COM_ERROR;
    950          		return DipErrorType;
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xE01C             B.N      ??JudgeDip2Error_1
    951          	}
    952          
    953          	if((GetDip2ComErrFlg()==ERROR))
   \                     ??JudgeDip2Error_0: (+1)
   \   00000016   0x.... 0x....      BL       GetDip2ComErrFlg
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD104             BNE.N    ??JudgeDip2Error_2
    954          	{
    955          		return	DipErrorType = DIP2_COM_ERROR;
   \   0000001E   0x2047             MOVS     R0,#+71
   \   00000020   0x0004             MOVS     R4,R0
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xE013             B.N      ??JudgeDip2Error_1
    956          	}
    957          
    958          	if(GetDip2DataErrFlg() == ERROR)
   \                     ??JudgeDip2Error_2: (+1)
   \   00000028   0x.... 0x....      BL       GetDip2DataErrFlg
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD104             BNE.N    ??JudgeDip2Error_3
    959          	{
    960          		return	DipErrorType = DIP2_DATA_ERROR;
   \   00000030   0x204B             MOVS     R0,#+75
   \   00000032   0x0004             MOVS     R4,R0
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xE00A             B.N      ??JudgeDip2Error_1
    961          	}
    962          
    963          	if(JudgeDip2Prs() == ERROR)
   \                     ??JudgeDip2Error_3: (+1)
   \   0000003A   0x.... 0x....      BL       JudgeDip2Prs
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD104             BNE.N    ??JudgeDip2Error_4
    964          	{
    965          		return	DipErrorType = DIP2_LIMIT_ERROR;
   \   00000042   0x2048             MOVS     R0,#+72
   \   00000044   0x0004             MOVS     R4,R0
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xE001             B.N      ??JudgeDip2Error_1
    966          	}
    967          //	
    968          //	if(JudgeDipPrsDif() == ERROR)
    969          //	{
    970          //		 return	DipErrorType = DIP_PRE_DIF;
    971          //	}
    972          
    973          	return	DipErrorType;
   \                     ??JudgeDip2Error_4: (+1)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??JudgeDip2Error_1: (+1)
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
    974          }
    975          
    976          ////-------------------------------------------------------------------------------------------------
    977          ////函数名称:             void  COM1Task(void) 
    978          ////函数功能:             测量装置任务
    979          ////入口参数:             无
    980          ////出口参数:             无
    981          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    982          void  COM0Task(void) 
    983          {
   \                     COM0Task: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    984          	SendReadCOM0DataCod();				//发送测量装置采集数据的命令
   \   00000002   0x.... 0x....      BL       SendReadCOM0DataCod
    985          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     ??Flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     ??SendTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     g_DipDisVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     ??Time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     l_DipComErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     l_Dip1ComErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     ??Err1Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x........         DC32     l_Dip2ComErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_8:
   \   00000000   0x........         DC32     ??Err2Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_9:
   \   00000000   0x........         DC32     l_Dip1Tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_10:
   \   00000000   0x........         DC32     l_Dip2Tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_11:
   \   00000000   0x........         DC32     l_Dip1ErrCod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_12:
   \   00000000   0x........         DC32     l_Dip2ErrCod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_13:
   \   00000000   0x........         DC32     l_dip1den

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_14:
   \   00000000   0x........         DC32     l_dip2den

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_15:
   \   00000000   0x........         DC32     ??Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_16:
   \   00000000   0x........         DC32     l_Dip1Prs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_17:
   \   00000000   0x........         DC32     l_Dip1DataErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_18:
   \   00000000   0x........         DC32     ??ErrTimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_19:
   \   00000000   0x........         DC32     ??Times_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_20:
   \   00000000   0x........         DC32     l_Dip2Prs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_21:
   \   00000000   0x........         DC32     l_Dip2DataErrFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_22:
   \   00000000   0x........         DC32     ??ErrTimes_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_23:
   \   00000000   0x........         DC32     ??Time_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_24:
   \   00000000   0x........         DC32     ??Times_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_25:
   \   00000000   0x........         DC32     ??ErrTimes_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_26:
   \   00000000   0x........         DC32     ??Time_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_27:
   \   00000000   0x........         DC32     ??Times_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_28:
   \   00000000   0x........         DC32     ??Flg_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_29:
   \   00000000   0x........         DC32     ??Time_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_30:
   \   00000000   0x........         DC32     ??Times_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_31:
   \   00000000   0x........         DC32     ??Flg_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_32:
   \   00000000   0x........         DC32     ??Time_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_33:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_34:
   \   00000000   0x409F4000         DC32     0x409f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_35:
   \   00000000   0x........         DC32     ??Times_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_36:
   \   00000000   0x40977000         DC32     0x40977000

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    986          //
    987          //
    988          //
    989          //#ifdef	TEST_OPEN
    990          ////----------------------------------------------------------------------------
    991          //// 名    称：   uint8  RecTAX2Bef(void)
    992          //// 功    能：   接收TAX2前部分。
    993          //// 入口参数：   无
    994          //// 出口参数：   无
    995          ////----------------------------------------------------------------------------
    996          //uint8  RecHostToDip1(uint8 * Buf,uint32 * DipVal,uint32	RecBufLen)
    997          //{
    998          //    uint16		i;
    999          //	uint8	SourceAddr,TargetAddr,DatTyp,StartCode,FramLen;
   1000          //	static		uint32	ErrTime = 0;
   1001          //
   1002          //	DatTyp		=	GET_DIP_PRS;
   1003          //	StartCode 	= 	COM_START_CODE;
   1004          //	TargetAddr  = 	DIP1_ADDR;	
   1005          //	SourceAddr 	=	HOST_ADDR;
   1006          //
   1007          //	for(i = 0; i <= (RecBufLen  - 6) && RecBufLen > 6;i++)
   1008          //    {
   1009          ////		SysFastHoldTast();
   1010          //		
   1011          //		if(Buf[i] == StartCode && Buf[i + 1] == TargetAddr 
   1012          //			&& Buf[i + 2] == SourceAddr && Buf[i + 4] == GET_DIP_PRS)	//判断通讯格式 
   1013          //		{
   1014          //			memcpy((uint8 *)DipVal,&Buf[i + 6],sizeof(uint32));
   1015          //
   1016          //			ErrTime = 0;
   1017          //			//printfcom0("\r\n 压强1成功！");
   1018          //			return 	1;													//接收成功，退出
   1019          //		}
   1020          //	}
   1021          //
   1022          //	ErrTime++;
   1023          //	
   1024          //	if(ErrTime > 5)
   1025          //	{
   1026          //		*DipVal = 0;
   1027          //	}
   1028          //		
   1029          //	//printfcom0("\r\n 压强1 i  = %d;RecBufLen = %d ",i,RecBufLen);
   1030          //
   1031          //    return	0;															//接收失败
   1032          //}
   1033          //
   1034          ////----------------------------------------------------------------------------
   1035          //// 名    称：   uint8  RecTAX2Bef(void)
   1036          //// 功    能：   接收TAX2前部分。
   1037          //// 入口参数：   无
   1038          //// 出口参数：   无
   1039          ////----------------------------------------------------------------------------
   1040          //uint8  RecHostToDip2(uint8 * Buf,uint32 * DipVal,uint32	RecBufLen)
   1041          //{
   1042          //    uint16		i;
   1043          //	uint8		SourceAddr,TargetAddr,DatTyp,StartCode,FramLen;
   1044          //	static		uint32	ErrTime = 0;
   1045          //	
   1046          //	DatTyp		=	GET_DIP_PRS;
   1047          //	StartCode 	= 	COM_START_CODE;
   1048          //	TargetAddr  = 	DIP2_ADDR;	
   1049          //	SourceAddr 	=	HOST_ADDR;
   1050          //
   1051          //	for(i = 0; i <= (RecBufLen  - 6) && RecBufLen >6 ;i++)
   1052          //    {
   1053          ////    	SysFastHoldTast();
   1054          //    	
   1055          //		if(Buf[i] == StartCode && Buf[i + 1] == TargetAddr 
   1056          //			&& Buf[i + 2] == SourceAddr && Buf[i + 4] == GET_DIP_PRS)	//判断通讯格式 
   1057          //		{
   1058          //			memcpy((uint8 *)DipVal,&Buf[i + 6],sizeof(uint32));
   1059          //			
   1060          //			ErrTime = 0;
   1061          //			//printfcom0("\r\n 压强2成功！");
   1062          //			return 	1;								//接收成功，退出
   1063          //		}
   1064          //	}
   1065          //
   1066          //	ErrTime++;
   1067          //	
   1068          //	if(ErrTime > 5)
   1069          //	{
   1070          //		*DipVal = 0;
   1071          //	}
   1072          //	
   1073          //	//printfcom0("\r\n 压强2 i  = %d;RecBufLen = %d ",i,RecBufLen);
   1074          //	
   1075          //    return	0;												//接收失败
   1076          //}
   1077          //
   1078          //
   1079          ////----------------------------------------------------------------------------
   1080          //// 名    称：   uint8  RecTAX2Bef(void)
   1081          //// 功    能：   接收TAX2前部分。
   1082          //// 入口参数：   无
   1083          //// 出口参数：   无
   1084          ////----------------------------------------------------------------------------
   1085          //void  SendDip1ToHost(int16 Prs)
   1086          //{
   1087          //    uint16		i = 0;
   1088          //    static	uint8	BufTmp[DIP_REC_FRAM_LEN] = {0};
   1089          //    uint16			CrcCheck;
   1090          //    uint8			StartCode,TargetAddr,SourceAddr,DataLen;
   1091          //    
   1092          //	StartCode 	= COM_START_CODE;
   1093          //	TargetAddr 	= HOST_ADDR;
   1094          //	SourceAddr 	= DIP1_ADDR;
   1095          //	DataLen		= DIP_REC_FRAM_LEN - INF_START_POS - 2;
   1096          //     
   1097          //	BufTmp[i++] = StartCode;
   1098          //	BufTmp[i++] = TargetAddr;
   1099          //	BufTmp[i++] = SourceAddr;
   1100          //	BufTmp[i++] = DataLen;
   1101          //		
   1102          //	memcpy(&BufTmp[INF_START_POS],(uint8 *)&Prs,sizeof(int16));
   1103          //	BufTmp[INF_START_POS + sizeof(int16)] 				= 0;
   1104          //	BufTmp[INF_START_POS + sizeof(int16) + sizeof(uint8)] 	= 0;
   1105          //	BufTmp[INF_START_POS + sizeof(int16) + sizeof(uint8) + sizeof(uint8)] 	= 0xaa;
   1106          //
   1107          //	CrcCheck = GetCrc16Check(BufTmp,DIP_REC_FRAM_LEN - 2);
   1108          //	memcpy(&BufTmp[DIP_REC_FRAM_LEN - 2],(uint8 *)&CrcCheck,sizeof(CrcCheck));
   1109          //	
   1110          //	SendCOM0(BufTmp,DIP_REC_FRAM_LEN);
   1111          //}
   1112          //
   1113          ////----------------------------------------------------------------------------
   1114          //// 名    称：   uint8  RecTAX2Bef(void)
   1115          //// 功    能：   接收TAX2前部分。
   1116          //// 入口参数：   无
   1117          //// 出口参数：   无
   1118          ////----------------------------------------------------------------------------
   1119          //void  SendDip2ToHost(int16 Prs)
   1120          //{
   1121          //    uint16			i = 0;
   1122          //    static	uint8	BufTmp[DIP_REC_FRAM_LEN] = {0};
   1123          //    uint16			CrcCheck;
   1124          //    uint8			StartCode,TargetAddr,SourceAddr,DataLen;
   1125          //    
   1126          //	StartCode 	= COM_START_CODE;
   1127          //	TargetAddr 	= HOST_ADDR;
   1128          //	SourceAddr 	= DIP2_ADDR;
   1129          //	DataLen		= DIP_REC_FRAM_LEN - INF_START_POS - 2;
   1130          //     
   1131          //	BufTmp[i++] = StartCode;
   1132          //	BufTmp[i++] = TargetAddr;
   1133          //	BufTmp[i++] = SourceAddr;
   1134          //	BufTmp[i++] = DataLen;
   1135          //	
   1136          //	memcpy(&BufTmp[INF_START_POS],(uint8 *)&Prs,sizeof(int16));
   1137          //	BufTmp[INF_START_POS+sizeof(int16)] 				= 0;
   1138          //	BufTmp[INF_START_POS + sizeof(int16) + sizeof(uint8)] 	= 0;
   1139          //	BufTmp[INF_START_POS + sizeof(int16) + sizeof(uint8) + sizeof(uint8)] 	= 0xaa;
   1140          //
   1141          //	CrcCheck = GetCrc16Check(BufTmp,DIP_REC_FRAM_LEN - 2);
   1142          //	memcpy(&BufTmp[DIP_REC_FRAM_LEN - 2],(uint8 *)&CrcCheck,sizeof(CrcCheck));
   1143          //	
   1144          //	SendCOM0(BufTmp,DIP_REC_FRAM_LEN);
   1145          //}
   1146          //
   1147          //
   1148          ////------------------------------------------------------------------------
   1149          //// 名    称：   void SentDatToDip1(uint8 *Buf,uint32	BufLen)
   1150          //// 功    能：   将数据发送到油尺1 
   1151          //// 入口参数：	Buf:数据缓冲区 BufLen:数据缓冲区数据长度 ；Typ:数据类型
   1152          //// 出口参数：	无
   1153          ////------------------------------------------------------------------------
   1154          //uint32 SimulateHostAndDip(int16 Prs1,int16 Prs2)		
   1155          //{
   1156          //	static	uint8	Buf[50] = {0};
   1157          //	uint32			DipVal;
   1158          //	uint32			RecLen;				
   1159          //	uint32			RecStateLen;
   1160          //	static		uint32	Times;				
   1161          //	
   1162          //	RecLen 		= 	ReadCOM1(Buf,sizeof(Buf));		
   1163          //
   1164          //	////printfcom0("\r\n RecLen = %d",RecLen);
   1165          //
   1166          //	if(Times++%2==0)
   1167          //	{
   1168          //		if( RecHostToDip1(Buf,(uint32 *)&DipVal,RecLen ))
   1169          //		{
   1170          //			SendDip1ToHost(Prs1);
   1171          //			////printfcom0("\r\n DipVal = %d",DipVal);
   1172          //			return	DipVal;
   1173          //		}	
   1174          //	}
   1175          //	else
   1176          //	{
   1177          //		if( RecHostToDip2(Buf,(uint32 *)&DipVal,RecLen) )
   1178          //		{
   1179          //			SendDip2ToHost(Prs2);	
   1180          //			////printfcom0("\r\n DipVal = %d",DipVal);
   1181          //			
   1182          //			return	DipVal;
   1183          //		}
   1184          //	}
   1185          //	
   1186          //}
   1187          //
   1188          //#define	USB_INT_SUCCESS		0x14			/* USB事务或者传输操作成功 */
   1189          //
   1190          //
   1191          //#endif
   1192          // 
   1193          ////-------------------------------------------------------------------------------------------------
   1194          ////函数名称:             void  SimulateTax(void)
   1195          ////函数功能:             TAX2模拟器
   1196          ////入口参数:             无
   1197          ////出口参数:             无
   1198          ////说明:                 
   1199          ////--------------------------------------------------------------------------------------------------
   1200          //void  SimulateDip(void)
   1201          //{
   1202          //    ////printfcom0("\r\n\r\nTax2Task(void)");
   1203          //#ifdef	TEST_OPEN
   1204          //	uint32	DipVal;
   1205          //	int16	Prs1;
   1206          //	int16	Prs2;	
   1207          //	static	uint32	Time;
   1208          //	
   1209          //	//OpenCOM1(9600);							//初始经串口1  串口接收中不能初始化
   1210          //
   1211          //    //while(1)
   1212          //    {
   1213          //
   1214          //    	if(GetSysTime() - Time > 20)				//100ms
   1215          //		{	
   1216          //	#ifdef	HARD_VER_111122	
   1217          ///**/
   1218          //			if( CH376DiskConnect() == USB_INT_SUCCESS )	//连接USB,U盘插入
   1219          //			{
   1220          //	   			UsbSetSimPre();							//用U盘设置TAX信息					
   1221          //	   		}    	
   1222          //	
   1223          //	#endif   	
   1224          //			////printfcom0("\r\n GetSysTime() %d- Time",GetSysTime());
   1225          //				
   1226          //			Prs1 = GetSimPrs1();					//取仿真用压强1
   1227          //			Prs2 = GetSimPrs2();					//取仿真用压强2
   1228          //			
   1229          //			DipVal = SimulateHostAndDip(Prs1,Prs2);	//读TAX箱模拟器数据
   1230          //
   1231          //			if( DipVal )								//显示处理
   1232          //			{
   1233          //				DisplaySet(50,1,"%d",DipVal%10000);
   1234          //			}
   1235          //			else
   1236          //			{
   1237          //				DisplaySet(20,1,"%d.%d.",Prs1%10000,Prs2%10000);
   1238          //			}
   1239          //			
   1240          //			Time = GetSysTime();
   1241          //		}
   1242          //	}
   1243          //	
   1244          //#endif
   1245          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   COM0Task
         8   -> SendReadCOM0DataCod
      72   GetCOM0Data
        72   -> GetDip1Data
        72   -> GetDip2Data
        72   -> GetSysTime
        72   -> ReadCOM0
       0   GetDip1ComErrFlg
      56   GetDip1Data
        56   -> GetCrc16Check
        56   -> __aeabi_memcpy
       0   GetDip1DataErrFlg
       0   GetDip1Hig
       0   GetDip1Prs
       0   GetDip2ComErrFlg
      56   GetDip2Data
        56   -> GetCrc16Check
        56   -> __aeabi_memcpy
       0   GetDip2DataErrFlg
       0   GetDip2Hig
       0   GetDip2Prs
       0   GetDipComErrFlg
       0   GetDipTmp
       0   GetMyDip1Den
       0   GetMyDip1Err
       0   GetMyDip1Tmp
       0   GetMyDip2Den
       0   GetMyDip2Err
       0   GetMyDip2Tmp
       8   JudgeDip1Error
         8   -> GetDip1ComErrFlg
         8   -> GetDip1DataErrFlg
         8   -> GetDipComErrFlg
         8   -> JudgeDip1Prs
         8   -> JudgeDipPrsDif
       8   JudgeDip1Prs
         8   -> GetDip1Prs
         8   -> GetSysTime
       8   JudgeDip2Error
         8   -> GetDip2ComErrFlg
         8   -> GetDip2DataErrFlg
         8   -> GetDipComErrFlg
         8   -> JudgeDip2Prs
       8   JudgeDip2Prs
         8   -> GetDip2Prs
         8   -> GetSysTime
      24   JudgeDipPrsDif
        24   -> GetDip1DataErrFlg
        24   -> GetDip1Prs
        24   -> GetDip2DataErrFlg
        24   -> GetDip2Prs
        24   -> GetDipComErrFlg
        24   -> GetSysTime
        24   -> JudgeDip1Prs
        24   -> JudgeDip2Prs
        24   -> __aeabi_i2d
        24 __aeabi_cdrcmple
      72   SendReadCOM0DataCod
        72   -> GetDip1Data
        72   -> GetDip2Data
        72   -> GetSysTime
        72   -> ReadCOM0
        72   -> SentDatToDip1
        72   -> SentDatToDip2
        72   -> __aeabi_memclr4
        72   -> __aeabi_memcpy
      96   SentDatToDip1
        96   -> GetCrc16Check
        96   -> SendCOM0
        96   -> __aeabi_memcpy
      96   SentDatToDip2
        96   -> GetCrc16Check
        96   -> SendCOM0
        96   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_10
       4  ??DataTable22_11
       4  ??DataTable22_12
       4  ??DataTable22_13
       4  ??DataTable22_14
       4  ??DataTable22_15
       4  ??DataTable22_16
       4  ??DataTable22_17
       4  ??DataTable22_18
       4  ??DataTable22_19
       4  ??DataTable22_2
       4  ??DataTable22_20
       4  ??DataTable22_21
       4  ??DataTable22_22
       4  ??DataTable22_23
       4  ??DataTable22_24
       4  ??DataTable22_25
       4  ??DataTable22_26
       4  ??DataTable22_27
       4  ??DataTable22_28
       4  ??DataTable22_29
       4  ??DataTable22_3
       4  ??DataTable22_30
       4  ??DataTable22_31
       4  ??DataTable22_32
       4  ??DataTable22_33
       4  ??DataTable22_34
       4  ??DataTable22_35
       4  ??DataTable22_36
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable22_7
       4  ??DataTable22_8
       4  ??DataTable22_9
      52  ?_0
       8  COM0Task
       1  Err1Times
       1  Err2Times
       4  ErrTimes
       4  ErrTimes
       4  ErrTimes
       1  Flg
       1  Flg
       1  Flg
     108  GetCOM0Data
       8  GetDip1ComErrFlg
     330  GetDip1Data
       6  GetDip1DataErrFlg
       8  GetDip1Hig
       8  GetDip1Prs
       8  GetDip2ComErrFlg
     318  GetDip2Data
       6  GetDip2DataErrFlg
       8  GetDip2Hig
       8  GetDip2Prs
       6  GetDipComErrFlg
      70  GetDipTmp
       8  GetMyDip1Den
       8  GetMyDip1Err
      12  GetMyDip1Tmp
       8  GetMyDip2Den
       8  GetMyDip2Err
      12  GetMyDip2Tmp
     104  JudgeDip1Error
      92  JudgeDip1Prs
      82  JudgeDip2Error
      92  JudgeDip2Prs
     250  JudgeDipPrsDif
     534  SendReadCOM0DataCod
       1  SendTimes
     174  SentDatToDip1
     174  SentDatToDip2
       4  Time
       4  Time
       4  Time
       4  Time
       4  Time
       4  Times
       4  Times
       4  Times
       4  Times
       4  Times
       4  Times
       1  l_Dip1ComErrFlg
       1  l_Dip1DataErrFlg
       1  l_Dip1ErrCod
       2  l_Dip1Prs
       1  l_Dip1Tmp
       1  l_Dip2ComErrFlg
       1  l_Dip2DataErrFlg
       1  l_Dip2ErrCod
       2  l_Dip2Prs
       1  l_Dip2Tmp
       1  l_DipComErrFlg
       2  l_dip1den
       2  l_dip2den

 
    72 bytes in section .bss
     7 bytes in section .data
    52 bytes in section .rodata
 2 606 bytes in section .text
 
 2 606 bytes of CODE  memory
    52 bytes of CONST memory
    79 bytes of DATA  memory

Errors: none
Warnings: none
