###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Oct/2017  16:41:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-310统计模块\Application\User\tmp.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\User\tmp.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\tmp.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\tmp.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\User\tmp.c
      1          #include    "includes.h"  
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void	IO0PIN_R(uint8	x)
      5          {
      6          }
   \                     IO0PIN_R: (+1)
   \   00000000   0x4770             BX       LR               ;; return
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void	IO0CLR_W(uint8	x)
      9          {
     10          }
   \                     IO0CLR_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void	IO0SET_W(uint8	x)
     13          {
     14          }
   \                     IO0SET_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     15          
     16          
     17          
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void	IO0DIR_IN(uint8	x)   
     20          {
     21          }
   \                     IO0DIR_IN: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void	 IO0DIR_OUT(uint8 x)  
     24          {
     25          }
   \                     IO0DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void	 IO1DIR_OUT(uint8 x)  
     28          {
     29          }
   \                     IO1DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void	 NOP(void)  
     32          {
   \                     `NOP`: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     33          	FeedDog();
   \   00000002   0x.... 0x....      BL       FeedDog
     34          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     35          
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void	 IO2DIR_OUT(uint8 x)  
     38          {
     39          }
   \                     IO2DIR_OUT: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     40          void	 IO2PIN_W(uint8	x) 
     41          {
     42          }
   \                     IO2PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     43          void	 IO1PIN_W(uint8	x) 
     44          {
     45          }
   \                     IO1PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     46          
     47          //void	ReCalPara(uint8	x)
     48          //{
     49          //}
     50          

   \                                 In section .text, align 2, keep-with-next
     51          uint8 ReadFlsh(uint32 Addr,uint8 *buf,uint32 Len)
     52          {	
   \                     ReadFlsh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     53          	return	MX25L1602_RD(Addr, Len,(INT8U* )buf);
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       MX25L1602_RD
   \   00000012   0xBD70             POP      {R4-R6,PC}       ;; return
     54          }
     55          

   \                                 In section .text, align 2, keep-with-next
     56          INT8U	WriteFlsh(INT32U Dst, uint8 * sFlshRec, INT32U NByte)
     57          {
   \                     WriteFlsh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     58          	return	MX25L1602_WR(Dst,(INT8U*)sFlshRec,NByte);
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       MX25L1602_WR
   \   00000012   0xBD70             POP      {R4-R6,PC}       ;; return
     59          }
     60          
     61          
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void IO0PIN_W(uint8	Val,uint8	x)   
     64          {
     65          }
   \                     IO0PIN_W: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     66          
     67          

   \                                 In section .bss, align 1
     68          uint8	l_hostevtflg;
   \                     l_hostevtflg:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     69          uint8	GetHostEvtFlg(void)
     70          {
     71          	return	 l_hostevtflg;
   \                     GetHostEvtFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     72          }
     73          
     74          #define		START_EVT		31		
     75          //----------------------------------------------------------------------------
     76          // 名    称：   uint8 JudgeStartEvt(void)
     77          // 功    能:    返回开机事件标识
     78          // 入口参数： 
     79          // 出口参数：
     80          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     81          uint8 	JudgeStartEvt(void)
     82          {
     83          	uint8	EvtType = RIGHT_DATA;
   \                     JudgeStartEvt: (+1)
   \   00000000   0x20FF             MOVS     R0,#+255
     84          	static	uint32	Time = 0;
     85          	
     86          	EvtType = RIGHT_DATA;
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x0008             MOVS     R0,R1
     87          	
     88          	if( Time++ == 0 )
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x1C4A             ADDS     R2,R1,#+1
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable9_3
   \   00000012   0x601A             STR      R2,[R3, #+0]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD105             BNE.N    ??JudgeStartEvt_0
     89          	{
     90          		EvtType = START_EVT;	
   \   00000018   0x211F             MOVS     R1,#+31
   \   0000001A   0x0008             MOVS     R0,R1
     91          
     92          		l_hostevtflg = 	START_EVT;
   \   0000001C   0x211F             MOVS     R1,#+31
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable9_2
   \   00000022   0x7011             STRB     R1,[R2, #+0]
     93          	}
     94          	
     95          	return	EvtType;
   \                     ??JudgeStartEvt_0: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x4770             BX       LR               ;; return
     96          }

   \                                 In section .bss, align 4
   \                     ??Time:
   \   00000000                      DS8 4
     97          
     98          //----------------------------------------------------------------------------
     99          // 名    称：   void PrinfSysInfo(void)
    100          // 功    能:    系统初始化
    101          // 入口参数：
    102          // 出口参数：
    103          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    104          void	PrinfSysInfo(void)
    105          {
   \                     PrinfSysInfo: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
    106          	stcDeviceInfo		sDeviceInfo;
    107          	stcReviseHight		sReviseHight;
    108          	stcFixInfo  		sFix;
    109          	stcDensity			sDensity;
    110          	float				Density;
    111          	int16				ReviseHight;
    112          	uint8				OilBoxCod;
    113          
    114          
    115          	//DisplayTime();
    116          	Delay_Nms(1*1000);
   \   00000004   0xF44F 0x707A      MOV      R0,#+1000
   \   00000008   0x.... 0x....      BL       Delay_Nms
    117          
    118          	DisplaySet(100,1,"SV.00");		
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable9_4
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x2064             MOVS     R0,#+100
   \   00000014   0x.... 0x....      BL       DisplaySet
    119          //	DisplaySet(100,1,"10.08");
    120          
    121          	DisplaySet(100,1,"HV02");
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2064             MOVS     R0,#+100
   \   00000020   0x.... 0x....      BL       DisplaySet
    122          	Delay_Nms(2*1000);
   \   00000024   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000028   0x.... 0x....      BL       Delay_Nms
    123          
    124          
    125          	ReadHostInfo((stcDeviceInfo *)&sDeviceInfo);		//读出厂信息
   \   0000002C   0xA80E             ADD      R0,SP,#+56
   \   0000002E   0x.... 0x....      BL       ReadHostInfo
    126          	
    127          	//printfcom0("\r\n 能耗硬件版本号:	");
    128          	///SendCOM0(sDeviceInfo.HardwareVer,sizeof(sDeviceInfo.HardwareVer));
    129          	//printfcom0("\r\n 能耗软件版本号:	");
    130          	///SendCOM0(sDeviceInfo.SoftwareVer,sizeof(sDeviceInfo.SoftwareVer));
    131          	
    132          	//printfcom0("\r\n ");
    133          	OilBoxCod = GetOilBoxCod();
   \   00000032   0x.... 0x....      BL       GetOilBoxCod
   \   00000036   0x0006             MOVS     R6,R0
    134          	///printfcom0("\r\n 油箱模型号:	%d",OilBoxCod);
    135          
    136          	DisplaySet(150,1,"C_%u",OilBoxCod);	
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0x0033             MOVS     R3,R6
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable9_6
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2096             MOVS     R0,#+150
   \   00000044   0x.... 0x....      BL       DisplaySet
    137          
    138          	Delay_Nms(1*1000);
   \   00000048   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004C   0x.... 0x....      BL       Delay_Nms
    139            	if(ReadReviseHight((stcReviseHight *) &sReviseHight))
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x.... 0x....      BL       ReadReviseHight
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD00F             BEQ.N    ??PrinfSysInfo_0
    140            	{	
    141            		ReviseHight = sReviseHight.ReviseHight / 10;
   \   0000005A   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \   0000005E   0x210A             MOVS     R1,#+10
   \   00000060   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000064   0x0005             MOVS     R5,R0
    142            		//printfcom0("\r\n 修正高度为:	%d",ReviseHight*10);
    143            		DisplaySet(100,1,"H_%d.",ReviseHight*10);		
   \   00000066   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000068   0x200A             MOVS     R0,#+10
   \   0000006A   0xFB00 0xF305      MUL      R3,R0,R5
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2064             MOVS     R0,#+100
   \   00000076   0x.... 0x....      BL       DisplaySet
    144          	}
    145          	Delay_Nms(1*1000);
   \                     ??PrinfSysInfo_0: (+1)
   \   0000007A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000007E   0x.... 0x....      BL       Delay_Nms
    146          		
    147            	if( ReadDensity((stcDensity *) &sDensity))			//取密度
   \   00000082   0xA801             ADD      R0,SP,#+4
   \   00000084   0x.... 0x....      BL       ReadDensity
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD016             BEQ.N    ??PrinfSysInfo_1
    148          	{
    149          		Density	=  ((float)sDensity.Density / 1000);
   \   0000008C   0x9803             LDR      R0,[SP, #+12]
   \   0000008E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable9_8  ;; 0x447a0000
   \   00000096   0x.... 0x....      BL       __aeabi_fdiv
   \   0000009A   0x0004             MOVS     R4,R0
    150            		DisplaySet(60,1,"d_%d.",(uint16)(1000*Density));		
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable9_8  ;; 0x447a0000
   \   000000A0   0x0021             MOVS     R1,R4
   \   000000A2   0x.... 0x....      BL       __aeabi_fmul
   \   000000A6   0x.... 0x....      BL       __aeabi_f2iz
   \   000000AA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AC   0x0003             MOVS     R3,R0
   \   000000AE   0x.... 0x....      LDR.W    R2,??DataTable9_9
   \   000000B2   0x2101             MOVS     R1,#+1
   \   000000B4   0x203C             MOVS     R0,#+60
   \   000000B6   0x.... 0x....      BL       DisplaySet
    151            	}
    152            	Delay_Nms(1*1000);
   \                     ??PrinfSysInfo_1: (+1)
   \   000000BA   0xF44F 0x707A      MOV      R0,#+1000
   \   000000BE   0x.... 0x....      BL       Delay_Nms
    153          
    154           	ReadFixInfo((stcFixInfo *)&sFix);
   \   000000C2   0xA807             ADD      R0,SP,#+28
   \   000000C4   0x.... 0x....      BL       ReadFixInfo
    155           	DisplaySet(100,1,"%d",sFix.LocoTyp);
   \   000000C8   0xF89D 0x301C      LDRB     R3,[SP, #+28]
   \   000000CC   0x....             ADR.N    R2,??DataTable5  ;; 0x25, 0x64, 0x00, 0x00
   \   000000CE   0x2101             MOVS     R1,#+1
   \   000000D0   0x2064             MOVS     R0,#+100
   \   000000D2   0x.... 0x....      BL       DisplaySet
    156          	Delay_Nms(1*1000);		
   \   000000D6   0xF44F 0x707A      MOV      R0,#+1000
   \   000000DA   0x.... 0x....      BL       Delay_Nms
    157           	//DisplaySet(100,1,"%d",(uint16)*sFix.LocoNum);		
    158           	DisplaySet(100,1,"N_%d",sFix.LocoNum[0]+sFix.LocoNum[1]*256);	
   \   000000DE   0xF89D 0x001E      LDRB     R0,[SP, #+30]
   \   000000E2   0xF89D 0x101F      LDRB     R1,[SP, #+31]
   \   000000E6   0xF44F 0x7280      MOV      R2,#+256
   \   000000EA   0xFB02 0x0301      MLA      R3,R2,R1,R0
   \   000000EE   0x.... 0x....      LDR.W    R2,??DataTable9_10
   \   000000F2   0x2101             MOVS     R1,#+1
   \   000000F4   0x2064             MOVS     R0,#+100
   \   000000F6   0x.... 0x....      BL       DisplaySet
    159          		
    160          // 	Delay_Nms(2*1000);
    161          
    162          	DisplaySet(60,1,"        ");
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable9_11
   \   000000FE   0x2101             MOVS     R1,#+1
   \   00000100   0x203C             MOVS     R0,#+60
   \   00000102   0x.... 0x....      BL       DisplaySet
    163            	DisplaySet(60,1,"88888888");		
   \   00000106   0x.... 0x....      LDR.W    R2,??DataTable9_12
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0x203C             MOVS     R0,#+60
   \   0000010E   0x.... 0x....      BL       DisplaySet
    164           	DisplaySet(60,1,"        ");	
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable9_11
   \   00000116   0x2101             MOVS     R1,#+1
   \   00000118   0x203C             MOVS     R0,#+60
   \   0000011A   0x.... 0x....      BL       DisplaySet
    165          	
    166          //	Delay_Nms(2*1000);	
    167          }
   \   0000011E   0xB018             ADD      SP,SP,#+96
   \   00000120   0xBD70             POP      {R4-R6,PC}       ;; return
    168          

   \                                 In section .text, align 2, keep-with-next
    169          uint8 OneTask(void)   
    170          {
   \                     OneTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    171          //	UART0Init();
    172          //	UART1Init();
    173          //	UART2Init();
    174          //	UART3Init();
    175          
    176          	InitDisplay();
   \   00000002   0x.... 0x....      BL       InitDisplay
    177          	DisplayString("88888888");
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable9_12
   \   0000000A   0x.... 0x....      BL       DisplayString
    178          	
    179          
    180          	//ClaerDisplaySetWithoutStore();
    181          
    182          	//InitLed();
    183          
    184          
    185          ////	InitCardIO();
    186          ////	InitFramIO();
    187          ////	InitFlashIO();
    188          ////
    189          ////	InitDS3231();
    190          ////	InitAdc();
    191          ////
    192          ////	Time0Init();
    193          ////	Time1Init();
    194          ////	Time2Init();
    195          	return	1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    196          }
    197          

   \                                 In section .text, align 2, keep-with-next
    198          uint8 HoldTask(void)   
    199          {
   \                     HoldTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    200          	HoldDisplay();
   \   00000002   0x.... 0x....      BL       HoldDisplay
    201          	HoldLed();
   \   00000006   0x.... 0x....      BL       HoldLed
    202          	HoldCard();								//IC卡维护
   \   0000000A   0x.... 0x....      BL       HoldCard
    203          	
    204          	return	1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    205          }
    206          
    207          #define			PLUG_IN_CARD		1
    208          //----------------------------------------------------------------------------
    209          // 名    称：   void IncDisplay(void)
    210          // 功    能:    系统初始化
    211          // 入口参数：
    212          // 出口参数：
    213          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    214          void IncDisplay(void)
    215          { 
   \                     IncDisplay: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    216          	static	uint32		Time = 0;
    217          //	static	uint32		Times = 0;
    218          	int16	Prs1,Prs2;	
    219          	uint8	i;
    220          
    221          	Time = GetSysTime();
   \   00000004   0x.... 0x....      BL       GetSysTime
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable9_13
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    222          
    223          	for(i =0 ;i<3;)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0006             MOVS     R6,R0
   \                     ??IncDisplay_0: (+1)
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E03             CMP      R6,#+3
   \   00000016   0xDA31             BGE.N    ??IncDisplay_1
    224          	{
    225          //		COM0Task();
    226          		
    227          		Prs1 = GetDip1Prs();
   \   00000018   0x.... 0x....      BL       GetDip1Prs
   \   0000001C   0x0004             MOVS     R4,R0
    228          		Prs2 = GetDip2Prs();		
   \   0000001E   0x.... 0x....      BL       GetDip2Prs
   \   00000022   0x0005             MOVS     R5,R0
    229          		
    230          		//printfcom0("\r\n %4d.%4d",Prs1,Prs2);
    231          		if(GetSysTime() - Time > 100)
   \   00000024   0x.... 0x....      BL       GetSysTime
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable9_13
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x1A40             SUBS     R0,R0,R1
   \   00000030   0x2865             CMP      R0,#+101
   \   00000032   0xD3EE             BCC.N    ??IncDisplay_0
    232          		{		
    233          			i++;
   \   00000034   0x1C76             ADDS     R6,R6,#+1
    234          			Time = GetSysTime();
   \   00000036   0x.... 0x....      BL       GetSysTime
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable9_13
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    235          	
    236          			if(i%2 == 0)
   \   00000040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   00000048   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   0000004C   0x2900             CMP      R1,#+0
   \   0000004E   0xD10A             BNE.N    ??IncDisplay_2
    237          			{
    238          				DisplaySet(100,1,"%4d.%4d.",Prs1,Prs2);
   \   00000050   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000052   0x9500             STR      R5,[SP, #+0]
   \   00000054   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000056   0x0023             MOVS     R3,R4
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable9_14
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x2064             MOVS     R0,#+100
   \   00000060   0x.... 0x....      BL       DisplaySet
   \   00000064   0xE7D5             B.N      ??IncDisplay_0
    239          			}
    240          			else
    241          			{
    242          				DisplaySet(100,1,"%4d.%4d",Prs1,Prs2);
   \                     ??IncDisplay_2: (+1)
   \   00000066   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000068   0x9500             STR      R5,[SP, #+0]
   \   0000006A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000006C   0x0023             MOVS     R3,R4
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable9_15
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2064             MOVS     R0,#+100
   \   00000076   0x.... 0x....      BL       DisplaySet
   \   0000007A   0xE7CA             B.N      ??IncDisplay_0
    243          			}
    244          		}
    245          	}
    246          
    247          
    248          /*	while(GetPlugFlg() == PLUG_IN_CARD)  //有东西插入
    249          	{
    250          		COM0Task();
    251          
    252          		if(Times < 1*20)		//1分钟通信
    253          		{	
    254          			COM0Task();
    255          		}
    256          					
    257          		Prs1 = GetDip1Prs();
    258          		Prs2 = GetDip2Prs();
    259          
    260          		if(GetSysTime() - Time > 100)
    261          		{		
    262          			Time = GetSysTime();
    263          
    264          			Times++;
    265          			
    266          			if(Prs1<10000 && Prs2 < 10000)
    267          			{			
    268          				if(Times%2 == 0)
    269          				{
    270          					DisplaySet(100,1,"%4d.%4d.",Prs1,Prs2);
    271          				}
    272          				else
    273          				{
    274          					DisplaySet(100,1,"%4d.%4d",Prs1,Prs2);
    275          				}
    276          			}
    277          			else
    278          			{
    279          				DisplaySet(100,1,"%d",Prs1);
    280          				DisplaySet(100,1,"%d.",Prs2);
    281          			}
    282          		}
    283          		
    284          		if(Times > 1*60)		//2分钟退出
    285          		{	
    286          			Delay_Nms(200);
    287          			return;
    288          		}
    289          	}	
    290          	
    291          	Delay_Nms(200);
    292          */	
    293          	DisplaySet(150,1,"%d",g_CurFlshRecNum);
   \                     ??IncDisplay_1: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable9_16
   \   00000080   0x6803             LDR      R3,[R0, #+0]
   \   00000082   0x....             ADR.N    R2,??DataTable5  ;; 0x25, 0x64, 0x00, 0x00
   \   00000084   0x2101             MOVS     R1,#+1
   \   00000086   0x2096             MOVS     R0,#+150
   \   00000088   0x.... 0x....      BL       DisplaySet
    294          	DisplaySet(150,1,"%d.",g_LshRedFlshRecNum);
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable9_17
   \   00000090   0x6803             LDR      R3,[R0, #+0]
   \   00000092   0x....             ADR.N    R2,??DataTable7  ;; "%d."
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x2096             MOVS     R0,#+150
   \   00000098   0x.... 0x....      BL       DisplaySet
    295          	printfcom0("\r\n g_CurFlshRecNum %d, g_LshRedFlshRecNum %d",g_CurFlshRecNum,g_LshRedFlshRecNum);
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable9_17
   \   000000A0   0x6802             LDR      R2,[R0, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable9_16
   \   000000A6   0x6801             LDR      R1,[R0, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable9_18
   \   000000AC   0x.... 0x....      BL       printfcom0
    296          }
   \   000000B0   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .bss, align 4
   \                     ??Time_1:
   \   00000000                      DS8 4
    297          

   \                                 In section .text, align 2, keep-with-next
    298          void	OneTaskTimes(void)
    299          {
   \                     OneTaskTimes: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    300          	OneTask();
   \   00000002   0x.... 0x....      BL       OneTask
    301          	
    302          	g_CurFlshRecNum 	= GetCurFlshRecNum();
   \   00000006   0x.... 0x....      BL       GetCurFlshRecNum
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable9_16
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    303          	g_LshRedFlshRecNum  = GetLstFlshRecNum();
   \   00000010   0x.... 0x....      BL       GetLstFlshRecNum
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable9_17
   \   00000018   0x6008             STR      R0,[R1, #+0]
    304          	g_LshRedFlshRecNum_gprs  = GetLstFlshRecNum_gprs();
   \   0000001A   0x.... 0x....      BL       GetLstFlshRecNum_gprs
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable9_19
   \   00000022   0x6008             STR      R0,[R1, #+0]
    305          
    306          
    307             	//printfcom0("\r\n 当前 %d,已读 %d,已发GPRS %d",g_CurFlshRecNum,g_LshRedFlshRecNum,g_LshRedFlshRecNum_gprs);
    308           	PrinfSysInfo();
   \   00000024   0x.... 0x....      BL       PrinfSysInfo
    309          //	IncDisplay();
    310          	///InitEvtDealSys();
    311          	///InitErrDealSys();
    312          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    313          
    314          
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void	LedTast(uint8	flg)
    317          {
   \                     LedTast: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    318          	static	uint32	Time = 0;
    319          	uint8	led0com1flg 	= 0;
   \   00000006   0x2500             MOVS     R5,#+0
    320          	uint8	led1com2flg 	= 0;
   \   00000008   0x2600             MOVS     R6,#+0
    321          	uint8	led2com3flg 	= 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    322          	uint8	locoworksta;
    323          		
    324          	if((GetSysTime()  - Time > 100) || flg == 1)
   \   0000000C   0x.... 0x....      BL       GetSysTime
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable9_20
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x1A40             SUBS     R0,R0,R1
   \   00000018   0x2865             CMP      R0,#+101
   \   0000001A   0xD203             BCS.N    ??LedTast_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C01             CMP      R4,#+1
   \   00000020   0xF040 0x80CD      BNE.W    ??LedTast_1
    325          	{
    326          		Time = GetSysTime();
   \                     ??LedTast_0: (+1)
   \   00000024   0x.... 0x....      BL       GetSysTime
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable9_20
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    327          
    328          		led0com1flg = GetLed0Com1Flg();
   \   0000002E   0x.... 0x....      BL       GetLed0Com1Flg
   \   00000032   0x0005             MOVS     R5,R0
    329          		switch(led0com1flg)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD002             BEQ.N    ??LedTast_2
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD00B             BEQ.N    ??LedTast_3
   \   00000040   0xE015             B.N      ??LedTast_4
    330          		{
    331          			case  COM_LED_REC:
    332          								OffLed(COM1_STA_LED);
   \                     ??LedTast_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       OffLed
    333          								OnLed(COM1_STA_LED,3000,50,50);
   \   00000048   0x2332             MOVS     R3,#+50
   \   0000004A   0x2232             MOVS     R2,#+50
   \   0000004C   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       OnLed
    334          								break; //慢闪
   \   00000056   0xE00D             B.N      ??LedTast_5
    335          								
    336          			case  COM_LED_DATA:
    337          								OffLed(COM1_STA_LED);
   \                     ??LedTast_3: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       OffLed
    338          								OnLed(COM1_STA_LED,3000,5,5);
   \   0000005E   0x2305             MOVS     R3,#+5
   \   00000060   0x2205             MOVS     R2,#+5
   \   00000062   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      BL       OnLed
    339          								break;  //慢闪
   \   0000006C   0xE002             B.N      ??LedTast_5
    340          			default:
    341          //								printfcom0("\r\n com1 无通讯");
    342          								OffLed(COM1_STA_LED);
   \                     ??LedTast_4: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       OffLed
    343          		}
    344          
    345          		led1com2flg = GetLed1Com2Flg();
   \                     ??LedTast_5: (+1)
   \   00000074   0x.... 0x....      BL       GetLed1Com2Flg
   \   00000078   0x0006             MOVS     R6,R0
    346          		switch(led1com2flg)
   \   0000007A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0x2801             CMP      R0,#+1
   \   00000080   0xD002             BEQ.N    ??LedTast_6
   \   00000082   0x2802             CMP      R0,#+2
   \   00000084   0xD00B             BEQ.N    ??LedTast_7
   \   00000086   0xE015             B.N      ??LedTast_8
    347          		{
    348          			case  COM_LED_REC:
    349          								OffLed(COM2_STA_LED);
   \                     ??LedTast_6: (+1)
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x.... 0x....      BL       OffLed
    350          								OnLed(COM2_STA_LED,3000,55,55);
   \   0000008E   0x2337             MOVS     R3,#+55
   \   00000090   0x2237             MOVS     R2,#+55
   \   00000092   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x.... 0x....      BL       OnLed
    351          								break; //慢闪
   \   0000009C   0xE00D             B.N      ??LedTast_9
    352          								
    353          			case  COM_LED_DATA:
    354          								OffLed(COM2_STA_LED);
   \                     ??LedTast_7: (+1)
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x.... 0x....      BL       OffLed
    355          								OnLed(COM2_STA_LED,3000,6,6);
   \   000000A4   0x2306             MOVS     R3,#+6
   \   000000A6   0x2206             MOVS     R2,#+6
   \   000000A8   0xF640 0x31B8      MOVW     R1,#+3000
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x.... 0x....      BL       OnLed
    356          								break;  //慢闪
   \   000000B2   0xE002             B.N      ??LedTast_9
    357          			default:
    358          //								printfcom0("\r\n com2 无通讯");
    359          								OffLed(COM2_STA_LED);
   \                     ??LedTast_8: (+1)
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x.... 0x....      BL       OffLed
    360          		}
    361          
    362          		led2com3flg = GetLed2Com3Flg();
   \                     ??LedTast_9: (+1)
   \   000000BA   0x.... 0x....      BL       GetLed2Com3Flg
   \   000000BE   0x0007             MOVS     R7,R0
    363          		switch(led2com3flg)
   \   000000C0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C2   0x0038             MOVS     R0,R7
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xD002             BEQ.N    ??LedTast_10
   \   000000C8   0x2802             CMP      R0,#+2
   \   000000CA   0xD00B             BEQ.N    ??LedTast_11
   \   000000CC   0xE015             B.N      ??LedTast_12
    364          		{
    365          			case  COM_LED_REC:
    366          								OffLed(COM3_STA_LED);
   \                     ??LedTast_10: (+1)
   \   000000CE   0x2002             MOVS     R0,#+2
   \   000000D0   0x.... 0x....      BL       OffLed
    367          								OnLed(COM3_STA_LED,3000,45,45);
   \   000000D4   0x232D             MOVS     R3,#+45
   \   000000D6   0x222D             MOVS     R2,#+45
   \   000000D8   0xF640 0x31B8      MOVW     R1,#+3000
   \   000000DC   0x2002             MOVS     R0,#+2
   \   000000DE   0x.... 0x....      BL       OnLed
    368          								break; //慢闪
   \   000000E2   0xE00D             B.N      ??LedTast_13
    369          								
    370          			case  COM_LED_DATA:
    371          								OffLed(COM3_STA_LED);
   \                     ??LedTast_11: (+1)
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x.... 0x....      BL       OffLed
    372          								OnLed(COM3_STA_LED,3000,4,4);
   \   000000EA   0x2304             MOVS     R3,#+4
   \   000000EC   0x2204             MOVS     R2,#+4
   \   000000EE   0xF640 0x31B8      MOVW     R1,#+3000
   \   000000F2   0x2002             MOVS     R0,#+2
   \   000000F4   0x.... 0x....      BL       OnLed
    373          								break;  //慢闪
   \   000000F8   0xE002             B.N      ??LedTast_13
    374          			default:
    375          //								printfcom0("\r\n com3 无通讯");
    376          								OffLed(COM3_STA_LED);
   \                     ??LedTast_12: (+1)
   \   000000FA   0x2002             MOVS     R0,#+2
   \   000000FC   0x.... 0x....      BL       OffLed
    377          		}
    378          
    379          		if(GetMySpeed1())
   \                     ??LedTast_13: (+1)
   \   00000100   0x.... 0x....      BL       GetMySpeed1
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD007             BEQ.N    ??LedTast_14
    380          		{
    381          			OnLed(SPEED1_LED,3000,4,4);
   \   00000108   0x2304             MOVS     R3,#+4
   \   0000010A   0x2204             MOVS     R2,#+4
   \   0000010C   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000110   0x2003             MOVS     R0,#+3
   \   00000112   0x.... 0x....      BL       OnLed
   \   00000116   0xE002             B.N      ??LedTast_15
    382          		}
    383          		else
    384          		{
    385          			OffLed(SPEED1_LED);
   \                     ??LedTast_14: (+1)
   \   00000118   0x2003             MOVS     R0,#+3
   \   0000011A   0x.... 0x....      BL       OffLed
    386          		}
    387          
    388          		if(GetMySpeed2())
   \                     ??LedTast_15: (+1)
   \   0000011E   0x.... 0x....      BL       GetMySpeed2
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD007             BEQ.N    ??LedTast_16
    389          		{
    390          			OnLed(SPEED2_LED,3000,4,4);
   \   00000126   0x2304             MOVS     R3,#+4
   \   00000128   0x2204             MOVS     R2,#+4
   \   0000012A   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000012E   0x2004             MOVS     R0,#+4
   \   00000130   0x.... 0x....      BL       OnLed
   \   00000134   0xE002             B.N      ??LedTast_17
    391          		}
    392          		else
    393          		{
    394          			OffLed(SPEED2_LED);
   \                     ??LedTast_16: (+1)
   \   00000136   0x2004             MOVS     R0,#+4
   \   00000138   0x.... 0x....      BL       OffLed
    395          		}
    396          
    397          		if(GetMyEngRotSpd())
   \                     ??LedTast_17: (+1)
   \   0000013C   0x.... 0x....      BL       GetMyEngRotSpd
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD007             BEQ.N    ??LedTast_18
    398          		{
    399          			OnLed(CSPEED_LED,3000,4,4);
   \   00000144   0x2304             MOVS     R3,#+4
   \   00000146   0x2204             MOVS     R2,#+4
   \   00000148   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000014C   0x2005             MOVS     R0,#+5
   \   0000014E   0x.... 0x....      BL       OnLed
   \   00000152   0xE002             B.N      ??LedTast_19
    400          		}
    401          		else
    402          		{
    403          			OffLed(CSPEED_LED);
   \                     ??LedTast_18: (+1)
   \   00000154   0x2005             MOVS     R0,#+5
   \   00000156   0x.... 0x....      BL       OffLed
    404          		}
    405          
    406          		locoworksta = GetMyLocoWorkState();
   \                     ??LedTast_19: (+1)
   \   0000015A   0x.... 0x....      BL       GetMyLocoWorkState
   \   0000015E   0x4680             MOV      R8,R0
    407          		switch(locoworksta)
   \   00000160   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000164   0x4640             MOV      R0,R8
   \   00000166   0x2801             CMP      R0,#+1
   \   00000168   0xD006             BEQ.N    ??LedTast_20
   \   0000016A   0x2804             CMP      R0,#+4
   \   0000016C   0xD01C             BEQ.N    ??LedTast_21
   \   0000016E   0x2808             CMP      R0,#+8
   \   00000170   0xD012             BEQ.N    ??LedTast_22
   \   00000172   0x2810             CMP      R0,#+16
   \   00000174   0xD008             BEQ.N    ??LedTast_23
   \   00000176   0xE01F             B.N      ??LedTast_24
    408          		{
    409          			case 0x01<<0:
    410          					OnLed(LOCOSTA_LED,3000,2,2);
   \                     ??LedTast_20: (+1)
   \   00000178   0x2302             MOVS     R3,#+2
   \   0000017A   0x2202             MOVS     R2,#+2
   \   0000017C   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000180   0x2006             MOVS     R0,#+6
   \   00000182   0x.... 0x....      BL       OnLed
    411          					break;
   \   00000186   0xE01A             B.N      ??LedTast_1
    412          			case 0x01<<4:
    413          					OnLed(LOCOSTA_LED,3000,10,10);
   \                     ??LedTast_23: (+1)
   \   00000188   0x230A             MOVS     R3,#+10
   \   0000018A   0x220A             MOVS     R2,#+10
   \   0000018C   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000190   0x2006             MOVS     R0,#+6
   \   00000192   0x.... 0x....      BL       OnLed
    414          					break;
   \   00000196   0xE012             B.N      ??LedTast_1
    415          			case 0x01<<3:
    416          					OnLed(LOCOSTA_LED,3000,90,40);
   \                     ??LedTast_22: (+1)
   \   00000198   0x2328             MOVS     R3,#+40
   \   0000019A   0x225A             MOVS     R2,#+90
   \   0000019C   0xF640 0x31B8      MOVW     R1,#+3000
   \   000001A0   0x2006             MOVS     R0,#+6
   \   000001A2   0x.... 0x....      BL       OnLed
    417          					break;
   \   000001A6   0xE00A             B.N      ??LedTast_1
    418          			case 0x01<<2:
    419          					OnLed(LOCOSTA_LED,3000,150,60);
   \                     ??LedTast_21: (+1)
   \   000001A8   0x233C             MOVS     R3,#+60
   \   000001AA   0x2296             MOVS     R2,#+150
   \   000001AC   0xF640 0x31B8      MOVW     R1,#+3000
   \   000001B0   0x2006             MOVS     R0,#+6
   \   000001B2   0x.... 0x....      BL       OnLed
    420          					break;
   \   000001B6   0xE002             B.N      ??LedTast_1
    421          			default:
    422          				OffLed(LOCOSTA_LED);
   \                     ??LedTast_24: (+1)
   \   000001B8   0x2006             MOVS     R0,#+6
   \   000001BA   0x.... 0x....      BL       OffLed
    423          
    424          		}
    425          	}
    426          }
   \                     ??LedTast_1: (+1)
   \   000001BE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??Time_2:
   \   00000000                      DS8 4
    427          

   \                                 In section .text, align 2, keep-with-next
    428          void	DisplayOnceInfo(void)
    429          {
   \                     DisplayOnceInfo: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    430          	int16	hig1,hig2;
    431          	uint16  speed1,speed2;
    432          	uint16	cspeed;
    433          	uint8	worksta;
    434          
    435          	hig1 	= GetDip1Hig();
   \   00000004   0x.... 0x....      BL       GetDip1Hig
   \   00000008   0x0004             MOVS     R4,R0
    436          	hig2 	= GetDip2Hig();
   \   0000000A   0x.... 0x....      BL       GetDip2Hig
   \   0000000E   0x0005             MOVS     R5,R0
    437          	speed1 	= GetMySpeed1();
   \   00000010   0x.... 0x....      BL       GetMySpeed1
   \   00000014   0x0007             MOVS     R7,R0
    438          	speed2 	= GetMySpeed2();
   \   00000016   0x.... 0x....      BL       GetMySpeed2
   \   0000001A   0x4680             MOV      R8,R0
    439          	cspeed 	= GetMyEngRotSpd();
   \   0000001C   0x.... 0x....      BL       GetMyEngRotSpd
   \   00000020   0x4681             MOV      R9,R0
    440          	worksta	= GetMyLocoWorkState();
   \   00000022   0x.... 0x....      BL       GetMyLocoWorkState
   \   00000026   0x0006             MOVS     R6,R0
    441          
    442          	ClaerDisplaySetWithoutStore();
   \   00000028   0x.... 0x....      BL       ClaerDisplaySetWithoutStore
    443          
    444          	DisplaySet(150,1,"%4d.%4d",hig1%10000,hig2%10000);
   \   0000002C   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000002E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000032   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000034   0xF242 0x7110      MOVW     R1,#+10000
   \   00000038   0xFB95 0xF2F0      SDIV     R2,R5,R0
   \   0000003C   0xFB00 0x5012      MLS      R0,R0,R2,R5
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0xFB94 0xF0F1      SDIV     R0,R4,R1
   \   00000046   0xFB01 0x4310      MLS      R3,R1,R0,R4
   \   0000004A   0x....             LDR.N    R2,??DataTable9_15
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2096             MOVS     R0,#+150
   \   00000050   0x.... 0x....      BL       DisplaySet
    445          	DisplaySet(150,1,"V-%d",speed1%1000);
   \   00000054   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000056   0xF44F 0x707A      MOV      R0,#+1000
   \   0000005A   0xFB97 0xF1F0      SDIV     R1,R7,R0
   \   0000005E   0xFB00 0x7311      MLS      R3,R0,R1,R7
   \   00000062   0x....             LDR.N    R2,??DataTable9_21
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x2096             MOVS     R0,#+150
   \   00000068   0x.... 0x....      BL       DisplaySet
    446          	DisplaySet(150,1,"V.%d",speed2%1000);
   \   0000006C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000070   0xF44F 0x707A      MOV      R0,#+1000
   \   00000074   0xFB98 0xF1F0      SDIV     R1,R8,R0
   \   00000078   0xFB00 0x8311      MLS      R3,R0,R1,R8
   \   0000007C   0x....             LDR.N    R2,??DataTable9_22
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x2096             MOVS     R0,#+150
   \   00000082   0x.... 0x....      BL       DisplaySet
    447          	DisplaySet(150,1,"C.%d",cspeed%10000);
   \   00000086   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000008A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000008E   0xFB99 0xF1F0      SDIV     R1,R9,R0
   \   00000092   0xFB00 0x9311      MLS      R3,R0,R1,R9
   \   00000096   0x....             LDR.N    R2,??DataTable9_23
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x2096             MOVS     R0,#+150
   \   0000009C   0x.... 0x....      BL       DisplaySet
    448          	DisplaySet(150,1,"%d",worksta);
   \   000000A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A2   0x0033             MOVS     R3,R6
   \   000000A4   0x....             ADR.N    R2,??DataTable9  ;; 0x25, 0x64, 0x00, 0x00
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0x2096             MOVS     R0,#+150
   \   000000AA   0x.... 0x....      BL       DisplaySet
    449          
    450          //	printfcom0("\r\n hig1 %d,%d,%d,%d,%d,%d ",hig1,hig2,speed1,speed2,cspeed,worksta);
    451          }
   \   000000AE   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    452          
    453          

   \                                 In section .text, align 2, keep-with-next
    454          void	DisplayDipVal()
    455          {
   \                     DisplayDipVal: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    456          	static	uint32	Time = 0;
    457          	static	uint32	times = 0;
    458          	static	uint32	ZeroTimes = 0;
    459          	static	uint32	errtimes = 0;
    460          	uint8	hosterrflg;
    461          	uint8	diperrflg;
    462          	
    463          	if(GetSysTime()  - Time > 150)
   \   00000002   0x.... 0x....      BL       GetSysTime
   \   00000006   0x....             LDR.N    R1,??DataTable9_24
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x2897             CMP      R0,#+151
   \   0000000E   0xF0C0 0x8089      BCC.W    ??DisplayDipVal_0
    464          	{
    465          		Time = GetSysTime();
   \   00000012   0x.... 0x....      BL       GetSysTime
   \   00000016   0x....             LDR.N    R1,??DataTable9_24
   \   00000018   0x6008             STR      R0,[R1, #+0]
    466          		times++;
   \   0000001A   0x....             LDR.N    R0,??DataTable9_25
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable9_25
   \   00000022   0x6008             STR      R0,[R1, #+0]
    467          
    468          		if(times < 10)
   \   00000024   0x....             LDR.N    R0,??DataTable9_25
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xD209             BCS.N    ??DisplayDipVal_1
    469          		{
    470          			if(times == 5)
   \   0000002C   0x....             LDR.N    R0,??DataTable9_25
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2805             CMP      R0,#+5
   \   00000032   0xD101             BNE.N    ??DisplayDipVal_2
    471          			{	
    472          				DisplayOnceInfo();
   \   00000034   0x.... 0x....      BL       DisplayOnceInfo
    473          			}
    474          			Delay_Nms(50);
   \                     ??DisplayDipVal_2: (+1)
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       Delay_Nms
    475          			return;
   \   0000003E   0xE071             B.N      ??DisplayDipVal_3
    476          		}
    477          
    478          		hosterrflg = GetHostErrFlg();
   \                     ??DisplayDipVal_1: (+1)
   \   00000040   0x.... 0x....      BL       GetHostErrFlg
   \   00000044   0x0004             MOVS     R4,R0
    479          		diperrflg  = GetDipErrFlg();
   \   00000046   0x.... 0x....      BL       GetDipErrFlg
   \   0000004A   0x0005             MOVS     R5,R0
    480          
    481          		if(hosterrflg != RIGHT_DATA || diperrflg != RIGHT_DATA)
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2CFF             CMP      R4,#+255
   \   00000050   0xD102             BNE.N    ??DisplayDipVal_4
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x2DFF             CMP      R5,#+255
   \   00000056   0xD022             BEQ.N    ??DisplayDipVal_5
    482          		{
    483          			errtimes++;
   \                     ??DisplayDipVal_4: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable9_26
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x....             LDR.N    R1,??DataTable9_26
   \   00000060   0x6008             STR      R0,[R1, #+0]
    484          			if(errtimes % 4 == 0)
   \   00000062   0x....             LDR.N    R0,??DataTable9_26
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x2104             MOVS     R1,#+4
   \   00000068   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000006C   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000070   0x2A00             CMP      R2,#+0
   \   00000072   0xD114             BNE.N    ??DisplayDipVal_5
    485          			{
    486          				 if(hosterrflg != RIGHT_DATA  )
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0x2CFF             CMP      R4,#+255
   \   00000078   0xD006             BEQ.N    ??DisplayDipVal_6
    487          				 {
    488          					DisplaySet(50,1,"E-%u",hosterrflg);	//显示油量值
   \   0000007A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007C   0x0023             MOVS     R3,R4
   \   0000007E   0x....             LDR.N    R2,??DataTable9_27
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0x2032             MOVS     R0,#+50
   \   00000084   0x.... 0x....      BL       DisplaySet
    489          				 }
    490          				 if(diperrflg != RIGHT_DATA  )
   \                     ??DisplayDipVal_6: (+1)
   \   00000088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008A   0x2DFF             CMP      R5,#+255
   \   0000008C   0xD006             BEQ.N    ??DisplayDipVal_7
    491          				 {
    492          					DisplaySet(50,1,"E-%u",diperrflg);	//显示油量值
   \   0000008E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000090   0x002B             MOVS     R3,R5
   \   00000092   0x....             LDR.N    R2,??DataTable9_27
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x2032             MOVS     R0,#+50
   \   00000098   0x.... 0x....      BL       DisplaySet
    493          				 }
    494          
    495          				 return;
   \                     ??DisplayDipVal_7: (+1)
   \   0000009C   0xE042             B.N      ??DisplayDipVal_3
    496          			}
    497          		}
    498          
    499          		if(g_DipDisVal)
   \                     ??DisplayDipVal_5: (+1)
   \   0000009E   0x....             LDR.N    R0,??DataTable9_28
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD012             BEQ.N    ??DisplayDipVal_8
    500          		{
    501          			DisplaySet(60,1,"%u",g_DipDisVal % 10000);	//显示油量值
   \   000000A6   0xF242 0x7010      MOVW     R0,#+10000
   \   000000AA   0x....             LDR.N    R1,??DataTable9_28
   \   000000AC   0x6809             LDR      R1,[R1, #+0]
   \   000000AE   0x....             LDR.N    R2,??DataTable9_28
   \   000000B0   0x6812             LDR      R2,[R2, #+0]
   \   000000B2   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000B6   0xFB00 0x1312      MLS      R3,R0,R2,R1
   \   000000BA   0x....             ADR.N    R2,??DataTable9_1  ;; 0x25, 0x75, 0x00, 0x00
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x203C             MOVS     R0,#+60
   \   000000C0   0x.... 0x....      BL       DisplaySet
    502          			ZeroTimes = 0;
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x....             LDR.N    R1,??DataTable9_29
   \   000000C8   0x6008             STR      R0,[R1, #+0]
   \   000000CA   0xE017             B.N      ??DisplayDipVal_9
    503          		}	
    504          		else
    505          		{
    506          			ZeroTimes++;
   \                     ??DisplayDipVal_8: (+1)
   \   000000CC   0x....             LDR.N    R0,??DataTable9_29
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \   000000D2   0x....             LDR.N    R1,??DataTable9_29
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    507          			if(ZeroTimes > 5)
   \   000000D6   0x....             LDR.N    R0,??DataTable9_29
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x2806             CMP      R0,#+6
   \   000000DC   0xD30E             BCC.N    ??DisplayDipVal_9
    508          			{
    509          				DisplaySet(60,1,"%u",g_DipDisVal % 10000);	//显示油量值
   \   000000DE   0xF242 0x7010      MOVW     R0,#+10000
   \   000000E2   0x....             LDR.N    R1,??DataTable9_28
   \   000000E4   0x6809             LDR      R1,[R1, #+0]
   \   000000E6   0x....             LDR.N    R2,??DataTable9_28
   \   000000E8   0x6812             LDR      R2,[R2, #+0]
   \   000000EA   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   000000EE   0xFB00 0x1312      MLS      R3,R0,R2,R1
   \   000000F2   0x....             ADR.N    R2,??DataTable9_1  ;; 0x25, 0x75, 0x00, 0x00
   \   000000F4   0x2101             MOVS     R1,#+1
   \   000000F6   0x203C             MOVS     R0,#+60
   \   000000F8   0x.... 0x....      BL       DisplaySet
    510          			}
    511          		}		
    512          		
    513          		if(times %20 == 0)
   \                     ??DisplayDipVal_9: (+1)
   \   000000FC   0x2014             MOVS     R0,#+20
   \   000000FE   0x....             LDR.N    R1,??DataTable9_25
   \   00000100   0x6809             LDR      R1,[R1, #+0]
   \   00000102   0x....             LDR.N    R2,??DataTable9_25
   \   00000104   0x6812             LDR      R2,[R2, #+0]
   \   00000106   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \   0000010A   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD101             BNE.N    ??DisplayDipVal_10
    514          		{
    515          			InitDisplay();
   \   00000112   0x.... 0x....      BL       InitDisplay
    516          		}
    517          		
    518          		OnLed(RUN_LED,3000,5,5);
   \                     ??DisplayDipVal_10: (+1)
   \   00000116   0x2305             MOVS     R3,#+5
   \   00000118   0x2205             MOVS     R2,#+5
   \   0000011A   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000011E   0x2007             MOVS     R0,#+7
   \   00000120   0x.... 0x....      BL       OnLed
    519          	}
    520          }	
   \                     ??DisplayDipVal_0: (+1)
   \                     ??DisplayDipVal_3: (+1)
   \   00000124   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ??Time_3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??times:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??ZeroTimes:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??errtimes:
   \   00000000                      DS8 4
    521          

   \                                 In section .text, align 2, keep-with-next
    522          uint8 TestTask(void)  
    523          {
   \                     TestTask: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
    524          	uint32	FlshAddr;
    525          
    526          	stcFlshRec sFlshRec;
    527          
    528          	g_CurFlshRecNum++;
   \   00000004   0x....             LDR.N    R0,??DataTable9_16
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable9_16
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    529           	StoreCurFlshRecNum( g_CurFlshRecNum );           		//把流水号存入铁电
   \   0000000E   0x....             LDR.N    R0,??DataTable9_16
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       StoreCurFlshRecNum
    530          	ReadCurFlshRecNum( g_CurFlshRecNum );           		//把流水号存入铁电	
   \   00000016   0x....             LDR.N    R0,??DataTable9_16
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       ReadCurFlshRecNum
    531          	//printfcom0("\r\n g_CurFlshRecNum %d",g_CurFlshRecNum);
    532          
    533            	FlshAddr = GetRecNumAddr( g_CurFlshRecNum );
   \   0000001E   0x....             LDR.N    R0,??DataTable9_16
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       GetRecNumAddr
   \   00000026   0x0004             MOVS     R4,R0
    534              
    535          	sFlshRec.StoreCnt =  g_CurFlshRecNum;
   \   00000028   0x....             LDR.N    R0,??DataTable9_16
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    536          	if(!WriteFlsh(FlshAddr, (uint8 *)&sFlshRec, sizeof(sFlshRec)))
   \   0000002E   0x2280             MOVS     R2,#+128
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       WriteFlsh
    537          	{
    538          		//printfcom0("\r\n WriteFlsh %d",FlshAddr);		
    539          	}
    540          
    541          	WriteFlsh(FlshAddr, (uint8 *)&sFlshRec, sizeof(sFlshRec));
   \   00000038   0x2280             MOVS     R2,#+128
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       WriteFlsh
    542          	//printfcom0("\r\n sFlshRec.StoreCnt %d",sFlshRec.StoreCnt);
    543          	return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xB020             ADD      SP,SP,#+128
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    544          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x25 0x64          DC8      "%d."
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x25 0x75          DC8      0x25, 0x75, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     l_hostevtflg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     ??Time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     ??Time_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     g_CurFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum_gprs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   0x........         DC32     ??Time_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_21:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_22:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_23:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_24:
   \   00000000   0x........         DC32     ??Time_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_25:
   \   00000000   0x........         DC32     ??times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_26:
   \   00000000   0x........         DC32     ??errtimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_27:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_28:
   \   00000000   0x........         DC32     g_DipDisVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_29:
   \   00000000   0x........         DC32     ??ZeroTimes

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x56          DC8 "SV.00"
   \              0x2E 0x30    
   \              0x30 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x48 0x56          DC8 "HV02"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x43 0x5F          DC8 "C_%u"
   \              0x25 0x75    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x48 0x5F          DC8 "H_%d."
   \              0x25 0x64    
   \              0x2E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x64 0x5F          DC8 "d_%d."
   \              0x25 0x64    
   \              0x2E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x4E 0x5F          DC8 "N_%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x20 0x20          DC8 "        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x38 0x38          DC8 "88888888"
   \              0x38 0x38    
   \              0x38 0x38    
   \              0x38 0x38    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x25 0x34          DC8 "%4d.%4d."
   \              0x64 0x2E    
   \              0x25 0x34    
   \              0x64 0x2E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x25 0x34          DC8 "%4d.%4d"
   \              0x64 0x2E    
   \              0x25 0x34    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x0D 0x0A          DC8 "\015\012 g_CurFlshRecNum %d, g_LshRedFlshRecNum %d"
   \              0x20 0x67    
   \              0x5F 0x43    
   \              0x75 0x72    
   \              0x46 0x6C    
   \              0x73 0x68    
   \              0x52 0x65    
   \              0x63 0x4E    
   \              0x75 0x6D    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x67    
   \              0x5F 0x4C    
   \              0x73 0x68    
   \              0x52 0x65    
   \              0x64 0x46    
   \              0x6C 0x73    
   \              0x68 0x52    
   \              0x65 0x63    
   \              0x4E 0x75    
   \              0x6D 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x56 0x2D          DC8 "V-%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x56 0x2E          DC8 "V.%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x43 0x2E          DC8 "C.%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x45 0x2D          DC8 "E-%u"
   \              0x25 0x75    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x75          DC8 "%u"
   \              0x00         
   \   00000003   0x00               DC8 0
    545          
    546          extern	stcFIFO 	sErrFIFO;
    547          extern	stcFIFO		sStoreErrFIFO;
    548          extern	stcFIFO     sUART6RecFIFO;                          //定义串口0接收FIFO结构
    549          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   DisplayDipVal
        16   -> Delay_Nms
        16   -> DisplayOnceInfo
        16   -> DisplaySet
        16   -> GetDipErrFlg
        16   -> GetHostErrFlg
        16   -> GetSysTime
        16   -> InitDisplay
        16   -> OnLed
      32   DisplayOnceInfo
        32   -> ClaerDisplaySetWithoutStore
        32   -> DisplaySet
        32   -> GetDip1Hig
        32   -> GetDip2Hig
        32   -> GetMyEngRotSpd
        32   -> GetMyLocoWorkState
        32   -> GetMySpeed1
        32   -> GetMySpeed2
       0   GetHostEvtFlg
       8   HoldTask
         8   -> HoldCard
         8   -> HoldDisplay
         8   -> HoldLed
       0   IO0CLR_W
       0   IO0DIR_IN
       0   IO0DIR_OUT
       0   IO0PIN_R
       0   IO0PIN_W
       0   IO0SET_W
       0   IO1DIR_OUT
       0   IO1PIN_W
       0   IO2DIR_OUT
       0   IO2PIN_W
      24   IncDisplay
        24   -> DisplaySet
        24   -> GetDip1Prs
        24   -> GetDip2Prs
        24   -> GetSysTime
        24   -> printfcom0
       0   JudgeStartEvt
      24   LedTast
        24   -> GetLed0Com1Flg
        24   -> GetLed1Com2Flg
        24   -> GetLed2Com3Flg
        24   -> GetMyEngRotSpd
        24   -> GetMyLocoWorkState
        24   -> GetMySpeed1
        24   -> GetMySpeed2
        24   -> GetSysTime
        24   -> OffLed
        24   -> OnLed
       8   NOP
         8   -> FeedDog
       8   OneTask
         8   -> DisplayString
         8   -> InitDisplay
       8   OneTaskTimes
         8   -> GetCurFlshRecNum
         8   -> GetLstFlshRecNum
         8   -> GetLstFlshRecNum_gprs
         8   -> OneTask
         8   -> PrinfSysInfo
     112   PrinfSysInfo
       112   -> Delay_Nms
       112   -> DisplaySet
       112   -> GetOilBoxCod
       112   -> ReadDensity
       112   -> ReadFixInfo
       112   -> ReadHostInfo
       112   -> ReadReviseHight
       112   -> __aeabi_f2iz
       112   -> __aeabi_fdiv
       112   -> __aeabi_fmul
       112   -> __aeabi_ui2f
      16   ReadFlsh
        16   -> MX25L1602_RD
     136   TestTask
       136   -> GetRecNumAddr
       136   -> ReadCurFlshRecNum
       136   -> StoreCurFlshRecNum
       136   -> WriteFlsh
      16   WriteFlsh
        16   -> MX25L1602_WR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable7
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_22
       4  ??DataTable9_23
       4  ??DataTable9_24
       4  ??DataTable9_25
       4  ??DataTable9_26
       4  ??DataTable9_27
       4  ??DataTable9_28
       4  ??DataTable9_29
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
       8  ?_1
       8  ?_10
       4  ?_11
      48  ?_12
       8  ?_13
       8  ?_14
       8  ?_15
       8  ?_16
       4  ?_17
       8  ?_2
       8  ?_3
       8  ?_4
       4  ?_5
       8  ?_6
      12  ?_7
      12  ?_8
      12  ?_9
     294  DisplayDipVal
     178  DisplayOnceInfo
       8  GetHostEvtFlg
      18  HoldTask
       2  IO0CLR_W
       2  IO0DIR_IN
       2  IO0DIR_OUT
       2  IO0PIN_R
       2  IO0PIN_W
       2  IO0SET_W
       2  IO1DIR_OUT
       2  IO1PIN_W
       2  IO2DIR_OUT
       2  IO2PIN_W
     178  IncDisplay
      40  JudgeStartEvt
     450  LedTast
       8  NOP
      18  OneTask
      42  OneTaskTimes
     290  PrinfSysInfo
      20  ReadFlsh
      72  TestTask
       4  Time
       4  Time
       4  Time
       4  Time
      20  WriteFlsh
       4  ZeroTimes
       4  errtimes
       1  l_hostevtflg
       4  times

 
    29 bytes in section .bss
   184 bytes in section .rodata
 1 784 bytes in section .text
 
 1 784 bytes of CODE  memory
   184 bytes of CONST memory
    29 bytes of DATA  memory

Errors: none
Warnings: 27
