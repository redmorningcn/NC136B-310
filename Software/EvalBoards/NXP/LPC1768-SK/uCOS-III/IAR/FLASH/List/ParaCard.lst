###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Oct/2017  18:40:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\CardOperations\ParaCard.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\CardOperations\ParaCard.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\ParaCard.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\ParaCard.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\CardOperations\ParaCard.c
      1          ////#include 	"config.h"
      2          ////#include 	"String.h"
      3          ////#include	"Globe.h"
      4          ////#include	"HardDrive.h"
      5          ////#include	"CpuDrive.h"
      6          ////#include	"OperateCard.h"
      7          ////#include	"FramStore.h"
      8          ////#include	"CardTest.h"
      9          //
     10          //
     11          #include    "includes.h"  
     12          #include	"Card.h"
     13          #include	"OperateCard.h" 
     14          #include	"FRAM.h" 
     15          //
     16          ////-------------------------------------------------------------------------------------------------
     17          ////函数名称:             uint8	SetSucceedIndicate(void)
     18          ////函数功能:             设置处理成功指示
     19          ////入口参数:             无
     20          ////出口参数:             无
     21          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     22          void	SetSucceedIndicate(void)
     23          {
     24          //	DisplaySet(60,0,"SETS");	
     25          //	DisplaySet(60,0,"        ");	
     26          }
   \                     SetSucceedIndicate: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     27          
     28          ////-------------------------------------------------------------------------------------------------
     29          ////函数名称:             uint8	StoreErrIndicate(void)
     30          ////函数功能:             存设置信息失败指示
     31          ////入口参数:             无
     32          ////出口参数:             无
     33          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     34          void	StoreErrIndicate(void)
     35          {
   \                     StoreErrIndicate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     36          	DisplaySet(60,100,"STRE");	
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable9
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       DisplaySet
     37          	DisplaySet(60,100,"        ");	
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable9_1
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0x203C             MOVS     R0,#+60
   \   00000016   0x.... 0x....      BL       DisplaySet
     38          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     39          
     40          ////-------------------------------------------------------------------------------------------------
     41          ////函数名称:             uint8	CrcCheckErrIndicate(void)
     42          ////函数功能:             设置信息校验和失败指示
     43          ////入口参数:             无
     44          ////出口参数:             无
     45          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     46          void	CrcCheckErrIndicate(void)
     47          {
   \                     CrcCheckErrIndicate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     48          	DisplaySet(60,100,"CRCE");	
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable9_2
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       DisplaySet
     49          	DisplaySet(60,100,"        ");	
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable9_1
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0x203C             MOVS     R0,#+60
   \   00000016   0x.... 0x....      BL       DisplaySet
     50          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     51          
     52          ////-------------------------------------------------------------------------------------------------
     53          ////函数名称:             uint8	ModCard(stcCardFlg	sCardFlg)
     54          ////函数功能:             普通卡处理
     55          ////入口参数:             无
     56          ////出口参数:             无
     57          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     58          uint8	ModCard(void)
     59          {
   \                     ModCard: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0C1             SUB      SP,SP,#+260
     60          	uint8	buf[256];
     61          	uint32	writedsize = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     62          	uint32	readsize = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     63          		
     64          	while(writedsize < sizeof(stcModelCard))
   \                     ??ModCard_0: (+1)
   \   00000008   0xF241 0x7044      MOVW     R0,#+5956
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD218             BCS.N    ??ModCard_1
     65          	{
     66          		readsize = (sizeof(stcModelCard)- writedsize)>256?
     67          					256:(sizeof(stcModelCard)- writedsize);
   \   00000010   0xF241 0x7044      MOVW     R0,#+5956
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000001A   0xD902             BLS.N    ??ModCard_2
   \   0000001C   0xF44F 0x7580      MOV      R5,#+256
   \   00000020   0xE002             B.N      ??ModCard_3
   \                     ??ModCard_2: (+1)
   \   00000022   0xF241 0x7044      MOVW     R0,#+5956
   \   00000026   0x1B05             SUBS     R5,R0,R4
     68          
     69          		ReadCard(CARD_DATA_ADDR+writedsize,buf,readsize);
   \                     ??ModCard_3: (+1)
   \   00000028   0x002A             MOVS     R2,R5
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0xF514 0x50A0      ADDS     R0,R4,#+5120
   \   00000030   0x.... 0x....      BL       ReadCard
     70          
     71          		StoreOilBoxModel(writedsize,buf,readsize);
   \   00000034   0x002A             MOVS     R2,R5
   \   00000036   0x4669             MOV      R1,SP
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       StoreOilBoxModel
     72          
     73          		writedsize +=readsize;
   \   0000003E   0x192C             ADDS     R4,R5,R4
   \   00000040   0xE7E2             B.N      ??ModCard_0
     74          	}
     75          
     76          	DisplaySet(60,3,"      ");
   \                     ??ModCard_1: (+1)
   \   00000042   0x.... 0x....      LDR.W    R2,??DataTable9_3
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0x203C             MOVS     R0,#+60
   \   0000004A   0x.... 0x....      BL       DisplaySet
     77          	DisplaySet(60,3,"SETS");	
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable9_4
   \   00000052   0x2103             MOVS     R1,#+3
   \   00000054   0x203C             MOVS     R0,#+60
   \   00000056   0x.... 0x....      BL       DisplaySet
     78          		
     79          	return	1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xB041             ADD      SP,SP,#+260
   \   0000005E   0xBD30             POP      {R4,R5,PC}       ;; return
     80          } 
     81          //
     82          //extern	stcModelCard	l_sModelCard;	 
     83          ////-------------------------------------------------------------------------------------------------
     84          ////函数名称:             uint8	COM0ModData(void)
     85          ////函数功能:             普通卡处理
     86          ////入口参数:             无
     87          ////出口参数:             无
     88          ////--------------------------------------------------------------------------------------------------
     89          //uint8	COM0ModData(void)
     90          //{
     91          //	uint16	CrcCheck;
     92          //		
     93          //	CrcCheck = GetCrc16Check((uint8 *)&l_sModelCard,sizeof(stcModelCard) - 2);
     94          //		
     95          //	if(CrcCheck == l_sModelCard.CrcCheck)				//校验和相等		
     96          //	{			
     97          //		//printfcom0("\r\nModCard(void) CCrcCheck == sModelCard.CrcCheck %d",l_sModelCard.CrcCheck);	
     98          //
     99          //		if(StoreOilBoxModel((stcModelCard *)&l_sModelCard))
    100          //		{
    101          //			SetSucceedIndicate();
    102          //			return	1;
    103          //		}
    104          //		else
    105          //		{
    106          //			StoreErrIndicate();
    107          //			return	0;
    108          //		}
    109          //	}
    110          //	
    111          //	CrcCheckErrIndicate();	
    112          //
    113          //	return	0;
    114          //} 
    115          ////-------------------------------------------------------------------------------------------------
    116          ////函数名称:             uint8	DensityCard(stcCardFlg	sCardFlg)
    117          ////函数功能:             普通卡处理
    118          ////入口参数:             无
    119          ////出口参数:             无
    120          ////--------------------------------------------------------------------------------------------------
    121          ////uint8	DensityCard(stcCardFlg *	sCardFlg)
    122          ////{
    123          ////	static	stcDensity	sDensity;						//密度
    124          ////	uint16		CrcCheck;
    125          ////	
    126          ////	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    127          ////	
    128          ////	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    129          ////	{
    130          ////		sDensity = sCardFlg->sCardPara.sDensity;
    131          ////		
    132          ////		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
    133          ////		
    134          ////		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
    135          ////		{			
    136          ////			//PrintfDebug("\r\n sDensity.Density %d",sDensity.Density );
    137          ////			
    138          ////			if(StoreDensity((stcDensity *)&sDensity))
    139          ////			{
    140          ////				DisplaySet(150,1,"%d",sDensity.Density);
    141          ////				
    142          ////				SetSucceedIndicate();	
    143          ////				
    144          ////				return	1;
    145          ////			}
    146          ////			else
    147          ////			{
    148          ////				StoreErrIndicate();	
    149          ////				
    150          ////				return	0;
    151          ////			}
    152          ////		}
    153          ////	}
    154          ////	
    155          ////	CrcCheckErrIndicate();
    156          ////		
    157          ////	return	0;
    158          ////}
    159          

   \                                 In section .text, align 2, keep-with-next
    160          uint8	ReadCardPara(stcCardPara * sCardPara)
    161          {
   \                     ReadCardPara: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    162          	uint16		CrcCheck;
    163          	ReadCard(CARD_FLG_ADDR+sizeof(stcCardID)+sizeof(stcCardType),
    164          			(uint8 *)sCardPara,sizeof(stcCardPara));
   \   00000004   0x22B4             MOVS     R2,#+180
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x2028             MOVS     R0,#+40
   \   0000000A   0x.... 0x....      BL       ReadCard
    165          
    166          	CrcCheck = GetCrc16Check((uint8 *)sCardPara,sizeof(stcCardPara) - 2);
   \   0000000E   0x21B2             MOVS     R1,#+178
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       GetCrc16Check
   \   00000016   0x0005             MOVS     R5,R0
    167          	
    168          	if(CrcCheck == sCardPara->CrcCheck)		
   \   00000018   0xF8B4 0x00B2      LDRH     R0,[R4, #+178]
   \   0000001C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xD101             BNE.N    ??ReadCardPara_0
    169          	{
    170          		return	1;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE000             B.N      ??ReadCardPara_1
    171          	}
    172          	else
    173          	{
    174          		return	0;
   \                     ??ReadCardPara_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??ReadCardPara_1: (+1)
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    175          	}
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          uint8	WriteCardPara(stcCardPara * sCardPara)
    179          {
   \                     WriteCardPara: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    180          	uint16		CrcCheck;
    181          
    182          	CrcCheck = GetCrc16Check((uint8 *)sCardPara,sizeof(stcCardPara) - 2);
   \   00000004   0x21B2             MOVS     R1,#+178
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       GetCrc16Check
   \   0000000C   0x0005             MOVS     R5,R0
    183          
    184          	sCardPara->CrcCheck = CrcCheck;
   \   0000000E   0xF8A4 0x50B2      STRH     R5,[R4, #+178]
    185          
    186          	WriteCard(CARD_FLG_ADDR+sizeof(stcCardID)+sizeof(stcCardType),
    187          			(uint8 *)sCardPara,sizeof(stcCardPara));
   \   00000012   0x22B4             MOVS     R2,#+180
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x2028             MOVS     R0,#+40
   \   00000018   0x.... 0x....      BL       WriteCard
    188          	
    189          	return 1;	
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    190          }
    191          

   \                                 In section .text, align 2, keep-with-next
    192          uint16	GetCardDensityVal(void)
    193          {
   \                     GetCardDensityVal: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    194          	stcDensity	sDensity;						//密度
    195          	stcCardPara	sCardPara;
    196          	uint16		CrcCheck;
    197          	
    198          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA806             ADD      R0,SP,#+24
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD021             BEQ.N    ??GetCardDensityVal_0
    199          	{
    200          		sDensity = sCardPara.sDensity;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA906             ADD      R1,SP,#+24
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    201          		
    202          		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
   \   00000018   0x2116             MOVS     R1,#+22
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    203          		
    204          		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD112             BNE.N    ??GetCardDensityVal_0
    205          		{			
    206          			if(StoreDensity((stcDensity *)&sDensity))
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       StoreDensity
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD009             BEQ.N    ??GetCardDensityVal_1
    207          			{
    208          				DisplaySet(150,1,"%d",sDensity.Density);
   \   00000036   0x9B02             LDR      R3,[SP, #+8]
   \   00000038   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2096             MOVS     R0,#+150
   \   0000003E   0x.... 0x....      BL       DisplaySet
    209          				
    210          				SetSucceedIndicate();	
   \   00000042   0x.... 0x....      BL       SetSucceedIndicate
    211          				
    212          				return	1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE006             B.N      ??GetCardDensityVal_2
    213          			}
    214          			else
    215          			{
    216          				StoreErrIndicate();	
   \                     ??GetCardDensityVal_1: (+1)
   \   0000004A   0x.... 0x....      BL       StoreErrIndicate
    217          				
    218          				return	0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE002             B.N      ??GetCardDensityVal_2
    219          			}
    220          		}
    221          	}
    222          	
    223          	CrcCheckErrIndicate();
   \                     ??GetCardDensityVal_0: (+1)
   \   00000052   0x.... 0x....      BL       CrcCheckErrIndicate
    224          		
    225          	return	0;
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??GetCardDensityVal_2: (+1)
   \   00000058   0xB034             ADD      SP,SP,#+208
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    226          }
    227          

   \                                 In section .text, align 2, keep-with-next
    228          uint8	DensityCard(void)
    229          {
   \                     DensityCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    230          	stcDensity	sDensity;						//密度
    231          	stcCardPara	sCardPara;
    232          	uint16		CrcCheck;
    233          	
    234          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA806             ADD      R0,SP,#+24
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD021             BEQ.N    ??DensityCard_0
    235          	{
    236          		sDensity = sCardPara.sDensity;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA906             ADD      R1,SP,#+24
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    237          		
    238          		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
   \   00000018   0x2116             MOVS     R1,#+22
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    239          		
    240          		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD112             BNE.N    ??DensityCard_0
    241          		{			
    242          			if(StoreDensity((stcDensity *)&sDensity))
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       StoreDensity
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD009             BEQ.N    ??DensityCard_1
    243          			{
    244          				DisplaySet(150,1,"%d",sDensity.Density);
   \   00000036   0x9B02             LDR      R3,[SP, #+8]
   \   00000038   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2096             MOVS     R0,#+150
   \   0000003E   0x.... 0x....      BL       DisplaySet
    245          				
    246          				SetSucceedIndicate();	
   \   00000042   0x.... 0x....      BL       SetSucceedIndicate
    247          				
    248          				return	1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xE006             B.N      ??DensityCard_2
    249          			}
    250          			else
    251          			{
    252          				StoreErrIndicate();	
   \                     ??DensityCard_1: (+1)
   \   0000004A   0x.... 0x....      BL       StoreErrIndicate
    253          				
    254          				return	0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE002             B.N      ??DensityCard_2
    255          			}
    256          		}
    257          	}
    258          	
    259          	CrcCheckErrIndicate();
   \                     ??DensityCard_0: (+1)
   \   00000052   0x.... 0x....      BL       CrcCheckErrIndicate
    260          		
    261          	return	0;
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??DensityCard_2: (+1)
   \   00000058   0xB034             ADD      SP,SP,#+208
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    262          } 
    263           
    264          //
    265          //extern	uint8 StoreDenChangeTimes(uint32  Times);
    266          //
    267          ////------------------------------------------------------------------------
    268          ////  名  称 ：	uint8 	ReadCurFlshTimes(void)
    269          ////  功  能 ：	读当前记录装置记录流水号
    270          //// 入口参数：	无
    271          //// 出口参数：	当前流水号
    272          ////------------------------------------------------------------------------
    273          //extern	uint32 ReadDenChangeTimes(void);
    274          //
    275          ////-------------------------------------------------------------------------------------------------
    276          ////函数名称:             uint8	DenDataCard(stcCardFlg	sCardFlg)
    277          ////函数功能:             普通卡处理
    278          ////入口参数:             无
    279          ////出口参数:             无
    280          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    281          uint8	DenDataCard(stcCardFlg *	sCardFlg)
    282          {
   \                     DenDataCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    283          
    284          	DensityCard();
   \   00000004   0x.... 0x....      BL       DensityCard
    285          
    286          	DisplaySet(100,1,"DATA.");
   \   00000008   0x....             LDR.N    R2,??DataTable9_5
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2064             MOVS     R0,#+100
   \   0000000E   0x.... 0x....      BL       DisplaySet
    287          	
    288          	DataCard(0);												//数据卡，进行数据转取
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       DataCard
    289          		
    290          	return	1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    291          } 
    292          
    293          ////-------------------------------------------------------------------------------------------------
    294          ////函数名称:             uint8	DataDensityCard(stcCardFlg	sCardFlg)
    295          ////函数功能:             普通卡处理
    296          ////入口参数:             无
    297          ////出口参数:             无
    298          ////--------------------------------------------------------------------------------------------------
    299          //void	DataDensityCard(stcCardFlg *	sCardFlg)
    300          //{
    301          //	static	stcDensity	sDensity;						//密度
    302          //	uint16		CrcCheck;
    303          //	
    304          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    305          //	
    306          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    307          //	{
    308          //		sDensity = sCardFlg->sCardPara.sDensity;
    309          //		
    310          //		CrcCheck = GetCrc16Check((uint8 *)&sDensity,sizeof(sDensity) - 2);
    311          //		
    312          //		if(CrcCheck == sDensity.CrcCheck)				//校验和相等		
    313          //		{			
    314          //			if(sDensity.AddOilStationNum == 1)
    315          //			{
    316          //				//PrintfDebug("\r\n sDensity.Density %d",sDensity.Density );
    317          //				
    318          //				if(StoreDensity((stcDensity *)&sDensity))
    319          //				{
    320          //					SetSucceedIndicate();	
    321          //				}
    322          //			}
    323          //		}
    324          //	}	
    325          //} 
    326          //
    327          ////-------------------------------------------------------------------------------------------------
    328          ////函数名称:             void	ComModCard(stcCardFlg	sCardFlg)
    329          ////函数功能:           	特殊模型卡
    330          ////入口参数:             无
    331          ////出口参数:             无
    332          ////--------------------------------------------------------------------------------------------------
    333          //uint8	ComModCard(stcCardFlg	* sCardFlg)
    334          //{
    335          //	static	stcModelComplex	sModelComplex;	
    336          //	uint32	CardAddLen = 0;
    337          //	uint32	FlshAddLen = 0;
    338          //	uint8	i;
    339          //	uint8	CardFlg;
    340          //	uint8	FlshFlg;
    341          //	uint8   *p;
    342          //	uint32	j;
    343          //	
    344          //	FlshAddLen = 0;
    345          //		
    346          //	UnProtectFlash();
    347          //	
    348          //	CardAddLen = sizeof(stcModelCard);
    349          //
    350          //	for(i = 0; i< 1; i++)
    351          //	{
    352          //		CardFlg = ReadCard(CARD_DATA_ADDR + CardAddLen,(uint8 *)&sModelComplex,sizeof(stcModelComplex));
    353          //		FlshFlg = WriteFlsh(FRAM_SIZE + FlshAddLen,(uint16 *)&sModelComplex,sizeof(stcModelComplex));
    354          //    	
    355          //    	p = (uint8 *)&sModelComplex;
    356          //    	
    357          //    	
    358          //    	
    359          //    	
    360          //    	
    361          //    	//printfcom0("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
    362          //    	for(j=0;j < sizeof(stcModelComplex);j++)
    363          //    	{
    364          //    		//printfcom0("%2x",*(p++));
    365          //    	}
    366          //    	//printfcom0("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
    367          //
    368          //    	//printfcom0("\r\n  ModelNum %d;i =%d,CardFlg %d,CARD_DATA_ADDR + CardAddLen %d",sModelComplex.ModelNum,i,CardFlg,CARD_DATA_ADDR + CardAddLen);
    369          //
    370          //		////printfcom0("\r\n\r\n  OilBoxTypCod  %d   %d \r\n",OilBoxTypCod,sComplexModel->ModelNum);
    371          //
    372          //		CardAddLen += sizeof(stcModelComplex);
    373          //		FlshAddLen += sizeof(stcModelComplex);
    374          //	}
    375          //	
    376          //
    377          //	ProtectFlash();
    378          //
    379          //	if(CardFlg == TRUE && FlshFlg == TRUE)
    380          //	{
    381          //		SetSucceedIndicate();
    382          //		DisplaySet(60,2,"SETS");	
    383          //		DisplaySet(60,2,"        ");	
    384          //	}
    385          //	else
    386          //	{
    387          //		DisplaySet(60,2,"ERRO");	
    388          //		DisplaySet(60,2,"        ");	
    389          //		//printfcom0("\r\n CardFlg =%d,FlshFlg =%d,",CardFlg,FlshFlg);
    390          //	}
    391          //	
    392          //	return	1;
    393          //} 
    394          //
    395          ////-------------------------------------------------------------------------------------------------
    396          ////函数名称:             void	DensityCard(stcCardFlg	sCardFlg)
    397          ////函数功能:             普通卡处理
    398          ////入口参数:             无
    399          ////出口参数:             无
    400          ////--------------------------------------------------------------------------------------------------
    401          //uint8	TimeCard(stcCardFlg	* sCardFlg)
    402          //{
    403          ///*
    404          //	stcTime			sTime;							
    405          //	uint16			CrcCheck;
    406          //
    407          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    408          //	
    409          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    410          //	{
    411          //		sTime = sCardFlg->sCardPara.sTime;
    412          //		
    413          //		CrcCheck = GetCrc16Check((uint8 *)&sTime,sizeof(sTime) - 2);
    414          //		
    415          //		if(CrcCheck == sTime.CrcCheck)				//校验和相等		
    416          //		{
    417          //			DisplaySet(100,1,"STIM");	
    418          //			
    419          //			WriteTime(sTime);
    420          //	
    421          //			SetSucceedIndicate();	
    422          //			return	1;
    423          //		}
    424          //	}
    425          //	
    426          //	CrcCheckErrIndicate();
    427          //*/		
    428          //	return	0;
    429          //} 
    430          //
    431          ////extern	void	UsbSetAddDipVal( int16	Dip );
    432          ////-------------------------------------------------------------------------------------------------
    433          ////函数名称:             uint8	SetDataCard(stcCardFlg	* sCardFlg)
    434          ////函数功能:             置数据卡
    435          ////入口参数:             整个卡结构体
    436          ////出口参数:             是否成功
    437          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    438          uint8	SetDataCard(void)
    439          {
   \                     SetDataCard: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0AD             SUB      SP,SP,#+180
    440          	stcCardPara	sCardPara;
    441          	
    442          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadCardPara
    443          	{
    444          //		 AddDipVal = sCardPara.SetVal;
    445          	}
    446          	
    447          	return 1;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xB02D             ADD      SP,SP,#+180
   \   0000000E   0xBD00             POP      {PC}             ;; return
    448          } 
    449          
    450          
    451          ////-------------------------------------------------------------------------------------------------
    452          ////函数名称:             void	HightCard(stcCardFlg	sCardFlg)
    453          ////函数功能:             高度修正卡处理
    454          ////入口参数:             无
    455          ////出口参数:             无
    456          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    457          uint8	HightCard(void)
    458          {
   \                     HightCard: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0AF             SUB      SP,SP,#+188
    459          	stcReviseHight	sReviseHight;							//高度调整
    460          	uint16		CrcCheck;
    461          	int16		StoreHight;	
    462          	stcCardPara	sCardPara;
    463          		
    464          	if(ReadReviseHight((stcReviseHight *)&sReviseHight))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadReviseHight
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD003             BEQ.N    ??HightCard_0
    465          	{
    466          		StoreHight = sReviseHight.ReviseHight;
   \   0000000E   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0xE001             B.N      ??HightCard_1
    467          	}
    468          	else
    469          	{
    470          		StoreHight = 0;
   \                     ??HightCard_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
    471          	}
    472          		
    473          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \                     ??HightCard_1: (+1)
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       ReadCardPara
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD05A             BEQ.N    ??HightCard_2
    474          	{
    475          		sReviseHight = sCardPara.sReviseHight;
   \   00000024   0x980A             LDR      R0,[SP, #+40]
   \   00000026   0x9000             STR      R0,[SP, #+0]
    476          		
    477          		CrcCheck = GetCrc16Check((uint8 *)&sReviseHight,sizeof(sReviseHight) - 2);
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x.... 0x....      BL       GetCrc16Check
   \   00000030   0x0004             MOVS     R4,R0
    478          		
    479          		if(CrcCheck == sReviseHight.CrcCheck)				//校验和相等		
   \   00000032   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD14E             BNE.N    ??HightCard_2
    480          		{
    481          		//	DisplaySet(150,1,"SHIG");
    482          			StoreHight = StoreHight + sReviseHight.ReviseHight; 	
   \   0000003C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000040   0x1945             ADDS     R5,R0,R5
    483          			if(StoreHight > 500 ||  StoreHight < -500)
   \   00000042   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000044   0xF5B5 0x7FFA      CMP      R5,#+500
   \   00000048   0xDC03             BGT.N    ??HightCard_3
   \   0000004A   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000004C   0xF515 0x7FFA      CMN      R5,#+500
   \   00000050   0xDA26             BGE.N    ??HightCard_4
    484          			{
    485          				if(StoreHight > 500)
   \                     ??HightCard_3: (+1)
   \   00000052   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000054   0xF5B5 0x7FFA      CMP      R5,#+500
   \   00000058   0xDD11             BLE.N    ??HightCard_5
    486          				{
    487          					sReviseHight.ReviseHight = 500;
   \   0000005A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000005E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    488          					DisplaySet(60,2,"TO_H");
   \   00000062   0x....             LDR.N    R2,??DataTable9_6
   \   00000064   0x2102             MOVS     R1,#+2
   \   00000066   0x203C             MOVS     R0,#+60
   \   00000068   0x.... 0x....      BL       DisplaySet
    489          					DisplaySet(60,2,"    ");
   \   0000006C   0x....             LDR.N    R2,??DataTable9_7
   \   0000006E   0x2102             MOVS     R1,#+2
   \   00000070   0x203C             MOVS     R0,#+60
   \   00000072   0x.... 0x....      BL       DisplaySet
    490          					DelayX10ms(250);
   \   00000076   0x20FA             MOVS     R0,#+250
   \   00000078   0x.... 0x....      BL       DelayX10ms
   \   0000007C   0xE012             B.N      ??HightCard_6
    491          				}
    492          				else
    493          				{
    494          					sReviseHight.ReviseHight = -500;
   \                     ??HightCard_5: (+1)
   \   0000007E   0x....             LDR.N    R0,??DataTable9_8  ;; 0xfffffe0c
   \   00000080   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    495          					DisplaySet(60,2,"TO_L");
   \   00000084   0x....             LDR.N    R2,??DataTable9_9
   \   00000086   0x2102             MOVS     R1,#+2
   \   00000088   0x203C             MOVS     R0,#+60
   \   0000008A   0x.... 0x....      BL       DisplaySet
    496          					DisplaySet(60,2,"    ");
   \   0000008E   0x....             LDR.N    R2,??DataTable9_7
   \   00000090   0x2102             MOVS     R1,#+2
   \   00000092   0x203C             MOVS     R0,#+60
   \   00000094   0x.... 0x....      BL       DisplaySet
    497          					DelayX10ms(250);					
   \   00000098   0x20FA             MOVS     R0,#+250
   \   0000009A   0x.... 0x....      BL       DelayX10ms
   \   0000009E   0xE001             B.N      ??HightCard_6
    498          				}
    499          			}
    500          			else
    501          			{
    502          				sReviseHight.ReviseHight = StoreHight;
   \                     ??HightCard_4: (+1)
   \   000000A0   0xF8AD 0x5000      STRH     R5,[SP, #+0]
    503          			}
    504          			
    505          			CrcCheck = GetCrc16Check((uint8 *)&sReviseHight,sizeof(sReviseHight) - 2);
   \                     ??HightCard_6: (+1)
   \   000000A4   0x2102             MOVS     R1,#+2
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x.... 0x....      BL       GetCrc16Check
   \   000000AC   0x0004             MOVS     R4,R0
    506          			sReviseHight.CrcCheck = CrcCheck;
   \   000000AE   0xF8AD 0x4002      STRH     R4,[SP, #+2]
    507          			
    508          			if(StoreReviseHight((stcReviseHight *)&sReviseHight))
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x.... 0x....      BL       StoreReviseHight
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD00A             BEQ.N    ??HightCard_7
    509          			{
    510          				DisplaySet(150,1,"%d",sReviseHight.ReviseHight);
   \   000000BC   0xF9BD 0x3000      LDRSH    R3,[SP, #+0]
   \   000000C0   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2096             MOVS     R0,#+150
   \   000000C6   0x.... 0x....      BL       DisplaySet
    511          
    512          				SetSucceedIndicate();	
   \   000000CA   0x.... 0x....      BL       SetSucceedIndicate
    513          				
    514          				return	1;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xE006             B.N      ??HightCard_8
    515          			}
    516          			else
    517          			{
    518          				StoreErrIndicate();	
   \                     ??HightCard_7: (+1)
   \   000000D2   0x.... 0x....      BL       StoreErrIndicate
    519          				
    520          				return	0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xE002             B.N      ??HightCard_8
    521          			}
    522          		}
    523          	}
    524          	
    525          	CrcCheckErrIndicate();
   \                     ??HightCard_2: (+1)
   \   000000DA   0x.... 0x....      BL       CrcCheckErrIndicate
    526          		
    527          	return	0;
   \   000000DE   0x2000             MOVS     R0,#+0
   \                     ??HightCard_8: (+1)
   \   000000E0   0xB02F             ADD      SP,SP,#+188
   \   000000E2   0xBD30             POP      {R4,R5,PC}       ;; return
    528          } 
    529          
    530          ////-------------------------------------------------------------------------------------------------
    531          ////函数名称:             uint8	ModelSelectCard(stcCardFlg	* sCardFlg)
    532          ////函数功能:             模型选择卡
    533          ////入口参数:             整个卡结构体
    534          ////出口参数:             是否成功
    535          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    536          uint8	ModelSelectCard(void)
    537          {
   \                     ModelSelectCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0AE             SUB      SP,SP,#+184
    538          	uint8			ModelNum;							
    539          
    540          	stcCardPara	sCardPara;
    541          
    542          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD016             BEQ.N    ??ModelSelectCard_0
    543          	{
    544          		ModelNum = sCardPara.SetVal;
   \   0000000E   0x9806             LDR      R0,[SP, #+24]
   \   00000010   0x0004             MOVS     R4,R0
    545          
    546          		if(StoreSelectModel(ModelNum))
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       StoreSelectModel
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00A             BEQ.N    ??ModelSelectCard_1
    547          		{
    548          			DisplaySet(150,1,"%d",ModelNum);			
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x0023             MOVS     R3,R4
   \   00000022   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2096             MOVS     R0,#+150
   \   00000028   0x.... 0x....      BL       DisplaySet
    549          			SetSucceedIndicate();	
   \   0000002C   0x.... 0x....      BL       SetSucceedIndicate
    550          			
    551          			return	1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE006             B.N      ??ModelSelectCard_2
    552          		}
    553          		else
    554          		{
    555          			StoreErrIndicate();	
   \                     ??ModelSelectCard_1: (+1)
   \   00000034   0x.... 0x....      BL       StoreErrIndicate
    556          			
    557          			return	0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE002             B.N      ??ModelSelectCard_2
    558          		}
    559          		
    560          	}
    561          	
    562          	CrcCheckErrIndicate();
   \                     ??ModelSelectCard_0: (+1)
   \   0000003C   0x.... 0x....      BL       CrcCheckErrIndicate
    563          		
    564          	return	0;
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??ModelSelectCard_2: (+1)
   \   00000042   0xB02E             ADD      SP,SP,#+184
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    565          }
    566          //
    567          //extern	float		l_Density;		
    568          //extern	float  		l_ReviseHight;              		//修正高度
    569          //extern  void		ReCalPara(uint8	Flg);
    570          //extern	int16  		GetDip1Prs(void);
    571          //extern	int16  		GetDip2Prs(void);
    572          //extern	uint8  		GetOilBoxCod(void);
    573          //
    574          ////-------------------------------------------------------------------------------------------------
    575          ////函数名称:             uint8	DebugCard(stcCardFlg	* sCardFlg)
    576          ////函数功能:             调试卡
    577          ////入口参数:             无
    578          ////出口参数:             无
    579          ////--------------------------------------------------------------------------------------------------
    580          //uint8	DebugCard(stcCardFlg	* sCardFlg)
    581          //{
    582          //	uint32	AllStrLen = 0;
    583          //	int16	CurDip1Prs;
    584          //	int16	CurDip2Prs;
    585          //	uint8	ModNum;
    586          //	uint16	Density;
    587          //	uint16	Hight;
    588          //	uint16	CrcCheck;
    589          //	
    590          //	ReCalPara(1);
    591          //
    592          //	CurDip1Prs	=	GetDip1Prs();
    593          //	CurDip2Prs	=	GetDip2Prs();
    594          //	ModNum		=  	GetOilBoxCod();
    595          //	Density		=  	(uint16)(l_Density*1000);
    596          //	Hight		= 	(uint16)l_ReviseHight;
    597          //	
    598          //	DisplaySet(150,1,"DIP1");								
    599          //	DisplaySet(200,1,"%d",CurDip1Prs);					
    600          //	
    601          //	DisplaySet(150,1,"DIP2");								
    602          //	DisplaySet(200,1,"%d",CurDip2Prs);					
    603          //	
    604          //	DisplaySet(150,1,"MODE");								
    605          //	DisplaySet(200,1,"C_%d",ModNum);							
    606          //	
    607          //	DisplaySet(150,1,"DENS");
    608          //	DisplaySet(200,1,"%d",Density);
    609          //	
    610          //	DisplaySet(150,1,"HIGH");
    611          //	DisplaySet(200,1,"%d",Hight);	
    612          //	
    613          //	PrintfTime();
    614          //	DisplayTime();
    615          //
    616          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&CurDip1Prs,2);
    617          //	
    618          //	AllStrLen += 2;
    619          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&CurDip2Prs,2);
    620          //	
    621          //	AllStrLen += 2;
    622          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&ModNum,2);
    623          //	
    624          //	AllStrLen += 2;
    625          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&Density,2);
    626          //	
    627          //	AllStrLen += 2;
    628          //	memcpy((int8 *)&sCardFlg->sCardPara.sDebugCard.Buf[AllStrLen],(int8 *)&Hight,2);
    629          //	
    630          //	AllStrLen += 2;
    631          //	sCardFlg->sCardPara.sDebugCard.BufLen = AllStrLen;			//有效数据长度
    632          //
    633          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara.sDebugCard,sizeof(sCardFlg->sCardPara.sDebugCard )- 2);
    634          //	sCardFlg->sCardPara.sDebugCard.CrcCheck = CrcCheck;
    635          //
    636          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    637          //	sCardFlg->sCardPara.CrcCheck = CrcCheck;	
    638          //	
    639          //	CrcCheck = GetCrc16Check((uint8 *)sCardFlg,sizeof(stcCardFlg) - 2);
    640          //	sCardFlg->CrcCheck = CrcCheck;		
    641          //	
    642          //	WriteCardFlg(sCardFlg);										//修改IC卡标志页	
    643          //	
    644          //	return 	1;
    645          //	
    646          ///*
    647          //	static	stcDebugCard	sDebugCard;							//高度调整
    648          //	uint16	CrcCheck;
    649          //
    650          //	CrcCheck = GetCrc16Check((uint8 *)&sCardFlg->sCardPara,sizeof(sCardFlg->sCardPara) - 2);
    651          //	
    652          //	if(CrcCheck == sCardFlg->sCardPara.CrcCheck)
    653          //	{
    654          //		sDebugCard = sCardFlg->sCardPara.sDebugCard;
    655          //		
    656          //		CrcCheck = GetCrc16Check((uint8 *)&sDebugCard,sizeof(sDebugCard) - 2);
    657          //		
    658          //		if(CrcCheck == sDebugCard.CrcCheck)				//校验和相等		
    659          //		{
    660          //			DisplaySet(100,1,"SDBG");	
    661          //			
    662          //			if(StoreReviseHight((stcReviseHight *)&sDebugCard))
    663          //			{
    664          //				SetSucceedIndicate();	
    665          //				
    666          //				return	1;
    667          //			}
    668          //			else
    669          //			{
    670          //				StoreErrIndicate();	
    671          //				
    672          //				return	0;
    673          //			}
    674          //		}
    675          //	}
    676          //	
    677          //	CrcCheckErrIndicate();
    678          //		
    679          //	return	0;
    680          //*/
    681          //}
    682          //
    683          ////-------------------------------------------------------------------------------------------------
    684          ////函数名称:             uint8	FixCard(stcCardFlg	* sCardFlg)
    685          ////函数功能:             高度修正卡处理
    686          ////入口参数:             无
    687          ////出口参数:             无
    688          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    689          uint8	FixCard(void)
    690          {
   \                     FixCard: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B4             SUB      SP,SP,#+208
    691          	stcFixInfo		sFixInfo;							//高度调整
    692          	uint16		CrcCheck;
    693          	stcCardPara	sCardPara;
    694          
    695          	if(ReadCardPara((stcCardPara *)	&sCardPara))
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x.... 0x....      BL       ReadCardPara
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD02F             BEQ.N    ??FixCard_0
    696          	{
    697          		sFixInfo = sCardPara.sFixInfo;
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0xA911             ADD      R1,SP,#+68
   \   00000012   0x221C             MOVS     R2,#+28
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    698          		
    699          		CrcCheck = GetCrc16Check((uint8 *)&sFixInfo,sizeof(sFixInfo) - 2);
   \   00000018   0x211A             MOVS     R1,#+26
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       GetCrc16Check
   \   00000020   0x0004             MOVS     R4,R0
    700          		
    701          		if(CrcCheck == sFixInfo.CrcCheck)				//校验和相等		
   \   00000022   0xF8BD 0x001A      LDRH     R0,[SP, #+26]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD120             BNE.N    ??FixCard_0
    702          		{
    703          			DisplaySet(100,1,"%d",sFixInfo.LocoTyp);	
   \   0000002C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   00000030   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2064             MOVS     R0,#+100
   \   00000036   0x.... 0x....      BL       DisplaySet
    704          			DisplaySet(100,1,"%d",sFixInfo.LocoNum[1]*256+sFixInfo.LocoNum[0]);	
   \   0000003A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000003E   0xF44F 0x7180      MOV      R1,#+256
   \   00000042   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   00000046   0xFB01 0x2300      MLA      R3,R1,R0,R2
   \   0000004A   0x....             ADR.N    R2,??DataTable8  ;; 0x25, 0x64, 0x00, 0x00
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       DisplaySet
    705          			
    706          			if(StoreFixInfo((stcFixInfo *)&sFixInfo))
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x.... 0x....      BL       StoreFixInfo
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD003             BEQ.N    ??FixCard_1
    707          			{
    708          				SetSucceedIndicate();	
   \   0000005E   0x.... 0x....      BL       SetSucceedIndicate
    709          				return	1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xE006             B.N      ??FixCard_2
    710          			}
    711          			else
    712          			{
    713          				StoreErrIndicate();	
   \                     ??FixCard_1: (+1)
   \   00000066   0x.... 0x....      BL       StoreErrIndicate
    714          				return	0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE002             B.N      ??FixCard_2
    715          			}
    716          		}
    717          
    718          	}
    719          	
    720          	CrcCheckErrIndicate();
   \                     ??FixCard_0: (+1)
   \   0000006E   0x.... 0x....      BL       CrcCheckErrIndicate
    721          		
    722          	return	0;
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??FixCard_2: (+1)
   \   00000074   0xB034             ADD      SP,SP,#+208
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
    723          } 
    724          //
    725          ////-------------------------------------------------------------------------------------------------
    726          ////函数名称:             uint8	CopyFramCard(stcCardFlg	* sCardFlg)
    727          ////函数功能:             高度修正卡处理
    728          ////入口参数:             无
    729          ////出口参数:             无
    730          ////--------------------------------------------------------------------------------------------------
    731          //uint8	CopyFramCard(stcCardFlg	* sCardFlg)
    732          //{
    733          //	DisplaySet(100,1,"CFRA");	
    734          //
    735          //	FramToCard();
    736          //	
    737          //	SetSucceedIndicate();	
    738          //	
    739          //	return	1;
    740          //} 
    741          //
    742          #define	TIME_ADD_CARD	0x01
    743          #define	TIME_SUB_CARD	0x02
    744          ////-------------------------------------------------------------------------------------------------
    745          ////函数名称:             uint8	ExpandCard(stcCardFlg	* sCardFlg)
    746          ////函数功能:             扩展卡
    747          ////入口参数:             无
    748          ////出口参数:             无
    749          ////--------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    750          uint8	ExpandCard(void)
    751          {
   \                     ExpandCard: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0B2             SUB      SP,SP,#+200
    752          	uint8	CardType;
    753          	uint32	i;
    754          	uint32	DisTime = 40;		//500ms
   \   00000006   0x2528             MOVS     R5,#+40
    755          	uint32	Time 	= 0;		//500ms
   \   00000008   0x2600             MOVS     R6,#+0
    756          	uint32	Times 	= 0;	
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    757          	
    758          	stcTime		sTime;
    759          	stcCardPara	sCardPara;
    760          
    761          	if(!ReadCardPara((stcCardPara *)	&sCardPara))
   \   0000000E   0xA804             ADD      R0,SP,#+16
   \   00000010   0x.... 0x....      BL       ReadCardPara
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??ExpandCard_0
    762          	{	return 0;}
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE070             B.N      ??ExpandCard_1
    763          
    764          
    765          /*	
    766          #ifdef	HARD_VER_090426	
    767          	DisplaySet(150,1,"%u-%u-%u",sTime.Year,sTime.Month,sTime.Date);
    768          	DisplaySet(60,1,"         ");	
    769          	DisplaySet(350,1,"%u-%u-%u.",sTime.Hour,sTime.Min,sTime.Sec);	//等待时间补充
    770          	DisplaySet(60,1,"         ");	
    771          #endif
    772          */
    773          	CardType = sCardPara.Reserve0;							//卡类型
   \                     ??ExpandCard_0: (+1)
   \   0000001C   0xF8BD 0x00C0      LDRH     R0,[SP, #+192]
   \   00000020   0x0004             MOVS     R4,R0
    774          	
    775          	ReadTime((stcTime *)&sTime);
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x.... 0x....      BL       ReadTime
    776          	i = sTime.Sec + sTime.Min * 60 +  sTime.Hour * 60 * 60;	
   \   00000028   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002C   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00000030   0x223C             MOVS     R2,#+60
   \   00000032   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000036   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   0000003A   0xF44F 0x6261      MOV      R2,#+3600
   \   0000003E   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000042   0x0007             MOVS     R7,R0
    777          
    778          	while(1)
    779          	{
    780          		if(CardType == TIME_ADD_CARD)	
   \                     ??ExpandCard_2: (+1)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C01             CMP      R4,#+1
   \   00000048   0xD101             BNE.N    ??ExpandCard_3
    781          		{
    782          			i++;
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \   0000004C   0xE005             B.N      ??ExpandCard_4
    783          		}	
    784          		else if(CardType == TIME_SUB_CARD)	
   \                     ??ExpandCard_3: (+1)
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x2C02             CMP      R4,#+2
   \   00000052   0xD101             BNE.N    ??ExpandCard_5
    785          		{
    786          			i--;	
   \   00000054   0x1E7F             SUBS     R7,R7,#+1
   \   00000056   0xE000             B.N      ??ExpandCard_4
    787          		}
    788          		else
    789          		{
    790          			//printfcom0("\r\n 不是时间卡");
    791          			break;
   \                     ??ExpandCard_5: (+1)
   \   00000058   0xE050             B.N      ??ExpandCard_6
    792          		}
    793          		
    794          		i = i % (60*60*24);
   \                     ??ExpandCard_4: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable9_10  ;; 0x15180
   \   0000005C   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \   00000060   0xFB00 0x7711      MLS      R7,R0,R1,R7
    795          		
    796          		Times++;
   \   00000064   0xF118 0x0801      ADDS     R8,R8,#+1
    797          		
    798          		sTime.Sec  =   i % 60;
   \   00000068   0x203C             MOVS     R0,#+60
   \   0000006A   0xFBB7 0xF1F0      UDIV     R1,R7,R0
   \   0000006E   0xFB00 0x7011      MLS      R0,R0,R1,R7
   \   00000072   0xF88D 0x0008      STRB     R0,[SP, #+8]
    799          		sTime.Min  =  (i / 60 ) % 60;
   \   00000076   0x203C             MOVS     R0,#+60
   \   00000078   0xFBB7 0xF0F0      UDIV     R0,R7,R0
   \   0000007C   0x213C             MOVS     R1,#+60
   \   0000007E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000082   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000086   0xF88D 0x0009      STRB     R0,[SP, #+9]
    800          		sTime.Hour =  ((i/60)/60) % 24;
   \   0000008A   0x203C             MOVS     R0,#+60
   \   0000008C   0xFBB7 0xF0F0      UDIV     R0,R7,R0
   \   00000090   0x213C             MOVS     R1,#+60
   \   00000092   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000096   0x2118             MOVS     R1,#+24
   \   00000098   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000009C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000A0   0xF88D 0x000A      STRB     R0,[SP, #+10]
    801          		
    802          		DisplaySet(1,1,"%02u-%02u-%02u.",sTime.Hour,sTime.Min,sTime.Sec);		//
   \   000000A4   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000000AE   0x9000             STR      R0,[SP, #+0]
   \   000000B0   0xF89D 0x300A      LDRB     R3,[SP, #+10]
   \   000000B4   0x....             LDR.N    R2,??DataTable9_11
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0x.... 0x....      BL       DisplaySet
    803          		DelayX10ms(1);		
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0x.... 0x....      BL       DelayX10ms
    804          
    805          		Time = GetSysTime();
   \   000000C4   0x.... 0x....      BL       GetSysTime
   \   000000C8   0x0006             MOVS     R6,R0
    806          		while(GetSysTime() - Time < DisTime)
   \                     ??ExpandCard_7: (+1)
   \   000000CA   0x.... 0x....      BL       GetSysTime
   \   000000CE   0x1B80             SUBS     R0,R0,R6
   \   000000D0   0x42A8             CMP      R0,R5
   \   000000D2   0xD3FA             BCC.N    ??ExpandCard_7
    807          		{
    808          		//SysHoldTast();;
    809          		}
    810          		
    811          		if(DisTime > 4)
   \   000000D4   0x2D05             CMP      R5,#+5
   \   000000D6   0xD303             BCC.N    ??ExpandCard_8
    812          		{
    813          			DisTime -= Times/10;		
   \   000000D8   0x200A             MOVS     R0,#+10
   \   000000DA   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \   000000DE   0x1A2D             SUBS     R5,R5,R0
    814          		}
    815          		
    816          		if(GetPlugFlg() != PLUG_IN_CARD)
   \                     ??ExpandCard_8: (+1)
   \   000000E0   0x.... 0x....      BL       GetPlugFlg
   \   000000E4   0x2801             CMP      R0,#+1
   \   000000E6   0xD0AD             BEQ.N    ??ExpandCard_2
    817          		{
    818          			DelayX10ms(200);
   \   000000E8   0x20C8             MOVS     R0,#+200
   \   000000EA   0x.... 0x....      BL       DelayX10ms
    819          			WriteTime(sTime);
   \   000000EE   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   000000F2   0x.... 0x....      BL       WriteTime
    820          			DelayX10ms(100);
   \   000000F6   0x2064             MOVS     R0,#+100
   \   000000F8   0x.... 0x....      BL       DelayX10ms
    821          			break;
    822          		}
    823          	}
    824          	
    825          	return	1;
   \                     ??ExpandCard_6: (+1)
   \   000000FC   0x2001             MOVS     R0,#+1
   \                     ??ExpandCard_1: (+1)
   \   000000FE   0xB032             ADD      SP,SP,#+200
   \   00000100   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    826          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0xFFFFFE0C         DC32     0xfffffe0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STRE"
   \              0x52 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x43 0x52          DC8 "CRCE"
   \              0x43 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x20 0x20          DC8 "      "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x53 0x45          DC8 "SETS"
   \              0x54 0x53    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x44 0x41          DC8 "DATA."
   \              0x54 0x41    
   \              0x2E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x54 0x4F          DC8 "TO_H"
   \              0x5F 0x48    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "    "
   \              0x20 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x54 0x4F          DC8 "TO_L"
   \              0x5F 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x25 0x30          DC8 "%02u-%02u-%02u."
   \              0x32 0x75    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x75 0x2D    
   \              0x25 0x30    
   \              0x32 0x75    
   \              0x2E 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CrcCheckErrIndicate
         8   -> DisplaySet
       8   DenDataCard
         8   -> DataCard
         8   -> DensityCard
         8   -> DisplaySet
     216   DensityCard
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreDensity
       216   -> StoreErrIndicate
       216   -> __aeabi_memcpy4
     224   ExpandCard
       224   -> DelayX10ms
       224   -> DisplaySet
       224   -> GetPlugFlg
       224   -> GetSysTime
       224   -> ReadCardPara
       224   -> ReadTime
       224   -> WriteTime
     216   FixCard
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreErrIndicate
       216   -> StoreFixInfo
       216   -> __aeabi_memcpy4
     216   GetCardDensityVal
       216   -> CrcCheckErrIndicate
       216   -> DisplaySet
       216   -> GetCrc16Check
       216   -> ReadCardPara
       216   -> SetSucceedIndicate
       216   -> StoreDensity
       216   -> StoreErrIndicate
       216   -> __aeabi_memcpy4
     200   HightCard
       200   -> CrcCheckErrIndicate
       200   -> DelayX10ms
       200   -> DisplaySet
       200   -> GetCrc16Check
       200   -> ReadCardPara
       200   -> ReadReviseHight
       200   -> SetSucceedIndicate
       200   -> StoreErrIndicate
       200   -> StoreReviseHight
     272   ModCard
       272   -> DisplaySet
       272   -> ReadCard
       272   -> StoreOilBoxModel
     192   ModelSelectCard
       192   -> CrcCheckErrIndicate
       192   -> DisplaySet
       192   -> ReadCardPara
       192   -> SetSucceedIndicate
       192   -> StoreErrIndicate
       192   -> StoreSelectModel
      16   ReadCardPara
        16   -> GetCrc16Check
        16   -> ReadCard
     184   SetDataCard
       184   -> ReadCardPara
       0   SetSucceedIndicate
       8   StoreErrIndicate
         8   -> DisplaySet
      16   WriteCardPara
        16   -> GetCrc16Check
        16   -> WriteCard


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
      12  ?_1
      16  ?_10
       8  ?_2
       8  ?_3
       8  ?_4
       4  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
      28  CrcCheckErrIndicate
      28  DenDataCard
      92  DensityCard
     260  ExpandCard
     120  FixCard
      92  GetCardDensityVal
     228  HightCard
      96  ModCard
      70  ModelSelectCard
      42  ReadCardPara
      16  SetDataCard
       2  SetSucceedIndicate
      28  StoreErrIndicate
      32  WriteCardPara

 
    96 bytes in section .rodata
 1 186 bytes in section .text
 
 1 186 bytes of CODE  memory
    96 bytes of CONST memory

Errors: none
Warnings: none
