###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       21/Aug/2017  10:05:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_i2s.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_i2s.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_i2s.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_i2s.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\CSB\source\lpc17xx_i2s.c
      1          /**********************************************************************
      2          * $Id$		lpc17xx_i2s.c				2010-09-23
      3          *//**
      4          * @file		lpc17xx_i2s.c
      5          * @brief	Contains all functions support for I2S firmware
      6          * 			library on LPC17xx
      7          * @version	3.1
      8          * @date		23. Sep. 2010
      9          * @author	NXP MCU SW Application Team
     10          *
     11          * Copyright(C) 2010, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          * Permission to use, copy, modify, and distribute this software and its
     26          * documentation is hereby granted, under NXP Semiconductors'
     27          * relevant copyright in the software, without fee, provided that it
     28          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     29          * copyright, permission, and disclaimer notice must appear in all copies of
     30          * this code.
     31          **********************************************************************/
     32          
     33          /* Peripheral group ----------------------------------------------------------- */
     34          /** @addtogroup I2S
     35           * @{
     36           */
     37          
     38          /* Includes ------------------------------------------------------------------- */
     39          #include "lpc17xx_i2s.h"
     40          #include "lpc17xx_clkpwr.h"
     41          
     42          
     43          /* If this source file built with example, the LPC17xx FW library configuration
     44           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     45           * otherwise the default FW library configuration file must be included instead
     46           */
     47          #ifdef __BUILD_WITH_EXAMPLE__
     48          #include "lpc17xx_libcfg.h"
     49          #else
     50          #include "lpc17xx_libcfg_default.h"
     51          #endif /* __BUILD_WITH_EXAMPLE__ */
     52          
     53          
     54          #ifdef _I2S
     55          
     56          /* Private Functions ---------------------------------------------------------- */
     57          
     58          static uint8_t i2s_GetWordWidth(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode);
     59          static uint8_t i2s_GetChannel(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode);
     60          
     61          /********************************************************************//**
     62           * @brief		Get I2S wordwidth value
     63           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
     64           * @param[in]	TRMode is the I2S mode, should be:
     65           * 				- I2S_TX_MODE = 0: transmit mode
     66           * 				- I2S_RX_MODE = 1: receive mode
     67           * @return 		The wordwidth value, should be: 8,16 or 32
     68           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          static uint8_t i2s_GetWordWidth(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     i2s_GetWordWidth: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     70          	uint8_t value;
     71          
     72          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??i2s_GetWordWidth_0
   \   0000000E   0x2148             MOVS     R1,#+72
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
     73          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??i2s_GetWordWidth_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??i2s_GetWordWidth_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??i2s_GetWordWidth_1
   \   00000024   0x2149             MOVS     R1,#+73
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
     74          
     75          	if (TRMode == I2S_TX_MODE) {
   \                     ??i2s_GetWordWidth_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD104             BNE.N    ??i2s_GetWordWidth_2
     76          		value = (I2Sx->I2SDAO) & 0x03; /* get wordwidth bit */
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xE003             B.N      ??i2s_GetWordWidth_3
     77          	} else {
     78          		value = (I2Sx->I2SDAI) & 0x03; /* get wordwidth bit */
   \                     ??i2s_GetWordWidth_2: (+1)
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000044   0x0006             MOVS     R6,R0
     79          	}
     80          	switch (value) {
   \                     ??i2s_GetWordWidth_3: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD002             BEQ.N    ??i2s_GetWordWidth_4
   \   0000004C   0x2E01             CMP      R6,#+1
   \   0000004E   0xD002             BEQ.N    ??i2s_GetWordWidth_5
   \   00000050   0xE003             B.N      ??i2s_GetWordWidth_6
     81          	case I2S_WORDWIDTH_8:
     82          		return 8;
   \                     ??i2s_GetWordWidth_4: (+1)
   \   00000052   0x2008             MOVS     R0,#+8
   \   00000054   0xE002             B.N      ??i2s_GetWordWidth_7
     83          	case I2S_WORDWIDTH_16:
     84          		return 16;
   \                     ??i2s_GetWordWidth_5: (+1)
   \   00000056   0x2010             MOVS     R0,#+16
   \   00000058   0xE000             B.N      ??i2s_GetWordWidth_7
     85          	default:
     86          		return 32;
   \                     ??i2s_GetWordWidth_6: (+1)
   \   0000005A   0x2020             MOVS     R0,#+32
   \                     ??i2s_GetWordWidth_7: (+1)
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
     87          	}
     88          }
     89          
     90          /********************************************************************//**
     91           * @brief		Get I2S channel value
     92           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
     93           * @param[in]	TRMode is the I2S mode, should be:
     94           * 				- I2S_TX_MODE = 0: transmit mode
     95           * 				- I2S_RX_MODE = 1: receive mode
     96           * @return 		The channel value, should be: 1(mono) or 2(stereo)
     97           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     98          static uint8_t i2s_GetChannel(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     i2s_GetChannel: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     99          	uint8_t value;
    100          
    101          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??i2s_GetChannel_0
   \   0000000E   0x2165             MOVS     R1,#+101
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    102          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??i2s_GetChannel_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??i2s_GetChannel_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??i2s_GetChannel_1
   \   00000024   0x2166             MOVS     R1,#+102
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    103          
    104          	if (TRMode == I2S_TX_MODE) {
   \                     ??i2s_GetChannel_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD104             BNE.N    ??i2s_GetChannel_2
    105          		value = ((I2Sx->I2SDAO) & 0x04)>>2; /* get bit[2] */
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xE003             B.N      ??i2s_GetChannel_3
    106          	} else {
    107          		value = ((I2Sx->I2SDAI) & 0x04)>>2; /* get bit[2] */
   \                     ??i2s_GetChannel_2: (+1)
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000044   0x0006             MOVS     R6,R0
    108          	}
    109                  if(value == I2S_MONO) return 1;
   \                     ??i2s_GetChannel_3: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E01             CMP      R6,#+1
   \   0000004A   0xD101             BNE.N    ??i2s_GetChannel_4
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xE000             B.N      ??i2s_GetChannel_5
    110                    return 2;
   \                     ??i2s_GetChannel_4: (+1)
   \   00000050   0x2002             MOVS     R0,#+2
   \                     ??i2s_GetChannel_5: (+1)
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    111          }
    112          
    113          /* End of Private Functions --------------------------------------------------- */
    114          
    115          
    116          /* Public Functions ----------------------------------------------------------- */
    117          /** @addtogroup I2S_Public_Functions
    118           * @{
    119           */
    120          
    121          /********************************************************************//**
    122           * @brief		Initialize I2S
    123           * 					- Turn on power and clock
    124           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    125           * @return 		none
    126           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          void I2S_Init(LPC_I2S_TypeDef *I2Sx) {
   \                     I2S_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    128          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_Init_0
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000012   0x.... 0x....      BL       check_failed
    129          
    130          	// Turn on power and clock
    131          	CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCI2S, ENABLE);
   \                     ??I2S_Init_0: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    132          	LPC_I2S->I2SDAI = LPC_I2S->I2SDAO = 0x00;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x400a8000
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x400a8004
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    133          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    134          
    135          /********************************************************************//**
    136           * @brief		Configuration I2S, setting:
    137           * 					- master/slave mode
    138           * 					- wordwidth value
    139           * 					- channel mode
    140           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    141           * @param[in]	TRMode transmit/receive mode, should be:
    142           * 					- I2S_TX_MODE = 0: transmit mode
    143           * 					- I2S_RX_MODE = 1: receive mode
    144           * @param[in]	ConfigStruct pointer to I2S_CFG_Type structure
    145           *              which will be initialized.
    146           * @return 		none
    147           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    148          void I2S_Config(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, I2S_CFG_Type* ConfigStruct)
    149          {
   \                     I2S_Config: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    150          	uint32_t bps, config;
    151          
    152          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD004             BEQ.N    ??I2S_Config_0
   \   00000012   0x2198             MOVS     R1,#+152
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000018   0x.... 0x....      BL       check_failed
    153          
    154          	CHECK_PARAM(PARAM_I2S_WORDWIDTH(ConfigStruct->wordwidth));
   \                     ??I2S_Config_0: (+1)
   \   0000001C   0x7830             LDRB     R0,[R6, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD00A             BEQ.N    ??I2S_Config_1
   \   00000022   0x7830             LDRB     R0,[R6, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD007             BEQ.N    ??I2S_Config_1
   \   00000028   0x7830             LDRB     R0,[R6, #+0]
   \   0000002A   0x2803             CMP      R0,#+3
   \   0000002C   0xD004             BEQ.N    ??I2S_Config_1
   \   0000002E   0x219A             MOVS     R1,#+154
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000034   0x.... 0x....      BL       check_failed
    155          	CHECK_PARAM(PARAM_I2S_CHANNEL(ConfigStruct->mono));
   \                     ??I2S_Config_1: (+1)
   \   00000038   0x7870             LDRB     R0,[R6, #+1]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD007             BEQ.N    ??I2S_Config_2
   \   0000003E   0x7870             LDRB     R0,[R6, #+1]
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD004             BEQ.N    ??I2S_Config_2
   \   00000044   0x219B             MOVS     R1,#+155
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000004A   0x.... 0x....      BL       check_failed
    156          	CHECK_PARAM(PARAM_I2S_STOP(ConfigStruct->stop));
   \                     ??I2S_Config_2: (+1)
   \   0000004E   0x78B0             LDRB     R0,[R6, #+2]
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD007             BEQ.N    ??I2S_Config_3
   \   00000054   0x78B0             LDRB     R0,[R6, #+2]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD004             BEQ.N    ??I2S_Config_3
   \   0000005A   0x219C             MOVS     R1,#+156
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000060   0x.... 0x....      BL       check_failed
    157          	CHECK_PARAM(PARAM_I2S_RESET(ConfigStruct->reset));
   \                     ??I2S_Config_3: (+1)
   \   00000064   0x78F0             LDRB     R0,[R6, #+3]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD007             BEQ.N    ??I2S_Config_4
   \   0000006A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD004             BEQ.N    ??I2S_Config_4
   \   00000070   0x219D             MOVS     R1,#+157
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000076   0x.... 0x....      BL       check_failed
    158          	CHECK_PARAM(PARAM_I2S_WS_SEL(ConfigStruct->ws_sel));
   \                     ??I2S_Config_4: (+1)
   \   0000007A   0x7930             LDRB     R0,[R6, #+4]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD007             BEQ.N    ??I2S_Config_5
   \   00000080   0x7930             LDRB     R0,[R6, #+4]
   \   00000082   0x2801             CMP      R0,#+1
   \   00000084   0xD004             BEQ.N    ??I2S_Config_5
   \   00000086   0x219E             MOVS     R1,#+158
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000008C   0x.... 0x....      BL       check_failed
    159          	CHECK_PARAM(PARAM_I2S_MUTE(ConfigStruct->mute));
   \                     ??I2S_Config_5: (+1)
   \   00000090   0x7970             LDRB     R0,[R6, #+5]
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xD007             BEQ.N    ??I2S_Config_6
   \   00000096   0x7970             LDRB     R0,[R6, #+5]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD004             BEQ.N    ??I2S_Config_6
   \   0000009C   0x219F             MOVS     R1,#+159
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000000A2   0x.... 0x....      BL       check_failed
    160          
    161          	/* Setup clock */
    162          	bps = (ConfigStruct->wordwidth +1)*8;
   \                     ??I2S_Config_6: (+1)
   \   000000A6   0x7830             LDRB     R0,[R6, #+0]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x00C0             LSLS     R0,R0,#+3
   \   000000AC   0x0007             MOVS     R7,R0
    163          
    164          	/* Calculate audio config */
    165          	config = (bps - 1)<<6 | (ConfigStruct->ws_sel)<<5 | (ConfigStruct->reset)<<4 |
    166          		(ConfigStruct->stop)<<3 | (ConfigStruct->mono)<<2 | (ConfigStruct->wordwidth);
   \   000000AE   0x1E78             SUBS     R0,R7,#+1
   \   000000B0   0x7931             LDRB     R1,[R6, #+4]
   \   000000B2   0x0149             LSLS     R1,R1,#+5
   \   000000B4   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000000B8   0x78F1             LDRB     R1,[R6, #+3]
   \   000000BA   0xEA50 0x1001      ORRS     R0,R0,R1, LSL #+4
   \   000000BE   0x78B1             LDRB     R1,[R6, #+2]
   \   000000C0   0xEA50 0x00C1      ORRS     R0,R0,R1, LSL #+3
   \   000000C4   0x7871             LDRB     R1,[R6, #+1]
   \   000000C6   0xEA50 0x0081      ORRS     R0,R0,R1, LSL #+2
   \   000000CA   0x7831             LDRB     R1,[R6, #+0]
   \   000000CC   0x4308             ORRS     R0,R1,R0
   \   000000CE   0x4680             MOV      R8,R0
    167          
    168          	if(TRMode == I2S_RX_MODE){
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2D01             CMP      R5,#+1
   \   000000D4   0xD104             BNE.N    ??I2S_Config_7
    169          		LPC_I2S->I2SDAI = config;
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x400a8004
   \   000000DA   0xF8C0 0x8000      STR      R8,[R0, #+0]
   \   000000DE   0xE003             B.N      ??I2S_Config_8
    170          	}else{
    171          		LPC_I2S->I2SDAO = config;
   \                     ??I2S_Config_7: (+1)
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   000000E4   0xF8C0 0x8000      STR      R8,[R0, #+0]
    172          	}
    173          }
   \                     ??I2S_Config_8: (+1)
   \   000000E8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    174          
    175          /********************************************************************//**
    176           * @brief		DeInitial both I2S transmit or receive
    177           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    178           * @return 		none
    179           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          void I2S_DeInit(LPC_I2S_TypeDef *I2Sx) {
   \                     I2S_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    181          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_DeInit_0
   \   0000000C   0x21B5             MOVS     R1,#+181
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000012   0x.... 0x....      BL       check_failed
    182          
    183          	// Turn off power and clock
    184          	CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCI2S, DISABLE);
   \                     ??I2S_DeInit_0: (+1)
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000001C   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    185          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    186          
    187          /********************************************************************//**
    188           * @brief		Get I2S Buffer Level
    189           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    190           * @param[in]	TRMode Transmit/receive mode, should be:
    191           * 					- I2S_TX_MODE = 0: transmit mode
    192           * 					- I2S_RX_MODE = 1: receive mode
    193           * @return 		current level of Transmit/Receive Buffer
    194           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    195          uint8_t I2S_GetLevel(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode)
    196          {
   \                     I2S_GetLevel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    197          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_GetLevel_0
   \   0000000E   0x21C5             MOVS     R1,#+197
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    198          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_GetLevel_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_GetLevel_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_GetLevel_1
   \   00000024   0x21C6             MOVS     R1,#+198
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    199          
    200          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_GetLevel_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD103             BNE.N    ??I2S_GetLevel_2
    201          	{
    202          		return ((I2Sx->I2SSTATE >> 16) & 0xFF);
   \   00000034   0x6920             LDR      R0,[R4, #+16]
   \   00000036   0x0C00             LSRS     R0,R0,#+16
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xE002             B.N      ??I2S_GetLevel_3
    203          	}
    204          	else
    205          	{
    206          		return ((I2Sx->I2SSTATE >> 8) & 0xFF);
   \                     ??I2S_GetLevel_2: (+1)
   \   0000003C   0x6920             LDR      R0,[R4, #+16]
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??I2S_GetLevel_3: (+1)
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    207          	}
    208          }
    209          
    210          /********************************************************************//**
    211           * @brief		I2S Start: clear all STOP,RESET and MUTE bit, ready to operate
    212           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    213           * @return 		none
    214           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    215          void I2S_Start(LPC_I2S_TypeDef *I2Sx)
    216          {
    217          	//Clear STOP,RESET and MUTE bit
    218          	I2Sx->I2SDAO &= ~I2S_DAI_RESET;
   \                     I2S_Start: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0xF031 0x0110      BICS     R1,R1,#0x10
   \   00000006   0x6001             STR      R1,[R0, #+0]
    219          	I2Sx->I2SDAI &= ~I2S_DAI_RESET;
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0xF031 0x0110      BICS     R1,R1,#0x10
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    220          	I2Sx->I2SDAO &= ~I2S_DAI_STOP;
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF031 0x0108      BICS     R1,R1,#0x8
   \   00000016   0x6001             STR      R1,[R0, #+0]
    221          	I2Sx->I2SDAI &= ~I2S_DAI_STOP;
   \   00000018   0x6841             LDR      R1,[R0, #+4]
   \   0000001A   0xF031 0x0108      BICS     R1,R1,#0x8
   \   0000001E   0x6041             STR      R1,[R0, #+4]
    222          	I2Sx->I2SDAO &= ~I2S_DAI_MUTE;
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0xF431 0x4100      BICS     R1,R1,#0x8000
   \   00000026   0x6001             STR      R1,[R0, #+0]
    223          }
   \   00000028   0x4770             BX       LR               ;; return
    224          
    225          /********************************************************************//**
    226           * @brief		I2S Send data
    227           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    228           * @param[in]	BufferData pointer to uint32_t is the data will be send
    229           * @return 		none
    230           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          void I2S_Send(LPC_I2S_TypeDef *I2Sx, uint32_t BufferData) {
   \                     I2S_Send: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    232          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_Send_0
   \   0000000E   0x21E8             MOVS     R1,#+232
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    233          
    234          	I2Sx->I2STXFIFO = BufferData;
   \                     ??I2S_Send_0: (+1)
   \   00000018   0x60A5             STR      R5,[R4, #+8]
    235          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    236          
    237          /********************************************************************//**
    238           * @brief		I2S Receive Data
    239           * @param[in]	I2Sx pointer to LPC_I2S_TypeDef
    240           * @return 		received value
    241           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    242          uint32_t I2S_Receive(LPC_I2S_TypeDef* I2Sx) {
   \                     I2S_Receive: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    243          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_Receive_0
   \   0000000C   0x21F3             MOVS     R1,#+243
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000012   0x.... 0x....      BL       check_failed
    244          
    245          	return (I2Sx->I2SRXFIFO);
   \                     ??I2S_Receive_0: (+1)
   \   00000016   0x68E0             LDR      R0,[R4, #+12]
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    246          
    247          }
    248          
    249          /********************************************************************//**
    250           * @brief		I2S Pause
    251           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    252           * @param[in]	TRMode is transmit/receive mode, should be:
    253           * 				- I2S_TX_MODE = 0: transmit mode
    254           * 				- I2S_RX_MODE = 1: receive mode
    255           * @return 		none
    256           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    257          void I2S_Pause(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Pause: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    258          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Pause_0
   \   0000000E   0xF44F 0x7181      MOV      R1,#+258
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000016   0x.... 0x....      BL       check_failed
    259          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Pause_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Pause_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Pause_1
   \   00000026   0xF240 0x1103      MOVW     R1,#+259
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002E   0x.... 0x....      BL       check_failed
    260          
    261          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Pause_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD104             BNE.N    ??I2S_Pause_2
    262          	{
    263          		I2Sx->I2SDAO |= I2S_DAO_STOP;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0xE003             B.N      ??I2S_Pause_3
    264          	} else //Receive mode
    265          	{
    266          		I2Sx->I2SDAI |= I2S_DAI_STOP;
   \                     ??I2S_Pause_2: (+1)
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000048   0x6060             STR      R0,[R4, #+4]
    267          	}
    268          }
   \                     ??I2S_Pause_3: (+1)
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    269          
    270          /********************************************************************//**
    271           * @brief		I2S Mute
    272           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    273           * @param[in]	TRMode is transmit/receive mode, should be:
    274           * 				- I2S_TX_MODE = 0: transmit mode
    275           * 				- I2S_RX_MODE = 1: receive mode
    276           * @return 		none
    277           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    278          void I2S_Mute(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Mute: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    279          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Mute_0
   \   0000000E   0xF240 0x1117      MOVW     R1,#+279
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000016   0x.... 0x....      BL       check_failed
    280          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Mute_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Mute_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Mute_1
   \   00000026   0xF44F 0x718C      MOV      R1,#+280
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002E   0x.... 0x....      BL       check_failed
    281          
    282          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Mute_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD104             BNE.N    ??I2S_Mute_2
    283          	{
    284          		I2Sx->I2SDAO |= I2S_DAO_MUTE;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0xE003             B.N      ??I2S_Mute_3
    285          	} else //Receive mode
    286          	{
    287          		I2Sx->I2SDAI |= I2S_DAI_MUTE;
   \                     ??I2S_Mute_2: (+1)
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000048   0x6060             STR      R0,[R4, #+4]
    288          	}
    289          }
   \                     ??I2S_Mute_3: (+1)
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    290          
    291          /********************************************************************//**
    292           * @brief		I2S Stop
    293           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    294           * @param[in]	TRMode is transmit/receive mode, should be:
    295           * 				- I2S_TX_MODE = 0: transmit mode
    296           * 				- I2S_RX_MODE = 1: receive mode
    297           * @return 		none
    298           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    299          void I2S_Stop(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode) {
   \                     I2S_Stop: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    300          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD005             BEQ.N    ??I2S_Stop_0
   \   0000000E   0xF44F 0x7196      MOV      R1,#+300
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000016   0x.... 0x....      BL       check_failed
    301          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_Stop_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD008             BEQ.N    ??I2S_Stop_1
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D01             CMP      R5,#+1
   \   00000024   0xD005             BEQ.N    ??I2S_Stop_1
   \   00000026   0xF240 0x112D      MOVW     R1,#+301
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002E   0x.... 0x....      BL       check_failed
    302          
    303          	if (TRMode == I2S_TX_MODE) //Transmit mode
   \                     ??I2S_Stop_1: (+1)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD10C             BNE.N    ??I2S_Stop_2
    304          	{
    305          		I2Sx->I2SDAO &= ~I2S_DAO_MUTE;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   0000003E   0x6020             STR      R0,[R4, #+0]
    306          		I2Sx->I2SDAO |= I2S_DAO_STOP;
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000046   0x6020             STR      R0,[R4, #+0]
    307          		I2Sx->I2SDAO |= I2S_DAO_RESET;
   \   00000048   0x6820             LDR      R0,[R4, #+0]
   \   0000004A   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000004E   0x6020             STR      R0,[R4, #+0]
   \   00000050   0xE007             B.N      ??I2S_Stop_3
    308          	} else //Receive mode
    309          	{
    310          		I2Sx->I2SDAI |= I2S_DAI_STOP;
   \                     ??I2S_Stop_2: (+1)
   \   00000052   0x6860             LDR      R0,[R4, #+4]
   \   00000054   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000058   0x6060             STR      R0,[R4, #+4]
    311          		I2Sx->I2SDAI |= I2S_DAI_RESET;
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000060   0x6060             STR      R0,[R4, #+4]
    312          	}
    313          }
   \                     ??I2S_Stop_3: (+1)
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    314          
    315          /********************************************************************//**
    316           * @brief		Set frequency for I2S
    317           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    318           * @param[in]	Freq is the frequency for I2S will be set. It can range
    319           * 				from 16-96 kHz(16, 22.05, 32, 44.1, 48, 96kHz)
    320           * @param[in]	TRMode is transmit/receive mode, should be:
    321           * 				- I2S_TX_MODE = 0: transmit mode
    322           * 				- I2S_RX_MODE = 1: receive mode
    323           * @return 		Status: ERROR or SUCCESS
    324           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    325          Status I2S_FreqConfig(LPC_I2S_TypeDef *I2Sx, uint32_t Freq, uint8_t TRMode) {
   \                     I2S_FreqConfig: (+1)
   \   00000000   0xE92D 0x4FF6      PUSH     {R1,R2,R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0007             MOVS     R7,R0
    326          
    327          	uint32_t i2s_clk;
    328          	uint8_t channel, wordwidth;
    329          	uint32_t x, y;
    330          	uint64_t divider;
    331          	uint16_t dif;
    332          	uint16_t x_divide, y_divide;
    333          	uint16_t err, ErrorOptimal = 0xFFFF;
   \   00000008   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000000C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    334          	
    335          	uint32_t N;
    336          
    337          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   00000014   0x4287             CMP      R7,R0
   \   00000016   0xD005             BEQ.N    ??I2S_FreqConfig_0
   \   00000018   0xF240 0x1151      MOVW     R1,#+337
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000020   0x.... 0x....      BL       check_failed
    338          	CHECK_PARAM(PRAM_I2S_FREQ(Freq));
   \                     ??I2S_FreqConfig_0: (+1)
   \   00000024   0x9805             LDR      R0,[SP, #+20]
   \   00000026   0xF5B0 0x5F7A      CMP      R0,#+16000
   \   0000002A   0xD304             BCC.N    ??I2S_FreqConfig_1
   \   0000002C   0x9805             LDR      R0,[SP, #+20]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x17701
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD305             BCC.N    ??I2S_FreqConfig_2
   \                     ??I2S_FreqConfig_1: (+1)
   \   00000036   0xF44F 0x71A9      MOV      R1,#+338
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000003E   0x.... 0x....      BL       check_failed
    339          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_FreqConfig_2: (+1)
   \   00000042   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD009             BEQ.N    ??I2S_FreqConfig_3
   \   0000004A   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD005             BEQ.N    ??I2S_FreqConfig_3
   \   00000052   0xF240 0x1153      MOVW     R1,#+339
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000005A   0x.... 0x....      BL       check_failed
    340          
    341          	//Get the frequency of PCLK_I2S
    342          	i2s_clk = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_I2S);
   \                     ??I2S_FreqConfig_3: (+1)
   \   0000005E   0x2036             MOVS     R0,#+54
   \   00000060   0x.... 0x....      BL       CLKPWR_GetPCLK
   \   00000064   0x9004             STR      R0,[SP, #+16]
    343          
    344          	if(TRMode == I2S_TX_MODE)
   \   00000066   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD10C             BNE.N    ??I2S_FreqConfig_4
    345          	{
    346          		channel = i2s_GetChannel(I2Sx,I2S_TX_MODE);
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x0038             MOVS     R0,R7
   \   00000072   0x.... 0x....      BL       i2s_GetChannel
   \   00000076   0xF88D 0x0001      STRB     R0,[SP, #+1]
    347          		wordwidth = i2s_GetWordWidth(I2Sx,I2S_TX_MODE);
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x.... 0x....      BL       i2s_GetWordWidth
   \   00000082   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000086   0xE00B             B.N      ??I2S_FreqConfig_5
    348          	}
    349          	else
    350          	{
    351          		channel = i2s_GetChannel(I2Sx,I2S_RX_MODE);
   \                     ??I2S_FreqConfig_4: (+1)
   \   00000088   0x2101             MOVS     R1,#+1
   \   0000008A   0x0038             MOVS     R0,R7
   \   0000008C   0x.... 0x....      BL       i2s_GetChannel
   \   00000090   0xF88D 0x0001      STRB     R0,[SP, #+1]
    352          		wordwidth = i2s_GetWordWidth(I2Sx,I2S_RX_MODE);
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x0038             MOVS     R0,R7
   \   00000098   0x.... 0x....      BL       i2s_GetWordWidth
   \   0000009C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    353          	}
    354          
    355          	/* Calculate X and Y divider
    356          	 * The MCLK rate for the I2S transmitter is determined by the value
    357          	 * in the I2STXRATE/I2SRXRATE register. The required I2STXRATE/I2SRXRATE
    358          	 * setting depends on the desired audio sample rate desired, the format
    359          	 * (stereo/mono) used, and the data size.
    360          	 * The formula is:
    361          	 * 		I2S_MCLK = PCLK_I2S * (X/Y) / 2
    362               * In that, Y must be greater than or equal to X. X should divides evenly
    363               * into Y. 
    364          	 * We have:
    365          	 * 		I2S_MCLK = Freq * channel*wordwidth * (I2STXBITRATE+1);
    366          	 * So: (X/Y) = (Freq * channel*wordwidth * (I2STXBITRATE+1))*2/PCLK_I2S
    367          	 * We use a loop function to chose the most suitable X,Y value
    368          	 */
    369          
    370          	/* divider is a fixed point number with 16 fractional bits */
    371              divider = (((uint64_t)Freq *channel*wordwidth * 2)<<16) / i2s_clk;
   \                     ??I2S_FreqConfig_5: (+1)
   \   000000A0   0x9805             LDR      R0,[SP, #+20]
   \   000000A2   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000A6   0xFBA1 0xAB00      UMULL    R10,R11,R1,R0
   \   000000AA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0xFBA0 0x230A      UMULL    R2,R3,R0,R10
   \   000000B4   0xFB00 0x330B      MLA      R3,R0,R11,R3
   \   000000B8   0xFB01 0x330A      MLA      R3,R1,R10,R3
   \   000000BC   0xF05F 0x0A02      MOVS     R10,#+2
   \   000000C0   0xF05F 0x0B00      MOVS     R11,#+0
   \   000000C4   0xFBAA 0x0102      UMULL    R0,R1,R10,R2
   \   000000C8   0xFB0A 0x1103      MLA      R1,R10,R3,R1
   \   000000CC   0xFB0B 0x1102      MLA      R1,R11,R2,R1
   \   000000D0   0x0409             LSLS     R1,R1,#+16
   \   000000D2   0xEA41 0x4110      ORR      R1,R1,R0, LSR #+16
   \   000000D6   0x0400             LSLS     R0,R0,#+16
   \   000000D8   0x9A04             LDR      R2,[SP, #+16]
   \   000000DA   0x2300             MOVS     R3,#+0
   \   000000DC   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000E0   0x0004             MOVS     R4,R0
   \   000000E2   0x000D             MOVS     R5,R1
    372          
    373          	/* find N that make x/y <= 1 -> divider <= 2^16 */
    374          	for(N=64;N>0;N--){
   \   000000E4   0x2040             MOVS     R0,#+64
   \   000000E6   0x4680             MOV      R8,R0
   \                     ??I2S_FreqConfig_6: (+1)
   \   000000E8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000EC   0xD011             BEQ.N    ??I2S_FreqConfig_7
    375          		if((divider*N) < (1<<16)) break;
   \   000000EE   0xF05F 0x0900      MOVS     R9,#+0
   \   000000F2   0xFBA8 0x0104      UMULL    R0,R1,R8,R4
   \   000000F6   0xFB08 0x1105      MLA      R1,R8,R5,R1
   \   000000FA   0xFB09 0x1104      MLA      R1,R9,R4,R1
   \   000000FE   0x2900             CMP      R1,#+0
   \   00000100   0xD804             BHI.N    ??I2S_FreqConfig_8
   \   00000102   0xD302             BCC.N    ??I2S_FreqConfig_9
   \   00000104   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000108   0xD200             BCS.N    ??I2S_FreqConfig_8
   \                     ??I2S_FreqConfig_9: (+1)
   \   0000010A   0xE002             B.N      ??I2S_FreqConfig_7
    376          	}
   \                     ??I2S_FreqConfig_8: (+1)
   \   0000010C   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   00000110   0xE7EA             B.N      ??I2S_FreqConfig_6
    377          
    378          	if(N == 0) return ERROR;
   \                     ??I2S_FreqConfig_7: (+1)
   \   00000112   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000116   0xD101             BNE.N    ??I2S_FreqConfig_10
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0xE08F             B.N      ??I2S_FreqConfig_11
    379          
    380          	divider *= N;
   \                     ??I2S_FreqConfig_10: (+1)
   \   0000011C   0xF05F 0x0900      MOVS     R9,#+0
   \   00000120   0xFBA8 0x0104      UMULL    R0,R1,R8,R4
   \   00000124   0xFB08 0x1105      MLA      R1,R8,R5,R1
   \   00000128   0xFB09 0x1104      MLA      R1,R9,R4,R1
   \   0000012C   0x0004             MOVS     R4,R0
   \   0000012E   0x000D             MOVS     R5,R1
    381          
    382          	for (y = 255; y > 0; y--) {
   \   00000130   0x20FF             MOVS     R0,#+255
   \   00000132   0x0006             MOVS     R6,R0
   \                     ??I2S_FreqConfig_12: (+1)
   \   00000134   0x2E00             CMP      R6,#+0
   \   00000136   0xD02F             BEQ.N    ??I2S_FreqConfig_13
    383          		x = y * divider;
   \   00000138   0xFB04 0xF006      MUL      R0,R4,R6
   \   0000013C   0x9003             STR      R0,[SP, #+12]
    384          		if(x & (0xFF000000)) continue;
   \   0000013E   0x9803             LDR      R0,[SP, #+12]
   \   00000140   0xF010 0x4F7F      TST      R0,#0xFF000000
   \   00000144   0xD126             BNE.N    ??I2S_FreqConfig_14
    385          		dif = x & 0xFFFF;
   \                     ??I2S_FreqConfig_15: (+1)
   \   00000146   0x9803             LDR      R0,[SP, #+12]
   \   00000148   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    386          		if(dif>0x8000) err = 0x10000-dif;
   \   0000014C   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000150   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000154   0xDD05             BLE.N    ??I2S_FreqConfig_16
   \   00000156   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000015A   0x4240             RSBS     R0,R0,#+0
   \   0000015C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000160   0xE003             B.N      ??I2S_FreqConfig_17
    387          		else err = dif;
   \                     ??I2S_FreqConfig_16: (+1)
   \   00000162   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000166   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    388          		if (err == 0)
   \                     ??I2S_FreqConfig_17: (+1)
   \   0000016A   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD103             BNE.N    ??I2S_FreqConfig_18
    389          		{
    390          			y_divide = y;
   \   00000172   0x0030             MOVS     R0,R6
   \   00000174   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    391          			break;
   \   00000178   0xE00E             B.N      ??I2S_FreqConfig_13
    392          		}
    393          		else if (err < ErrorOptimal)
   \                     ??I2S_FreqConfig_18: (+1)
   \   0000017A   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000017E   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD206             BCS.N    ??I2S_FreqConfig_14
    394          		{
    395          			ErrorOptimal = err;
   \   00000186   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000018A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    396          			y_divide = y;
   \   0000018E   0x0030             MOVS     R0,R6
   \   00000190   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    397          		}
    398          	}
   \                     ??I2S_FreqConfig_14: (+1)
   \   00000194   0x1E76             SUBS     R6,R6,#+1
   \   00000196   0xE7CD             B.N      ??I2S_FreqConfig_12
    399          	x_divide = ((uint64_t)y_divide * Freq *(channel*wordwidth)* N * 2)/i2s_clk;
   \                     ??I2S_FreqConfig_13: (+1)
   \   00000198   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000019C   0x9905             LDR      R1,[SP, #+20]
   \   0000019E   0xFBA1 0xAB00      UMULL    R10,R11,R1,R0
   \   000001A2   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001A6   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001AA   0xFB01 0xF200      MUL      R2,R1,R0
   \   000001AE   0x17D3             ASRS     R3,R2,#+31
   \   000001B0   0xFBA2 0x010A      UMULL    R0,R1,R2,R10
   \   000001B4   0xFB02 0x110B      MLA      R1,R2,R11,R1
   \   000001B8   0xFB03 0x110A      MLA      R1,R3,R10,R1
   \   000001BC   0xF05F 0x0900      MOVS     R9,#+0
   \   000001C0   0xFBA8 0x2300      UMULL    R2,R3,R8,R0
   \   000001C4   0xFB08 0x3301      MLA      R3,R8,R1,R3
   \   000001C8   0xFB09 0x3300      MLA      R3,R9,R0,R3
   \   000001CC   0xF05F 0x0A02      MOVS     R10,#+2
   \   000001D0   0xF05F 0x0B00      MOVS     R11,#+0
   \   000001D4   0xFBAA 0x0102      UMULL    R0,R1,R10,R2
   \   000001D8   0xFB0A 0x1103      MLA      R1,R10,R3,R1
   \   000001DC   0xFB0B 0x1102      MLA      R1,R11,R2,R1
   \   000001E0   0x9A04             LDR      R2,[SP, #+16]
   \   000001E2   0x2300             MOVS     R3,#+0
   \   000001E4   0x.... 0x....      BL       __aeabi_uldivmod
   \   000001E8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    400          	if(x_divide >= 256) x_divide = 0xFF;
   \   000001EC   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000001F0   0x28FF             CMP      R0,#+255
   \   000001F2   0xDD02             BLE.N    ??I2S_FreqConfig_19
   \   000001F4   0x20FF             MOVS     R0,#+255
   \   000001F6   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    401          	if(x_divide == 0) x_divide = 1;
   \                     ??I2S_FreqConfig_19: (+1)
   \   000001FA   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000001FE   0x2800             CMP      R0,#+0
   \   00000200   0xD102             BNE.N    ??I2S_FreqConfig_20
   \   00000202   0x2001             MOVS     R0,#+1
   \   00000204   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    402          
    403          	if (TRMode == I2S_TX_MODE)// Transmitter
   \                     ??I2S_FreqConfig_20: (+1)
   \   00000208   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD10A             BNE.N    ??I2S_FreqConfig_21
    404          	{
    405          		I2Sx->I2STXBITRATE = N-1;
   \   00000210   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   00000214   0x62B8             STR      R0,[R7, #+40]
    406          		I2Sx->I2STXRATE = y_divide | (x_divide << 8);
   \   00000216   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000021A   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000021E   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000222   0x6238             STR      R0,[R7, #+32]
   \   00000224   0xE009             B.N      ??I2S_FreqConfig_22
    407          	} else //Receiver
    408          	{
    409          		I2Sx->I2SRXBITRATE = N-1;
   \                     ??I2S_FreqConfig_21: (+1)
   \   00000226   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   0000022A   0x62F8             STR      R0,[R7, #+44]
    410          		I2Sx->I2STXRATE = y_divide | (x_divide << 8);
   \   0000022C   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000230   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000234   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000238   0x6238             STR      R0,[R7, #+32]
    411          	}
    412          	return SUCCESS;
   \                     ??I2S_FreqConfig_22: (+1)
   \   0000023A   0x2001             MOVS     R0,#+1
   \                     ??I2S_FreqConfig_11: (+1)
   \   0000023C   0xB007             ADD      SP,SP,#+28
   \   0000023E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    413          }
    414          
    415          /********************************************************************//**
    416           * @brief		I2S set bitrate
    417           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    418           * @param[in]	bitrate value will be set
    419           * 				bitrate value should be in range: 0 .. 63
    420           * @param[in]	TRMode is transmit/receive mode, should be:
    421           * 				- I2S_TX_MODE = 0: transmit mode
    422           * 				- I2S_RX_MODE = 1: receive mode
    423           * @return 		none
    424           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    425          void I2S_SetBitRate(LPC_I2S_TypeDef *I2Sx, uint8_t bitrate, uint8_t TRMode)
    426          {
   \                     I2S_SetBitRate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    427          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??I2S_SetBitRate_0
   \   00000010   0xF240 0x11AB      MOVW     R1,#+427
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000018   0x.... 0x....      BL       check_failed
    428          	CHECK_PARAM(PARAM_I2S_BITRATE(bitrate));
   \                     ??I2S_SetBitRate_0: (+1)
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D40             CMP      R5,#+64
   \   00000020   0xDB05             BLT.N    ??I2S_SetBitRate_1
   \   00000022   0xF44F 0x71D6      MOV      R1,#+428
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    429          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_SetBitRate_1: (+1)
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E00             CMP      R6,#+0
   \   00000032   0xD008             BEQ.N    ??I2S_SetBitRate_2
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E01             CMP      R6,#+1
   \   00000038   0xD005             BEQ.N    ??I2S_SetBitRate_2
   \   0000003A   0xF240 0x11AD      MOVW     R1,#+429
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000042   0x.... 0x....      BL       check_failed
    430          
    431          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_SetBitRate_2: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD102             BNE.N    ??I2S_SetBitRate_3
    432          	{
    433          		I2Sx->I2STXBITRATE = bitrate;
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x62A5             STR      R5,[R4, #+40]
   \   00000050   0xE001             B.N      ??I2S_SetBitRate_4
    434          	}
    435          	else
    436          	{
    437          		I2Sx->I2SRXBITRATE = bitrate;
   \                     ??I2S_SetBitRate_3: (+1)
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x62E5             STR      R5,[R4, #+44]
    438          	}
    439          }
   \                     ??I2S_SetBitRate_4: (+1)
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    440          
    441          /********************************************************************//**
    442           * @brief		Configuration operating mode for I2S
    443           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    444           * @param[in]	ModeConfig pointer to I2S_MODEConf_Type will be used to
    445           * 				configure
    446           * @param[in]	TRMode is transmit/receive mode, should be:
    447           * 				- I2S_TX_MODE = 0: transmit mode
    448           * 				- I2S_RX_MODE = 1: receive mode
    449           * @return 		none
    450           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    451          void I2S_ModeConfig(LPC_I2S_TypeDef *I2Sx, I2S_MODEConf_Type* ModeConfig,
    452          		uint8_t TRMode)
    453          {
   \                     I2S_ModeConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    454          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD005             BEQ.N    ??I2S_ModeConfig_0
   \   00000010   0xF44F 0x71E3      MOV      R1,#+454
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000018   0x.... 0x....      BL       check_failed
    455          	CHECK_PARAM(PARAM_I2S_CLKSEL(ModeConfig->clksel));
   \                     ??I2S_ModeConfig_0: (+1)
   \   0000001C   0x7828             LDRB     R0,[R5, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??I2S_ModeConfig_1
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD005             BEQ.N    ??I2S_ModeConfig_1
   \   00000028   0xF240 0x11C7      MOVW     R1,#+455
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000030   0x.... 0x....      BL       check_failed
    456          	CHECK_PARAM(PARAM_I2S_4PIN(ModeConfig->fpin));
   \                     ??I2S_ModeConfig_1: (+1)
   \   00000034   0x7868             LDRB     R0,[R5, #+1]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD007             BEQ.N    ??I2S_ModeConfig_2
   \   0000003A   0x7868             LDRB     R0,[R5, #+1]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD004             BEQ.N    ??I2S_ModeConfig_2
   \   00000040   0xF44F 0x71E4      MOV      R1,#+456
   \   00000044   0x....             LDR.N    R0,??DataTable19_1
   \   00000046   0x.... 0x....      BL       check_failed
    457          	CHECK_PARAM(PARAM_I2S_MCLK(ModeConfig->mcena));
   \                     ??I2S_ModeConfig_2: (+1)
   \   0000004A   0x78A8             LDRB     R0,[R5, #+2]
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD007             BEQ.N    ??I2S_ModeConfig_3
   \   00000050   0x78A8             LDRB     R0,[R5, #+2]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD004             BEQ.N    ??I2S_ModeConfig_3
   \   00000056   0xF240 0x11C9      MOVW     R1,#+457
   \   0000005A   0x....             LDR.N    R0,??DataTable19_1
   \   0000005C   0x.... 0x....      BL       check_failed
    458          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_ModeConfig_3: (+1)
   \   00000060   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD007             BEQ.N    ??I2S_ModeConfig_4
   \   00000066   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000068   0x2E01             CMP      R6,#+1
   \   0000006A   0xD004             BEQ.N    ??I2S_ModeConfig_4
   \   0000006C   0xF44F 0x71E5      MOV      R1,#+458
   \   00000070   0x....             LDR.N    R0,??DataTable19_1
   \   00000072   0x.... 0x....      BL       check_failed
    459          
    460          	if (TRMode == I2S_TX_MODE) {
   \                     ??I2S_ModeConfig_4: (+1)
   \   00000076   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD119             BNE.N    ??I2S_ModeConfig_5
    461          		I2Sx->I2STXMODE &= ~0x0F; //clear bit 3:0 in I2STXMODE register
   \   0000007C   0x6B20             LDR      R0,[R4, #+48]
   \   0000007E   0x0900             LSRS     R0,R0,#+4
   \   00000080   0x0100             LSLS     R0,R0,#+4
   \   00000082   0x6320             STR      R0,[R4, #+48]
    462          		if (ModeConfig->clksel == I2S_CLKSEL_MCLK) {
   \   00000084   0x7828             LDRB     R0,[R5, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xD103             BNE.N    ??I2S_ModeConfig_6
    463          			I2Sx->I2STXMODE |= 0x02;
   \   0000008A   0x6B20             LDR      R0,[R4, #+48]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x6320             STR      R0,[R4, #+48]
    464          		}
    465          		if (ModeConfig->fpin == I2S_4PIN_ENABLE) {
   \                     ??I2S_ModeConfig_6: (+1)
   \   00000092   0x7868             LDRB     R0,[R5, #+1]
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xD103             BNE.N    ??I2S_ModeConfig_7
    466          			I2Sx->I2STXMODE |= (1 << 2);
   \   00000098   0x6B20             LDR      R0,[R4, #+48]
   \   0000009A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000009E   0x6320             STR      R0,[R4, #+48]
    467          		}
    468          		if (ModeConfig->mcena == I2S_MCLK_ENABLE) {
   \                     ??I2S_ModeConfig_7: (+1)
   \   000000A0   0x78A8             LDRB     R0,[R5, #+2]
   \   000000A2   0x2801             CMP      R0,#+1
   \   000000A4   0xD11D             BNE.N    ??I2S_ModeConfig_8
    469          			I2Sx->I2STXMODE |= (1 << 3);
   \   000000A6   0x6B20             LDR      R0,[R4, #+48]
   \   000000A8   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AC   0x6320             STR      R0,[R4, #+48]
   \   000000AE   0xE018             B.N      ??I2S_ModeConfig_8
    470          		}
    471          	} else {
    472          		I2Sx->I2SRXMODE &= ~0x0F; //clear bit 3:0 in I2STXMODE register
   \                     ??I2S_ModeConfig_5: (+1)
   \   000000B0   0x6B60             LDR      R0,[R4, #+52]
   \   000000B2   0x0900             LSRS     R0,R0,#+4
   \   000000B4   0x0100             LSLS     R0,R0,#+4
   \   000000B6   0x6360             STR      R0,[R4, #+52]
    473          		if (ModeConfig->clksel == I2S_CLKSEL_MCLK) {
   \   000000B8   0x7828             LDRB     R0,[R5, #+0]
   \   000000BA   0x2802             CMP      R0,#+2
   \   000000BC   0xD103             BNE.N    ??I2S_ModeConfig_9
    474          			I2Sx->I2SRXMODE |= 0x02;
   \   000000BE   0x6B60             LDR      R0,[R4, #+52]
   \   000000C0   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000C4   0x6360             STR      R0,[R4, #+52]
    475          		}
    476          		if (ModeConfig->fpin == I2S_4PIN_ENABLE) {
   \                     ??I2S_ModeConfig_9: (+1)
   \   000000C6   0x7868             LDRB     R0,[R5, #+1]
   \   000000C8   0x2801             CMP      R0,#+1
   \   000000CA   0xD103             BNE.N    ??I2S_ModeConfig_10
    477          			I2Sx->I2SRXMODE |= (1 << 2);
   \   000000CC   0x6B60             LDR      R0,[R4, #+52]
   \   000000CE   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000D2   0x6360             STR      R0,[R4, #+52]
    478          		}
    479          		if (ModeConfig->mcena == I2S_MCLK_ENABLE) {
   \                     ??I2S_ModeConfig_10: (+1)
   \   000000D4   0x78A8             LDRB     R0,[R5, #+2]
   \   000000D6   0x2801             CMP      R0,#+1
   \   000000D8   0xD103             BNE.N    ??I2S_ModeConfig_8
    480          			I2Sx->I2SRXMODE |= (1 << 3);
   \   000000DA   0x6B60             LDR      R0,[R4, #+52]
   \   000000DC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000E0   0x6360             STR      R0,[R4, #+52]
    481          		}
    482          	}
    483          }
   \                     ??I2S_ModeConfig_8: (+1)
   \   000000E2   0xBD70             POP      {R4-R6,PC}       ;; return
    484          
    485          /********************************************************************//**
    486           * @brief		Configure DMA operation for I2S
    487           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    488           * @param[in]	DMAConfig pointer to I2S_DMAConf_Type will be used to configure
    489           * @param[in]	TRMode is transmit/receive mode, should be:
    490           * 				- I2S_TX_MODE = 0: transmit mode
    491           * 				- I2S_RX_MODE = 1: receive mode
    492           * @return 		none
    493           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    494          void I2S_DMAConfig(LPC_I2S_TypeDef *I2Sx, I2S_DMAConf_Type* DMAConfig,
    495          		uint8_t TRMode)
    496          {
   \                     I2S_DMAConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    497          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_DMAConfig_0
   \   0000000E   0xF240 0x11F1      MOVW     R1,#+497
   \   00000012   0x....             LDR.N    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    498          	CHECK_PARAM(PARAM_I2S_DMA(DMAConfig->DMAIndex));
   \                     ??I2S_DMAConfig_0: (+1)
   \   00000018   0x7828             LDRB     R0,[R5, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_DMAConfig_1
   \   0000001E   0x7828             LDRB     R0,[R5, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_DMAConfig_1
   \   00000024   0xF44F 0x71F9      MOV      R1,#+498
   \   00000028   0x....             LDR.N    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    499          	CHECK_PARAM(PARAM_I2S_DMA_DEPTH(DMAConfig->depth));
   \                     ??I2S_DMAConfig_1: (+1)
   \   0000002E   0x7868             LDRB     R0,[R5, #+1]
   \   00000030   0x2820             CMP      R0,#+32
   \   00000032   0xDB04             BLT.N    ??I2S_DMAConfig_2
   \   00000034   0xF240 0x11F3      MOVW     R1,#+499
   \   00000038   0x....             LDR.N    R0,??DataTable19_1
   \   0000003A   0x.... 0x....      BL       check_failed
    500          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_DMAConfig_2: (+1)
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0x2E00             CMP      R6,#+0
   \   00000042   0xD007             BEQ.N    ??I2S_DMAConfig_3
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x2E01             CMP      R6,#+1
   \   00000048   0xD004             BEQ.N    ??I2S_DMAConfig_3
   \   0000004A   0xF44F 0x71FA      MOV      R1,#+500
   \   0000004E   0x....             LDR.N    R0,??DataTable19_1
   \   00000050   0x.... 0x....      BL       check_failed
    501          
    502          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_DMAConfig_3: (+1)
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E01             CMP      R6,#+1
   \   00000058   0xD10C             BNE.N    ??I2S_DMAConfig_4
    503          		if (DMAConfig->DMAIndex == I2S_DMA_1) {
   \   0000005A   0x7828             LDRB     R0,[R5, #+0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD104             BNE.N    ??I2S_DMAConfig_5
    504          			LPC_I2S->I2SDMA1 = (DMAConfig->depth) << 8;
   \   00000060   0x7868             LDRB     R0,[R5, #+1]
   \   00000062   0x0200             LSLS     R0,R0,#+8
   \   00000064   0x....             LDR.N    R1,??DataTable19_4  ;; 0x400a8014
   \   00000066   0x6008             STR      R0,[R1, #+0]
   \   00000068   0xE010             B.N      ??I2S_DMAConfig_6
    505          		} else {
    506          			LPC_I2S->I2SDMA2 = (DMAConfig->depth) << 8;
   \                     ??I2S_DMAConfig_5: (+1)
   \   0000006A   0x7868             LDRB     R0,[R5, #+1]
   \   0000006C   0x0200             LSLS     R0,R0,#+8
   \   0000006E   0x....             LDR.N    R1,??DataTable19_5  ;; 0x400a8018
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE00B             B.N      ??I2S_DMAConfig_6
    507          		}
    508          	} else {
    509          		if (DMAConfig->DMAIndex == I2S_DMA_1) {
   \                     ??I2S_DMAConfig_4: (+1)
   \   00000074   0x7828             LDRB     R0,[R5, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD104             BNE.N    ??I2S_DMAConfig_7
    510          			LPC_I2S->I2SDMA1 = (DMAConfig->depth) << 16;
   \   0000007A   0x7868             LDRB     R0,[R5, #+1]
   \   0000007C   0x0400             LSLS     R0,R0,#+16
   \   0000007E   0x....             LDR.N    R1,??DataTable19_4  ;; 0x400a8014
   \   00000080   0x6008             STR      R0,[R1, #+0]
   \   00000082   0xE003             B.N      ??I2S_DMAConfig_6
    511          		} else {
    512          			LPC_I2S->I2SDMA2 = (DMAConfig->depth) << 16;
   \                     ??I2S_DMAConfig_7: (+1)
   \   00000084   0x7868             LDRB     R0,[R5, #+1]
   \   00000086   0x0400             LSLS     R0,R0,#+16
   \   00000088   0x....             LDR.N    R1,??DataTable19_5  ;; 0x400a8018
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    513          		}
    514          	}
    515          }
   \                     ??I2S_DMAConfig_6: (+1)
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    516          
    517          /********************************************************************//**
    518           * @brief		Enable/Disable DMA operation for I2S
    519           * @param[in]	I2Sx: I2S peripheral selected, should be: LPC_I2S
    520           * @param[in]	DMAIndex chose what DMA is used, should be:
    521           * 				- I2S_DMA_1 = 0: DMA1
    522           * 				- I2S_DMA_2 = 1: DMA2
    523           * @param[in]	TRMode is transmit/receive mode, should be:
    524           * 				- I2S_TX_MODE = 0: transmit mode
    525           * 				- I2S_RX_MODE = 1: receive mode
    526           * @param[in]	NewState is new state of DMA operation, should be:
    527           * 				- ENABLE
    528           * 				- DISABLE
    529           * @return 		none
    530           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    531          void I2S_DMACmd(LPC_I2S_TypeDef *I2Sx, uint8_t DMAIndex, uint8_t TRMode,
    532          		FunctionalState NewState)
    533          {
   \                     I2S_DMACmd: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    534          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   0000000A   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD004             BEQ.N    ??I2S_DMACmd_0
   \   00000010   0xF240 0x2116      MOVW     R1,#+534
   \   00000014   0x....             LDR.N    R0,??DataTable19_1
   \   00000016   0x.... 0x....      BL       check_failed
    535          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??I2S_DMACmd_0: (+1)
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD007             BEQ.N    ??I2S_DMACmd_1
   \   00000020   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000022   0x2F01             CMP      R7,#+1
   \   00000024   0xD004             BEQ.N    ??I2S_DMACmd_1
   \   00000026   0xF240 0x2117      MOVW     R1,#+535
   \   0000002A   0x....             LDR.N    R0,??DataTable19_1
   \   0000002C   0x.... 0x....      BL       check_failed
    536          	CHECK_PARAM(PARAM_I2S_DMA(DMAIndex));
   \                     ??I2S_DMACmd_1: (+1)
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xD007             BEQ.N    ??I2S_DMACmd_2
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D01             CMP      R5,#+1
   \   0000003A   0xD004             BEQ.N    ??I2S_DMACmd_2
   \   0000003C   0xF44F 0x7106      MOV      R1,#+536
   \   00000040   0x....             LDR.N    R0,??DataTable19_1
   \   00000042   0x.... 0x....      BL       check_failed
    537          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_DMACmd_2: (+1)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD007             BEQ.N    ??I2S_DMACmd_3
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0x2E01             CMP      R6,#+1
   \   00000050   0xD004             BEQ.N    ??I2S_DMACmd_3
   \   00000052   0xF240 0x2119      MOVW     R1,#+537
   \   00000056   0x....             LDR.N    R0,??DataTable19_1
   \   00000058   0x.... 0x....      BL       check_failed
    538          
    539          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_DMACmd_3: (+1)
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E01             CMP      R6,#+1
   \   00000060   0xD11C             BNE.N    ??I2S_DMACmd_4
    540          		if (DMAIndex == I2S_DMA_1) {
   \   00000062   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000064   0x2D00             CMP      R5,#+0
   \   00000066   0xD10C             BNE.N    ??I2S_DMACmd_5
    541          			if (NewState == ENABLE)
   \   00000068   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   0x2F01             CMP      R7,#+1
   \   0000006C   0xD104             BNE.N    ??I2S_DMACmd_6
    542          				I2Sx->I2SDMA1 |= 0x01;
   \   0000006E   0x6960             LDR      R0,[R4, #+20]
   \   00000070   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000074   0x6160             STR      R0,[R4, #+20]
   \   00000076   0xE02D             B.N      ??I2S_DMACmd_7
    543          			else
    544          				I2Sx->I2SDMA1 &= ~0x01;
   \                     ??I2S_DMACmd_6: (+1)
   \   00000078   0x6960             LDR      R0,[R4, #+20]
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0x0040             LSLS     R0,R0,#+1
   \   0000007E   0x6160             STR      R0,[R4, #+20]
   \   00000080   0xE028             B.N      ??I2S_DMACmd_7
    545          		} else {
    546          			if (NewState == ENABLE)
   \                     ??I2S_DMACmd_5: (+1)
   \   00000082   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000084   0x2F01             CMP      R7,#+1
   \   00000086   0xD104             BNE.N    ??I2S_DMACmd_8
    547          				I2Sx->I2SDMA2 |= 0x01;
   \   00000088   0x69A0             LDR      R0,[R4, #+24]
   \   0000008A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000008E   0x61A0             STR      R0,[R4, #+24]
   \   00000090   0xE020             B.N      ??I2S_DMACmd_7
    548          			else
    549          				I2Sx->I2SDMA2 &= ~0x01;
   \                     ??I2S_DMACmd_8: (+1)
   \   00000092   0x69A0             LDR      R0,[R4, #+24]
   \   00000094   0x0840             LSRS     R0,R0,#+1
   \   00000096   0x0040             LSLS     R0,R0,#+1
   \   00000098   0x61A0             STR      R0,[R4, #+24]
   \   0000009A   0xE01B             B.N      ??I2S_DMACmd_7
    550          		}
    551          	} else {
    552          		if (DMAIndex == I2S_DMA_1) {
   \                     ??I2S_DMACmd_4: (+1)
   \   0000009C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009E   0x2D00             CMP      R5,#+0
   \   000000A0   0xD10C             BNE.N    ??I2S_DMACmd_9
    553          			if (NewState == ENABLE)
   \   000000A2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000A4   0x2F01             CMP      R7,#+1
   \   000000A6   0xD104             BNE.N    ??I2S_DMACmd_10
    554          				I2Sx->I2SDMA1 |= 0x02;
   \   000000A8   0x6960             LDR      R0,[R4, #+20]
   \   000000AA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000AE   0x6160             STR      R0,[R4, #+20]
   \   000000B0   0xE010             B.N      ??I2S_DMACmd_7
    555          			else
    556          				I2Sx->I2SDMA1 &= ~0x02;
   \                     ??I2S_DMACmd_10: (+1)
   \   000000B2   0x6960             LDR      R0,[R4, #+20]
   \   000000B4   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000B8   0x6160             STR      R0,[R4, #+20]
   \   000000BA   0xE00B             B.N      ??I2S_DMACmd_7
    557          		} else {
    558          			if (NewState == ENABLE)
   \                     ??I2S_DMACmd_9: (+1)
   \   000000BC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BE   0x2F01             CMP      R7,#+1
   \   000000C0   0xD104             BNE.N    ??I2S_DMACmd_11
    559          				I2Sx->I2SDMA2 |= 0x02;
   \   000000C2   0x69A0             LDR      R0,[R4, #+24]
   \   000000C4   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000C8   0x61A0             STR      R0,[R4, #+24]
   \   000000CA   0xE003             B.N      ??I2S_DMACmd_7
    560          			else
    561          				I2Sx->I2SDMA2 &= ~0x02;
   \                     ??I2S_DMACmd_11: (+1)
   \   000000CC   0x69A0             LDR      R0,[R4, #+24]
   \   000000CE   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000D2   0x61A0             STR      R0,[R4, #+24]
    562          		}
    563          	}
    564          }
   \                     ??I2S_DMACmd_7: (+1)
   \   000000D4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    565          
    566          /********************************************************************//**
    567           * @brief		Configure IRQ for I2S
    568           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    569           * @param[in]	TRMode is transmit/receive mode, should be:
    570           * 				- I2S_TX_MODE = 0: transmit mode
    571           * 				- I2S_RX_MODE = 1: receive mode
    572           * @param[in]	level is the FIFO level that triggers IRQ request
    573           * @return 		none
    574           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    575          void I2S_IRQConfig(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, uint8_t level) {
   \                     I2S_IRQConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    576          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_IRQConfig_0
   \   0000000E   0xF44F 0x7110      MOV      R1,#+576
   \   00000012   0x....             LDR.N    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    577          	CHECK_PARAM(PARAM_I2S_TRX(TRMode));
   \                     ??I2S_IRQConfig_0: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_IRQConfig_1
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_IRQConfig_1
   \   00000024   0xF240 0x2141      MOVW     R1,#+577
   \   00000028   0x....             LDR.N    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    578          	CHECK_PARAM(PARAM_I2S_IRQ_LEVEL(level));
   \                     ??I2S_IRQConfig_1: (+1)
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E20             CMP      R6,#+32
   \   00000032   0xDB04             BLT.N    ??I2S_IRQConfig_2
   \   00000034   0xF240 0x2142      MOVW     R1,#+578
   \   00000038   0x....             LDR.N    R0,??DataTable19_1
   \   0000003A   0x.... 0x....      BL       check_failed
    579          
    580          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_IRQConfig_2: (+1)
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D01             CMP      R5,#+1
   \   00000042   0xD105             BNE.N    ??I2S_IRQConfig_3
    581          		I2Sx->I2SIRQ |= (level << 8);
   \   00000044   0x69E0             LDR      R0,[R4, #+28]
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0xEA50 0x2006      ORRS     R0,R0,R6, LSL #+8
   \   0000004C   0x61E0             STR      R0,[R4, #+28]
   \   0000004E   0xE004             B.N      ??I2S_IRQConfig_4
    582          	} else {
    583          		I2Sx->I2SIRQ |= (level << 16);
   \                     ??I2S_IRQConfig_3: (+1)
   \   00000050   0x69E0             LDR      R0,[R4, #+28]
   \   00000052   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   0xEA50 0x4006      ORRS     R0,R0,R6, LSL #+16
   \   00000058   0x61E0             STR      R0,[R4, #+28]
    584          	}
    585          }
   \                     ??I2S_IRQConfig_4: (+1)
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    586          
    587          /********************************************************************//**
    588           * @brief		Enable/Disable IRQ for I2S
    589           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    590           * @param[in]	TRMode is transmit/receive mode, should be:
    591           * 				- I2S_TX_MODE = 0: transmit mode
    592           * 				- I2S_RX_MODE = 1: receive mode
    593           * @param[in]	NewState is new state of DMA operation, should be:
    594           * 				- ENABLE
    595           * 				- DISABLE
    596           * @return 		none
    597           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    598          void I2S_IRQCmd(LPC_I2S_TypeDef *I2Sx, uint8_t TRMode, FunctionalState NewState) {
   \                     I2S_IRQCmd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    599          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000008   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD004             BEQ.N    ??I2S_IRQCmd_0
   \   0000000E   0xF240 0x2157      MOVW     R1,#+599
   \   00000012   0x....             LDR.N    R0,??DataTable19_1
   \   00000014   0x.... 0x....      BL       check_failed
    600          	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
   \                     ??I2S_IRQCmd_0: (+1)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD007             BEQ.N    ??I2S_IRQCmd_1
   \   0000001E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   0x2E01             CMP      R6,#+1
   \   00000022   0xD004             BEQ.N    ??I2S_IRQCmd_1
   \   00000024   0xF44F 0x7116      MOV      R1,#+600
   \   00000028   0x....             LDR.N    R0,??DataTable19_1
   \   0000002A   0x.... 0x....      BL       check_failed
    601          
    602          	if (TRMode == I2S_RX_MODE) {
   \                     ??I2S_IRQCmd_1: (+1)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xD10C             BNE.N    ??I2S_IRQCmd_2
    603          		if (NewState == ENABLE)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E01             CMP      R6,#+1
   \   00000038   0xD104             BNE.N    ??I2S_IRQCmd_3
    604          			I2Sx->I2SIRQ |= 0x01;
   \   0000003A   0x69E0             LDR      R0,[R4, #+28]
   \   0000003C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000040   0x61E0             STR      R0,[R4, #+28]
   \   00000042   0xE010             B.N      ??I2S_IRQCmd_4
    605          		else
    606          			I2Sx->I2SIRQ &= ~0x01;
   \                     ??I2S_IRQCmd_3: (+1)
   \   00000044   0x69E0             LDR      R0,[R4, #+28]
   \   00000046   0x0840             LSRS     R0,R0,#+1
   \   00000048   0x0040             LSLS     R0,R0,#+1
   \   0000004A   0x61E0             STR      R0,[R4, #+28]
   \   0000004C   0xE00B             B.N      ??I2S_IRQCmd_4
    607          		//Enable DMA
    608          
    609          	} else {
    610          		if (NewState == ENABLE)
   \                     ??I2S_IRQCmd_2: (+1)
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E01             CMP      R6,#+1
   \   00000052   0xD104             BNE.N    ??I2S_IRQCmd_5
    611          			I2Sx->I2SIRQ |= 0x02;
   \   00000054   0x69E0             LDR      R0,[R4, #+28]
   \   00000056   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000005A   0x61E0             STR      R0,[R4, #+28]
   \   0000005C   0xE003             B.N      ??I2S_IRQCmd_4
    612          		else
    613          			I2Sx->I2SIRQ &= ~0x02;
   \                     ??I2S_IRQCmd_5: (+1)
   \   0000005E   0x69E0             LDR      R0,[R4, #+28]
   \   00000060   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000064   0x61E0             STR      R0,[R4, #+28]
    614          	}
    615          }
   \                     ??I2S_IRQCmd_4: (+1)
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
    616          
    617          /********************************************************************//**
    618           * @brief		Get I2S interrupt status
    619           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    620           * @param[in]	TRMode is transmit/receive mode, should be:
    621           * 				- I2S_TX_MODE = 0: transmit mode
    622           * 				- I2S_RX_MODE = 1: receive mode
    623           * @return 		FunctionState	should be:
    624           * 				- ENABLE: interrupt is enable
    625           * 				- DISABLE: interrupt is disable
    626           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    627          FunctionalState I2S_GetIRQStatus(LPC_I2S_TypeDef *I2Sx,uint8_t TRMode)
    628          {
   \                     I2S_GetIRQStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    629          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_GetIRQStatus_0
   \   0000000C   0xF240 0x2175      MOVW     R1,#+629
   \   00000010   0x....             LDR.N    R0,??DataTable19_1
   \   00000012   0x.... 0x....      BL       check_failed
    630          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_GetIRQStatus_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD104             BNE.N    ??I2S_GetIRQStatus_1
    631          		return ((FunctionalState)((I2Sx->I2SIRQ >> 1)&0x01));
   \   0000001C   0x69E0             LDR      R0,[R4, #+28]
   \   0000001E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xE002             B.N      ??I2S_GetIRQStatus_2
    632          	else
    633          		return ((FunctionalState)((I2Sx->I2SIRQ)&0x01));
   \                     ??I2S_GetIRQStatus_1: (+1)
   \   00000026   0x69E0             LDR      R0,[R4, #+28]
   \   00000028   0xF010 0x0001      ANDS     R0,R0,#0x1
   \                     ??I2S_GetIRQStatus_2: (+1)
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    634          }
    635          
    636          /********************************************************************//**
    637           * @brief		Get I2S interrupt depth
    638           * @param[in]	I2Sx I2S peripheral selected, should be: LPC_I2S
    639           * @param[in]	TRMode is transmit/receive mode, should be:
    640           * 				- I2S_TX_MODE = 0: transmit mode
    641           * 				- I2S_RX_MODE = 1: receive mode
    642           * @return 		depth of FIFO level on which to create an irq request
    643           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    644          uint8_t I2S_GetIRQDepth(LPC_I2S_TypeDef *I2Sx,uint8_t TRMode)
    645          {
   \                     I2S_GetIRQDepth: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    646          	CHECK_PARAM(PARAM_I2Sx(I2Sx));
   \   00000006   0x....             LDR.N    R0,??DataTable19  ;; 0x400a8000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD004             BEQ.N    ??I2S_GetIRQDepth_0
   \   0000000C   0xF240 0x2186      MOVW     R1,#+646
   \   00000010   0x....             LDR.N    R0,??DataTable19_1
   \   00000012   0x.... 0x....      BL       check_failed
    647          	if(TRMode == I2S_TX_MODE)
   \                     ??I2S_GetIRQDepth_0: (+1)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD103             BNE.N    ??I2S_GetIRQDepth_1
    648          		return (((I2Sx->I2SIRQ)>>16)&0xFF);
   \   0000001C   0x69E0             LDR      R0,[R4, #+28]
   \   0000001E   0x0C00             LSRS     R0,R0,#+16
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE002             B.N      ??I2S_GetIRQDepth_2
    649          	else
    650          		return (((I2Sx->I2SIRQ)>>8)&0xFF);
   \                     ??I2S_GetIRQDepth_1: (+1)
   \   00000024   0x69E0             LDR      R0,[R4, #+28]
   \   00000026   0x0A00             LSRS     R0,R0,#+8
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??I2S_GetIRQDepth_2: (+1)
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    651          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x400A8000         DC32     0x400a8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x400A8004         DC32     0x400a8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x00017701         DC32     0x17701

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x400A8014         DC32     0x400a8014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x400A8018         DC32     0x400a8018

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 69H, 61H, 72H, 5CH, 4EH
   \              0x5C 0x69    
   \              0x61 0x72    
   \              0x5C 0x4E    
   \   00000008   0x43 0x31          DC8 43H, 31H, 33H, 36H, 42H, 2DH, 33H, 31H
   \              0x33 0x36    
   \              0x42 0x2D    
   \              0x33 0x31    
   \   00000010   0x30 0xCD          DC8 30H, 0CDH, 0B3H, 0BCH, 0C6H, 0C4H, 0A3H, 0BFH
   \              0xB3 0xBC    
   \              0xC6 0xC4    
   \              0xA3 0xBF    
   \   00000018   0xE9 0x5C          DC8 0E9H, 5CH, 53H, 6FH, 66H, 74H, 77H, 61H
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \   00000020   0x72 0x65          DC8 72H, 65H, 5CH, 43H, 53H, 42H, 5CH, 73H
   \              0x5C 0x43    
   \              0x53 0x42    
   \              0x5C 0x73    
   \   00000028   0x6F 0x75          DC8 6FH, 75H, 72H, 63H, 65H, 5CH, 6CH, 70H
   \              0x72 0x63    
   \              0x65 0x5C    
   \              0x6C 0x70    
   \   00000030   0x63 0x31          DC8 63H, 31H, 37H, 78H, 78H, 5FH, 69H, 32H
   \              0x37 0x78    
   \              0x78 0x5F    
   \              0x69 0x32    
   \   00000038   0x73 0x2E          DC8 73H, 2EH, 63H, 0
   \              0x63 0x00    
    652          /**
    653           * @}
    654           */
    655          
    656          #endif /* _I2S */
    657          
    658          /**
    659           * @}
    660           */
    661          
    662          /* --------------------------------- End Of File ------------------------------ */
    663          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   I2S_Config
        24   -> check_failed
      24   I2S_DMACmd
        24   -> check_failed
      16   I2S_DMAConfig
        16   -> check_failed
       8   I2S_DeInit
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      64   I2S_FreqConfig
        64   -> CLKPWR_GetPCLK
        64   -> check_failed
        64   -> i2s_GetChannel
        64   -> i2s_GetWordWidth
        64 __aeabi_uldivmod
      16   I2S_GetIRQDepth
        16   -> check_failed
      16   I2S_GetIRQStatus
        16   -> check_failed
      16   I2S_GetLevel
        16   -> check_failed
      16   I2S_IRQCmd
        16   -> check_failed
      16   I2S_IRQConfig
        16   -> check_failed
       8   I2S_Init
         8   -> CLKPWR_ConfigPPWR
         8   -> check_failed
      16   I2S_ModeConfig
        16   -> check_failed
      16   I2S_Mute
        16   -> check_failed
      16   I2S_Pause
        16   -> check_failed
       8   I2S_Receive
         8   -> check_failed
      16   I2S_Send
        16   -> check_failed
      16   I2S_SetBitRate
        16   -> check_failed
       0   I2S_Start
      16   I2S_Stop
        16   -> check_failed
      16   i2s_GetChannel
        16   -> check_failed
      16   i2s_GetWordWidth
        16   -> check_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
      60  ?_0
     236  I2S_Config
     214  I2S_DMACmd
     142  I2S_DMAConfig
      34  I2S_DeInit
     578  I2S_FreqConfig
      44  I2S_GetIRQDepth
      46  I2S_GetIRQStatus
      68  I2S_GetLevel
     104  I2S_IRQCmd
      92  I2S_IRQConfig
      48  I2S_Init
     228  I2S_ModeConfig
      76  I2S_Mute
      76  I2S_Pause
      26  I2S_Receive
      28  I2S_Send
      88  I2S_SetBitRate
      42  I2S_Start
     100  I2S_Stop
      84  i2s_GetChannel
      94  i2s_GetWordWidth

 
    60 bytes in section .rodata
 2 472 bytes in section .text
 
 2 472 bytes of CODE  memory
    60 bytes of CONST memory

Errors: none
Warnings: none
