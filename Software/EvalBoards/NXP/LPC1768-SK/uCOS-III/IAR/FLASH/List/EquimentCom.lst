###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Sep/2017  15:08:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\EquipmentOperations\EquimentCom.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\EquipmentOperations\EquimentCom.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\EquimentCom.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\EquimentCom.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\EquipmentOperations\EquimentCom.c
      1          #include <includes.h>
      2          #include 	"OperateCard.h"
      3          #include  "csnr_package_deal.h"
      4          
      5          

   \                                 In section .bss, align 1
      6          uint8	l_led1com2flg = 0;
   \                     l_led1com2flg:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
      7          uint8	l_led2com3flg = 0;
   \                     l_led2com3flg:
   \   00000000                      DS8 1
      8          

   \                                 In section .text, align 2, keep-with-next
      9          uint8	GetLed1Com2Flg(void)
     10          {
     11          	return	l_led1com2flg;
   \                     GetLed1Com2Flg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     12          }
     13          

   \                                 In section .text, align 2, keep-with-next
     14          uint8	GetLed2Com3Flg(void)
     15          {
     16          	return	l_led2com3flg;
   \                     GetLed2Com3Flg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     17          }
     18          
     19          

   \                                 In section .text, align 2, keep-with-next
     20          uint8	GetFramRecEndFlgCom2(void)
     21          {
   \                     GetFramRecEndFlgCom2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     22          	return GetCOM2EndFlg();
   \   00000002   0x.... 0x....      BL       GetCOM2EndFlg
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
     23          }
     24          

   \                                 In section .text, align 2, keep-with-next
     25          uint8	GetFramRecEndFlgCom3(void)
     26          {
   \                     GetFramRecEndFlgCom3: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     27          	return GetCOM3EndFlg();
   \   00000002   0x.... 0x....      BL       GetCOM3EndFlg
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void	ClearFramRecEndFlgCom3(void)
     31          {
   \                     ClearFramRecEndFlgCom3: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32          	ClearCOM3EndFlg();
   \   00000002   0x.... 0x....      BL       ClearCOM3EndFlg
     33          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     34          void	ClearFramRecEndFlgCom2(void)
     35          {
   \                     ClearFramRecEndFlgCom2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     36          	ClearCOM2EndFlg();
   \   00000002   0x.... 0x....      BL       ClearCOM2EndFlg
     37          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     38          
     39          //清接收完成标志  南瑞

   \                                 In section .text, align 2, keep-with-next
     40          void	ClearFramRecEndFlg(void)
     41          {
   \                     ClearFramRecEndFlg: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     42          	ClearCOM1EndFlg();
   \   00000002   0x.... 0x....      BL       ClearCOM1EndFlg
     43          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     44          
     45          //uint16	ReadRs485Data(uint8 *Buf)
     46          //{
     47          //	return	ReadCOM1(Buf,256);
     48          //}
     49          

   \                                 In section .text, align 2, keep-with-next
     50          uint16	ReadRs485DataCom2(uint8 *Buf)
     51          {
   \                     ReadRs485DataCom2: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     52          	return	ReadCOM2(Buf,256);
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ReadCOM2
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          uint16	ReadRs485DataCom3(uint8 *Buf)
     56          {
   \                     ReadRs485DataCom3: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     57          	return	ReadCOM3(Buf,256);
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ReadCOM3
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     58          }
     59          
     60          

   \                                 In section .bss, align 1
     61          uint8	l_befaddr = 0;
   \                     l_befaddr:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     62          unsigned char GetRecaddr()
     63          {
     64          	return	l_befaddr;
   \                     GetRecaddr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     65          }

   \                                 In section .bss, align 1
     66          static	unsigned char l_recFlg = 0;
   \                     l_recFlg:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     67          unsigned char GetRecFlg(void)
     68          {
     69          	return l_recFlg;
   \                     GetRecFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     70          }
     71          

   \                                 In section .bss, align 4
     72          unsigned int  l_eqiupmentcode = 0;
   \                     l_eqiupmentcode:
   \   00000000                      DS8 4
     73          
     74          
     75          

   \                                 In section .bss, align 1
     76          uint8	sentendflg = 0;
   \                     sentendflg:
   \   00000000                      DS8 1
     77          //uint8	l_befaddr = 0;

   \                                 In section .bss, align 1
     78          uint8	l_senddatacomflg = 0;
   \                     l_senddatacomflg:
   \   00000000                      DS8 1
     79          
     80          //uint8	l_readdataoprateflg = 0;

   \                                 In section .bss, align 4
     81          uint32	l_senddatastartnum = 0;
   \                     l_senddatastartnum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          uint32	l_senddataendnum = 0;
   \                     l_senddataendnum:
   \   00000000                      DS8 4
     83          

   \                                 In section .text, align 2, keep-with-next
     84          uint8	GetSendDataComFlg(void)
     85          {
     86          	return	 l_senddatacomflg;
   \                     GetSendDataComFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void	ClearSendDataComFlg(void)
     90          {
     91          	l_senddatacomflg = 0;
   \                     ClearSendDataComFlg: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     92          }
   \   00000008   0x4770             BX       LR               ;; return
     93          

   \                                 In section .bss, align 4
     94          uint32	l_readdatadisplaytime = 0;
   \                     l_readdatadisplaytime:
   \   00000000                      DS8 4
     95          

   \                                 In section .text, align 2, keep-with-next
     96          uint32	GetReadDataDisplayTime(void)
     97          {
     98          	return	l_readdatadisplaytime;
   \                     GetReadDataDisplayTime: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void CarddataOperate(unsigned char *buf,unsigned int Len)		
    102          {
   \                     CarddataOperate: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    103          	unsigned int   datalen = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    104          	unsigned char  resflg = 1;
   \   0000000C   0x2601             MOVS     R6,#+1
    105          		
    106          	if(Len < 4)
   \   0000000E   0x2D04             CMP      R5,#+4
   \   00000010   0xF0C0 0x8174      BCC.W    ??CarddataOperate_0
    107          	{
    108          //		printfcom0("\r\n 数据长度小于4");
    109          		return	;
    110          	}
    111          	
    112          	datalen = 0;
   \                     ??CarddataOperate_1: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0007             MOVS     R7,R0
    113          	memcpy((unsigned char *)&l_eqiupmentcode,&buf[datalen],sizeof(l_eqiupmentcode));
   \   00000018   0xF05F 0x0804      MOVS     R8,#+4
   \   0000001C   0xEB17 0x0904      ADDS     R9,R7,R4
   \   00000020   0x.... 0x....      LDR.W    R10,??DataTable11_6
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0x4649             MOV      R1,R9
   \   00000028   0x4650             MOV      R0,R10
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy
    114          	datalen += sizeof(l_eqiupmentcode);
   \   0000002E   0x1D3F             ADDS     R7,R7,#+4
    115          	
    116          //	printfcom0("接收的数据类型 %x",l_eqiupmentcode);
    117          	resflg = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x0006             MOVS     R6,R0
    118          		
    119          	if(l_eqiupmentcode != 0)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xF000 0x815E      BEQ.W    ??CarddataOperate_2
    120          	{
    121          		switch (l_eqiupmentcode)
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD055             BEQ.N    ??CarddataOperate_3
   \   0000004A   0x2820             CMP      R0,#+32
   \   0000004C   0xD071             BEQ.N    ??CarddataOperate_4
   \   0000004E   0x2840             CMP      R0,#+64
   \   00000050   0xF000 0x809E      BEQ.W    ??CarddataOperate_5
   \   00000054   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000058   0xF000 0x80A1      BEQ.W    ??CarddataOperate_6
   \   0000005C   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000060   0xF000 0x80AD      BEQ.W    ??CarddataOperate_7
   \   00000064   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000068   0xF000 0x80B9      BEQ.W    ??CarddataOperate_8
   \   0000006C   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000070   0xF000 0x80BA      BEQ.W    ??CarddataOperate_9
   \   00000074   0xF5B0 0x5F00      CMP      R0,#+8192
   \   00000078   0xF000 0x80C6      BEQ.W    ??CarddataOperate_10
   \   0000007C   0xF5B0 0x4F80      CMP      R0,#+16384
   \   00000080   0xF000 0x80E0      BEQ.W    ??CarddataOperate_11
   \   00000084   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000088   0xF000 0x80E1      BEQ.W    ??CarddataOperate_12
   \   0000008C   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000090   0xD012             BEQ.N    ??CarddataOperate_13
   \   00000092   0xF5B0 0x3F00      CMP      R0,#+131072
   \   00000096   0xD020             BEQ.N    ??CarddataOperate_14
   \   00000098   0xF5B0 0x2F80      CMP      R0,#+262144
   \   0000009C   0xF000 0x80DC      BEQ.W    ??CarddataOperate_15
   \   000000A0   0xF5B0 0x2F00      CMP      R0,#+524288
   \   000000A4   0xF000 0x80F4      BEQ.W    ??CarddataOperate_16
   \   000000A8   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   000000AC   0xF000 0x8116      BEQ.W    ??CarddataOperate_17
   \   000000B0   0xF5B0 0x1F00      CMP      R0,#+2097152
   \   000000B4   0xD04D             BEQ.N    ??CarddataOperate_18
   \   000000B6   0xE117             B.N      ??CarddataOperate_19
    122          		{
    123          			unsigned int    startnum;
    124          			short           density; 
    125                      uint32          calcpara; 
    126          
    127          			stcTime		sTime;   
    128          			short   hig; 
    129          			char	modelnum;
    130          			unsigned short locotype,loconum; 
    131          			stcSysRunPara	sSysRunPara;
    132          	
    133          			case DATA_CARD_DIS: 
    134          							  ClaerDisplaySetWithoutStore();
   \                     ??CarddataOperate_13: (+1)
   \   000000B8   0x.... 0x....      BL       ClaerDisplaySetWithoutStore
    135          							  ReadCardDisplay(0);
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      BL       ReadCardDisplay
    136          							  printfcom0("\r\n\r\n ReadCardDisplay");
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000000C6   0x.... 0x....      BL       printfcom0
    137          							  resflg = 0;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x0006             MOVS     R6,R0
    138          							  l_readdatadisplaytime = GetSysTime();
   \   000000CE   0x.... 0x....      BL       GetSysTime
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    139          							  //DelayX10ms(200);
    140          							  break; 
   \   000000D8   0xE106             B.N      ??CarddataOperate_19
    141          			case DATA_CARD_FIN: 
    142          							  IndicateWriteCardFinsh();
   \                     ??CarddataOperate_14: (+1)
   \   000000DA   0x.... 0x....      BL       IndicateWriteCardFinsh
    143          							  printfcom0("\r\n IndicateWriteCardFinsh");
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000000E2   0x.... 0x....      BL       printfcom0
    144          							  resflg = 0;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x0006             MOVS     R6,R0
    145          							  l_readdatadisplaytime = GetSysTime();
   \   000000EA   0x.... 0x....      BL       GetSysTime
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   000000F2   0x6008             STR      R0,[R1, #+0]
    146          							  break; 									  			
   \   000000F4   0xE0F8             B.N      ??CarddataOperate_19
    147          			case DATA_CARD:   //卡数据读取
    148          							  //startnum=0,endnum=0xffffffff;
    149          //							  printfcom0("\r\n DATA_CARD 准备发送数据 ");
    150          							  memcpy((unsigned char *)&l_senddatastartnum,&buf[datalen],sizeof(l_senddatastartnum));
   \                     ??CarddataOperate_3: (+1)
   \   000000F6   0xF05F 0x0804      MOVS     R8,#+4
   \   000000FA   0x1938             ADDS     R0,R7,R4
   \   000000FC   0x9000             STR      R0,[SP, #+0]
   \   000000FE   0x.... 0x....      LDR.W    R9,??DataTable11_9
   \   00000102   0x4642             MOV      R2,R8
   \   00000104   0x9900             LDR      R1,[SP, #+0]
   \   00000106   0x4648             MOV      R0,R9
   \   00000108   0x.... 0x....      BL       __aeabi_memcpy
    151          							  datalen += sizeof(startnum);
   \   0000010C   0x1D3F             ADDS     R7,R7,#+4
    152          							  memcpy((unsigned char *)&l_senddataendnum,&buf[datalen],sizeof(l_senddataendnum));  
   \   0000010E   0xF05F 0x0904      MOVS     R9,#+4
   \   00000112   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   00000116   0x.... 0x....      LDR.W    R11,??DataTable11_10
   \   0000011A   0x464A             MOV      R2,R9
   \   0000011C   0x4651             MOV      R1,R10
   \   0000011E   0x4658             MOV      R0,R11
   \   00000120   0x.... 0x....      BL       __aeabi_memcpy
    153          							  
    154          							  l_senddatacomflg = 1;
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   0000012A   0x7008             STRB     R0,[R1, #+0]
    155          							  //l_readdataoprateflg = 1;
    156          							  //EquipmentReadData(startnum,endnum);								//
    157          							  resflg = 0;		
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x0006             MOVS     R6,R0
    158          							  break;    
   \   00000130   0xE0DA             B.N      ??CarddataOperate_19
    159          			case DENSITY_CARD: 
    160          //				              printfcom0("\r\n DENSITY_CARD ");  
    161          							  memcpy((unsigned char *)&density,&buf[datalen],sizeof(density));
   \                     ??CarddataOperate_4: (+1)
   \   00000132   0xF05F 0x0802      MOVS     R8,#+2
   \   00000136   0xEB17 0x0904      ADDS     R9,R7,R4
   \   0000013A   0xF10D 0x0A0C      ADD      R10,SP,#+12
   \   0000013E   0x4642             MOV      R2,R8
   \   00000140   0x4649             MOV      R1,R9
   \   00000142   0x4650             MOV      R0,R10
   \   00000144   0x.... 0x....      BL       __aeabi_memcpy
    162          							  
    163          							  SetDen(density);
   \   00000148   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   0000014C   0x.... 0x....      BL       SetDen
    164          //							  printfcom0("\r\n density %d  数据长度 %d datalen %d  buf %x buf++ %x",density,sizeof(density),datalen,buf[datalen],buf[datalen+1]);  
    165          							  break;   
   \   00000150   0xE0CA             B.N      ??CarddataOperate_19
    166          
    167          			case CALC_PARA: 
    168          //				              printfcom0("\r\n DENSITY_CARD ");  
    169          							  memcpy((unsigned char *)&calcpara,&buf[datalen],sizeof(calcpara));
   \                     ??CarddataOperate_18: (+1)
   \   00000152   0xF05F 0x0804      MOVS     R8,#+4
   \   00000156   0x1938             ADDS     R0,R7,R4
   \   00000158   0x9000             STR      R0,[SP, #+0]
   \   0000015A   0xF10D 0x0918      ADD      R9,SP,#+24
   \   0000015E   0x4642             MOV      R2,R8
   \   00000160   0x9900             LDR      R1,[SP, #+0]
   \   00000162   0x4648             MOV      R0,R9
   \   00000164   0x.... 0x....      BL       __aeabi_memcpy
    170          							  datalen += sizeof(calcpara);
   \   00000168   0x1D3F             ADDS     R7,R7,#+4
    171          							  SetCalcPara(calcpara);
   \   0000016A   0x9806             LDR      R0,[SP, #+24]
   \   0000016C   0x.... 0x....      BL       SetCalcPara
    172                      
    173                      
    174                                        memcpy((unsigned char *)&hig,&buf[datalen],sizeof(hig));
   \   00000170   0xF05F 0x0902      MOVS     R9,#+2
   \   00000174   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   00000178   0xF10D 0x0B06      ADD      R11,SP,#+6
   \   0000017C   0x464A             MOV      R2,R9
   \   0000017E   0x4651             MOV      R1,R10
   \   00000180   0x4658             MOV      R0,R11
   \   00000182   0x.... 0x....      BL       __aeabi_memcpy
    175          							  SetHight(hig);
   \   00000186   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   0000018A   0x.... 0x....      BL       SetHight
    176                      
    177          //							  printfcom0("\r\n density %d  数据长度 %d datalen %d  buf %x buf++ %x",density,sizeof(density),datalen,buf[datalen],buf[datalen+1]);  
    178          							  break;                
   \   0000018E   0xE0AB             B.N      ??CarddataOperate_19
    179          			case MODEL_CARD:  
    180          							  //printfcom0("\r\n MODEL_CARD "); 
    181          							  SetModel(&buf[datalen],Len - datalen);	   
   \                     ??CarddataOperate_5: (+1)
   \   00000190   0x1BE9             SUBS     R1,R5,R7
   \   00000192   0x1938             ADDS     R0,R7,R4
   \   00000194   0x.... 0x....      BL       SetModel
    182          								resflg = 1;
   \   00000198   0x2001             MOVS     R0,#+1
   \   0000019A   0x0006             MOVS     R6,R0
    183          							  break;   
   \   0000019C   0xE0A4             B.N      ??CarddataOperate_19
    184          			case TIME_CARD:   
    185          //							  printfcom0("\r\n TIME_CARD ");
    186          							  
    187          							  memcpy((unsigned char *)&sTime,&buf[datalen],sizeof(sTime));
   \                     ??CarddataOperate_6: (+1)
   \   0000019E   0xF05F 0x0808      MOVS     R8,#+8
   \   000001A2   0xEB17 0x0904      ADDS     R9,R7,R4
   \   000001A6   0xF10D 0x0A1C      ADD      R10,SP,#+28
   \   000001AA   0x4642             MOV      R2,R8
   \   000001AC   0x4649             MOV      R1,R9
   \   000001AE   0x4650             MOV      R0,R10
   \   000001B0   0x.... 0x....      BL       __aeabi_memcpy
    188          							  
    189          //							  printfcom0("\r\n 时间：%d-%d-%d %d-%d-%d",sTime.Year,sTime.Month,sTime.Date,sTime.Hour,sTime.Min,sTime.Sec);
    190          							  
    191          							  WriteTime(sTime);
   \   000001B4   0xE9DD 0x0107      LDRD     R0,R1,[SP, #+28]
   \   000001B8   0x.... 0x....      BL       WriteTime
    192          							  break; 
   \   000001BC   0xE094             B.N      ??CarddataOperate_19
    193          			case HIGHT_CARD:  
    194          //							  printfcom0("\r\n HIGHT_CARD ");
    195          							  
    196          							  memcpy((unsigned char *)&hig,&buf[datalen],sizeof(hig));
   \                     ??CarddataOperate_7: (+1)
   \   000001BE   0xF05F 0x0802      MOVS     R8,#+2
   \   000001C2   0xEB17 0x0904      ADDS     R9,R7,R4
   \   000001C6   0xF10D 0x0A06      ADD      R10,SP,#+6
   \   000001CA   0x4642             MOV      R2,R8
   \   000001CC   0x4649             MOV      R1,R9
   \   000001CE   0x4650             MOV      R0,R10
   \   000001D0   0x.... 0x....      BL       __aeabi_memcpy
    197          
    198          //							  printfcom0("\r\n 高度：%d",hig);
    199          							  
    200          							  SetHight(hig);
   \   000001D4   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   000001D8   0x.... 0x....      BL       SetHight
    201          							  break; 
   \   000001DC   0xE084             B.N      ??CarddataOperate_19
    202          			case COPY_CARD:  	
    203          							  printfcom0("\r\n COPY_CARD ");
   \                     ??CarddataOperate_8: (+1)
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable11_11
   \   000001E2   0x.... 0x....      BL       printfcom0
    204          							  							  
    205          						      break; 
   \   000001E6   0xE07F             B.N      ??CarddataOperate_19
    206          			case MODEL_SELECT_CARD:
    207          //							  printfcom0("\r\n MODEL_SELECT_CARD "); 
    208          							  
    209          							  memcpy((unsigned char *)&modelnum,&buf[datalen],sizeof(modelnum));
   \                     ??CarddataOperate_9: (+1)
   \   000001E8   0xF05F 0x0801      MOVS     R8,#+1
   \   000001EC   0xEB17 0x0904      ADDS     R9,R7,R4
   \   000001F0   0xF10D 0x0A04      ADD      R10,SP,#+4
   \   000001F4   0x4642             MOV      R2,R8
   \   000001F6   0x4649             MOV      R1,R9
   \   000001F8   0x4650             MOV      R0,R10
   \   000001FA   0x.... 0x....      BL       __aeabi_memcpy
    210          
    211          //							  printfcom0("\r\n 选模：%d",modelnum);
    212          
    213          							  SetSel(modelnum);
   \   000001FE   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000202   0x.... 0x....      BL       SetSel
    214          							  break; 
   \   00000206   0xE06F             B.N      ??CarddataOperate_19
    215          			case FIX_CARD:  
    216          //							  printfcom0("\r\n FIX_CARD ");
    217          
    218          							  memcpy((unsigned char *)&locotype,&buf[datalen],sizeof(locotype));
   \                     ??CarddataOperate_10: (+1)
   \   00000208   0xF05F 0x0802      MOVS     R8,#+2
   \   0000020C   0x1938             ADDS     R0,R7,R4
   \   0000020E   0x9000             STR      R0,[SP, #+0]
   \   00000210   0xF10D 0x090A      ADD      R9,SP,#+10
   \   00000214   0x4642             MOV      R2,R8
   \   00000216   0x9900             LDR      R1,[SP, #+0]
   \   00000218   0x4648             MOV      R0,R9
   \   0000021A   0x.... 0x....      BL       __aeabi_memcpy
    219          							  datalen += sizeof(locotype);
   \   0000021E   0x1CBF             ADDS     R7,R7,#+2
    220          							 
    221          							  memcpy((unsigned char *)&loconum,&buf[datalen],sizeof(loconum));
   \   00000220   0xF05F 0x0902      MOVS     R9,#+2
   \   00000224   0xEB17 0x0A04      ADDS     R10,R7,R4
   \   00000228   0xF10D 0x0B08      ADD      R11,SP,#+8
   \   0000022C   0x464A             MOV      R2,R9
   \   0000022E   0x4651             MOV      R1,R10
   \   00000230   0x4658             MOV      R0,R11
   \   00000232   0x.... 0x....      BL       __aeabi_memcpy
    222          							  
    223          //							  printfcom0("\r\n 机车类型：%d，机车编号：%d",locotype,loconum);
    224          							  
    225          							  SetFix(locotype,loconum);
   \   00000236   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   0000023A   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   0000023E   0x.... 0x....      BL       SetFix
    226          				     		  break; 
   \   00000242   0xE051             B.N      ??CarddataOperate_19
    227          			case COPY_FRAM_CARD:  
    228          							  printfcom0("\r\n COPY_FRAM_CARD "); 
   \                     ??CarddataOperate_11: (+1)
   \   00000244   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   00000248   0x.... 0x....      BL       printfcom0
    229          							  break; 
   \   0000024C   0xE04C             B.N      ??CarddataOperate_19
    230          			case EXPAND_CARD:  	
    231          							  printfcom0("\r\n EXPAND_CARD "); 
   \                     ??CarddataOperate_12: (+1)
   \   0000024E   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000252   0x.... 0x....      BL       printfcom0
    232          							  break; 
   \   00000256   0xE047             B.N      ??CarddataOperate_19
    233          			case SYS_RUN_PARA:  	
    234          							  //printfcom0("\r\n 接收运行参数 "); 
    235          							  memcpy((unsigned char *)&sSysRunPara,&buf[datalen],sizeof(sSysRunPara));
   \                     ??CarddataOperate_15: (+1)
   \   00000258   0xF05F 0x0806      MOVS     R8,#+6
   \   0000025C   0xEB17 0x0904      ADDS     R9,R7,R4
   \   00000260   0xF10D 0x0A10      ADD      R10,SP,#+16
   \   00000264   0x4642             MOV      R2,R8
   \   00000266   0x4649             MOV      R1,R9
   \   00000268   0x4650             MOV      R0,R10
   \   0000026A   0x.... 0x....      BL       __aeabi_memcpy
    236          							  datalen += sizeof(sSysRunPara);
   \   0000026E   0x1DBF             ADDS     R7,R7,#+6
    237          							  DisplaySet(250,1,"F.%2d T.%2d",sSysRunPara.PrintfFlg,sSysRunPara.StoreTime);
   \   00000270   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000274   0x9000             STR      R0,[SP, #+0]
   \   00000276   0xF89D 0x3011      LDRB     R3,[SP, #+17]
   \   0000027A   0x.... 0x....      LDR.W    R2,??DataTable11_14
   \   0000027E   0x2101             MOVS     R1,#+1
   \   00000280   0x20FA             MOVS     R0,#+250
   \   00000282   0x.... 0x....      BL       DisplaySet
    238          							  StoreSysRunPara(sSysRunPara);
   \   00000286   0xE9DD 0x0104      LDRD     R0,R1,[SP, #+16]
   \   0000028A   0x.... 0x....      BL       StoreSysRunPara
    239          							  break; 
   \   0000028E   0xE02B             B.N      ??CarddataOperate_19
    240          			case CLEAR_ALL:  	
    241          							  printfcom0("\r\n 清零"); 
   \                     ??CarddataOperate_16: (+1)
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000294   0x.... 0x....      BL       printfcom0
    242          							  DisplaySet(250,1,"C_ALL");
   \   00000298   0x.... 0x....      LDR.W    R2,??DataTable11_16
   \   0000029C   0x2101             MOVS     R1,#+1
   \   0000029E   0x20FA             MOVS     R0,#+250
   \   000002A0   0x.... 0x....      BL       DisplaySet
    243          							  g_CurFlshRecNum 	= 0;
   \   000002A4   0x2000             MOVS     R0,#+0
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable11_17
   \   000002AA   0x6008             STR      R0,[R1, #+0]
    244          							  g_LshRedFlshRecNum  = 0;
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      LDR.W    R1,??DataTable11_18
   \   000002B2   0x6008             STR      R0,[R1, #+0]
    245          							  g_LshRedFlshRecNum_gprs  = 0;
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x.... 0x....      LDR.W    R1,??DataTable11_19
   \   000002BA   0x6008             STR      R0,[R1, #+0]
    246          
    247          								StoreCurFlshRecNum(g_CurFlshRecNum);
   \   000002BC   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   000002C0   0x6800             LDR      R0,[R0, #+0]
   \   000002C2   0x.... 0x....      BL       StoreCurFlshRecNum
    248          								StoreLstRedFlshRecNum(g_LshRedFlshRecNum);
   \   000002C6   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   000002CA   0x6800             LDR      R0,[R0, #+0]
   \   000002CC   0x.... 0x....      BL       StoreLstRedFlshRecNum
    249          								StoreLstRedFlshRecNum_gprs(g_LshRedFlshRecNum);
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   000002D4   0x6800             LDR      R0,[R0, #+0]
   \   000002D6   0x.... 0x....      BL       StoreLstRedFlshRecNum_gprs
    250          							  break;
   \   000002DA   0xE005             B.N      ??CarddataOperate_19
    251          
    252          			case RST_SYS: 
    253          								l_eqiupmentcode = 0;
   \                     ??CarddataOperate_17: (+1)
   \   000002DC   0x2000             MOVS     R0,#+0
   \   000002DE   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000002E2   0x6008             STR      R0,[R1, #+0]
    254          								ResetSys();	//重启
   \   000002E4   0x.... 0x....      BL       ResetSys
    255          								//while(1);  
    256          								break;
    257          
    258          			default: ;
    259          //				   printfcom0("\r\n default "); 
    260          		}
    261          		
    262          		l_eqiupmentcode = 0;
   \                     ??CarddataOperate_19: (+1)
   \   000002E8   0x2000             MOVS     R0,#+0
   \   000002EA   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   000002EE   0x6008             STR      R0,[R1, #+0]
    263          
    264          		if(resflg ==1)
   \   000002F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002F2   0x2E01             CMP      R6,#+1
   \   000002F4   0xD102             BNE.N    ??CarddataOperate_2
    265          		{
    266          			ReCalPara(1);
   \   000002F6   0x2001             MOVS     R0,#+1
   \   000002F8   0x.... 0x....      BL       ReCalPara
    267          		}
    268          	}
    269          }
   \                     ??CarddataOperate_2: (+1)
   \                     ??CarddataOperate_0: (+1)
   \   000002FC   0xB009             ADD      SP,SP,#+36
   \   000002FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    270          
    271          typedef	struct	
    272          {
    273          	uint8	commnum;
    274          	uint8	addr;
    275          }stcequipmentcomm;
    276          

   \                                 In section .bss, align 4
    277          stcequipmentcomm	l_sequipmentcomm;
   \                     l_sequipmentcomm:
   \   00000000                      DS8 4
    278          

   \                                 In section .text, align 2, keep-with-next
    279          uint8	GetGprsCommNum(void)
    280          {
    281          	if(l_sequipmentcomm.addr == 0xca)
   \                     GetGprsCommNum: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   00000004   0x7840             LDRB     R0,[R0, #+1]
   \   00000006   0x28CA             CMP      R0,#+202
   \   00000008   0xD103             BNE.N    ??GetGprsCommNum_0
    282          		return	l_sequipmentcomm.commnum;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xE000             B.N      ??GetGprsCommNum_1
    283          	return 0;
   \                     ??GetGprsCommNum_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??GetGprsCommNum_1: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    284          }
    285          
    286          

   \                                 In section .text, align 2, keep-with-next
    287          void  CSNR_RecDeal(void)     									//主机
    288          {
   \                     CSNR_RecDeal: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    289          	static	unsigned char		RecBuf[256] = {0};						//接收缓冲区
    290          	static	unsigned char		DataBuf[256] = {0};						//
    291          
    292          	unsigned char		RecLen;		
    293          	unsigned char		DataLen = 16;
   \   00000004   0x2510             MOVS     R5,#+16
    294          	uint8				comflg = 0;	
   \   00000006   0x2600             MOVS     R6,#+0
    295          	static	uint32		com2time = 0,com3time = 0;	
    296          	static	uint8		com2errtimes =0,com3errtimes=0;
    297          	static	uint32		errtime1 = 0,errtime2 = 0;
    298          	static  stcCsnrProtocolPara 	recdsprotocolpara;	
    299          	uint8		i;
    300          	uint8		commnum = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    301          	uint8		recflg;
    302          					
    303          	if( 
    304          			(GetFramRecEndFlgCom2() == 1	|| GetFramRecEndFlgCom3() == 1 )
    305          //		 && sentendflg == 1         //debuggprs
    306          		 )				//有新的帧尾，进行数据处理
   \   0000000A   0x.... 0x....      BL       GetFramRecEndFlgCom2
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD004             BEQ.N    ??CSNR_RecDeal_0
   \   00000012   0x.... 0x....      BL       GetFramRecEndFlgCom3
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xF040 0x80AC      BNE.W    ??CSNR_RecDeal_1
    307          	{
    308          		
    309          		sentendflg = 0; 
   \                     ??CSNR_RecDeal_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable11_21
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    310          		RecLen  = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x0004             MOVS     R4,R0
    311          		if(GetFramRecEndFlgCom2() == 1)
   \   00000028   0x.... 0x....      BL       GetFramRecEndFlgCom2
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD111             BNE.N    ??CSNR_RecDeal_2
    312          		{
    313          //			l_led1com2flg = COM_LED_REC;
    314          			com2errtimes = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable11_22
   \   00000036   0x7008             STRB     R0,[R1, #+0]
    315          			comflg = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0006             MOVS     R6,R0
    316          			com2time = GetSysTime();
   \   0000003C   0x.... 0x....      BL       GetSysTime
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable11_23
   \   00000044   0x6008             STR      R0,[R1, #+0]
    317          			RecLen 	= ReadRs485DataCom2(RecBuf);
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable11_24
   \   0000004A   0x.... 0x....      BL       ReadRs485DataCom2
   \   0000004E   0x0004             MOVS     R4,R0
    318          			commnum = 2;
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x0007             MOVS     R7,R0
    319          		}
    320          		if(GetFramRecEndFlgCom3() == 1)		
   \                     ??CSNR_RecDeal_2: (+1)
   \   00000054   0x.... 0x....      BL       GetFramRecEndFlgCom3
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD111             BNE.N    ??CSNR_RecDeal_3
    321          		{
    322          //			l_led2com3flg = COM_LED_REC;
    323          			com3errtimes = 0; 
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable11_25
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    324          			comflg = 1;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x0006             MOVS     R6,R0
    325          			com3time = GetSysTime();
   \   00000068   0x.... 0x....      BL       GetSysTime
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable11_26
   \   00000070   0x6008             STR      R0,[R1, #+0]
    326          			RecLen 	= ReadRs485DataCom3(RecBuf);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable11_24
   \   00000076   0x.... 0x....      BL       ReadRs485DataCom3
   \   0000007A   0x0004             MOVS     R4,R0
    327          			commnum = 3;
   \   0000007C   0x2003             MOVS     R0,#+3
   \   0000007E   0x0007             MOVS     R7,R0
    328          		}
    329          																	//发送指令后，等待接收
    330          																			
    331          		ClearFramRecEndFlgCom3();									//清标志，可重新取数
   \                     ??CSNR_RecDeal_3: (+1)
   \   00000080   0x.... 0x....      BL       ClearFramRecEndFlgCom3
    332          		ClearFramRecEndFlgCom2();		
   \   00000084   0x.... 0x....      BL       ClearFramRecEndFlgCom2
    333          
    334          		if(RecLen < 10)
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2C0A             CMP      R4,#+10
   \   0000008C   0xDA04             BGE.N    ??CSNR_RecDeal_4
    335          		{
    336          			printfcom2("\r\n RecLen <10 \r\n");
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable11_27
   \   00000092   0x.... 0x....      BL       printfcom2
    337          			return;
   \   00000096   0xE0A9             B.N      ??CSNR_RecDeal_5
    338          		}
    339          
    340          //		l_befaddr = CSNR_GetData(RecBuf,RecLen,DataBuf,(unsigned char*)&DataLen); 
    341          
    342          //	
    343          		recdsprotocolpara.databuf = DataBuf;
   \                     ??CSNR_RecDeal_4: (+1)
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable11_28
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable11_29
   \   000000A0   0x6048             STR      R0,[R1, #+4]
    344          		recflg = DataUnpack_CSNR((stcCsnrProtocolPara *)&recdsprotocolpara,RecBuf,RecLen);
   \   000000A2   0x0022             MOVS     R2,R4
   \   000000A4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable11_24
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable11_29
   \   000000AE   0x.... 0x....      BL       DataUnpack_CSNR
   \   000000B2   0x4680             MOV      R8,R0
    345          		
    346          //做数据转发;如数据接收失败，从串口1发出
    347          		if(recflg == 0)
   \   000000B4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000BC   0xD105             BNE.N    ??CSNR_RecDeal_6
    348          		{
    349          			SendCOM1(RecBuf,RecLen);
   \   000000BE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C0   0x0021             MOVS     R1,R4
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable11_24
   \   000000C6   0x.... 0x....      BL       SendCOM1
    350          		}
    351          //////////////////////////////////////
    352          		
    353          		l_befaddr = recdsprotocolpara.sourceaddr;
   \                     ??CSNR_RecDeal_6: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable11_29
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x....             LDR.N    R1,??DataTable11_2
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
    354          		
    355          		printfcom0("\r\n\r\n l_befaddr %x,%d",l_befaddr,recdsprotocolpara.datalen);				
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable11_29
   \   000000D8   0x7A02             LDRB     R2,[R0, #+8]
   \   000000DA   0x....             LDR.N    R0,??DataTable11_2
   \   000000DC   0x7801             LDRB     R1,[R0, #+0]
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable11_30
   \   000000E2   0x.... 0x....      BL       printfcom0
    356          		switch(l_befaddr)
   \   000000E6   0x....             LDR.N    R0,??DataTable11_2
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x28C1             CMP      R0,#+193
   \   000000EC   0xD017             BEQ.N    ??CSNR_RecDeal_7
   \   000000EE   0x28C2             CMP      R0,#+194
   \   000000F0   0xD022             BEQ.N    ??CSNR_RecDeal_8
   \   000000F2   0x28C3             CMP      R0,#+195
   \   000000F4   0xD02A             BEQ.N    ??CSNR_RecDeal_9
   \   000000F6   0x28CA             CMP      R0,#+202
   \   000000F8   0xD12B             BNE.N    ??CSNR_RecDeal_10
    357          		{
    358          			case 0xCA: 
    359          
    360          //						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//读卡器对接收的信息进行处理
    361          						printfcom0("\r\n\r\n GPRS处理！%d",recdsprotocolpara.framnum);				//无线模块
   \                     ??CSNR_RecDeal_11: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable11_29
   \   000000FC   0x7881             LDRB     R1,[R0, #+2]
   \   000000FE   0x....             LDR.N    R0,??DataTable11_31
   \   00000100   0x.... 0x....      BL       printfcom0
    362          						GprsRecOperate( recdsprotocolpara);
   \   00000104   0x....             LDR.N    R0,??DataTable11_29
   \   00000106   0xC807             LDM      R0,{R0-R2}
   \   00000108   0x.... 0x....      BL       GprsRecOperate
    363          						l_sequipmentcomm.addr 		= 0xca;
   \   0000010C   0x20CA             MOVS     R0,#+202
   \   0000010E   0x....             LDR.N    R1,??DataTable11_20
   \   00000110   0x7048             STRB     R0,[R1, #+1]
    364          						l_sequipmentcomm.commnum 	= commnum;
   \   00000112   0x....             LDR.N    R0,??DataTable11_20
   \   00000114   0x7007             STRB     R7,[R0, #+0]
    365                                  l_recFlg = 2;
   \   00000116   0x2002             MOVS     R0,#+2
   \   00000118   0x....             LDR.N    R1,??DataTable11_3
   \   0000011A   0x7008             STRB     R0,[R1, #+0]
    366          
    367          				
    368          				break;
   \   0000011C   0xE019             B.N      ??CSNR_RecDeal_10
    369          				
    370          			case 0xC1: 
    371            					 printfcom0("\r\n IC处理！");				//无线模块
   \                     ??CSNR_RecDeal_7: (+1)
   \   0000011E   0x....             LDR.N    R0,??DataTable11_32
   \   00000120   0x.... 0x....      BL       printfcom0
    372          					   //CarddataOperate(DataBuf,DataLen); 			//读卡器对接收的信息进行处理 
    373          						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//读卡器对接收的信息进行处理
   \   00000124   0x....             LDR.N    R0,??DataTable11_29
   \   00000126   0x7A01             LDRB     R1,[R0, #+8]
   \   00000128   0x....             LDR.N    R0,??DataTable11_29
   \   0000012A   0x6840             LDR      R0,[R0, #+4]
   \   0000012C   0x.... 0x....      BL       CarddataOperate
    374          						l_recFlg = 1;
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0x....             LDR.N    R1,??DataTable11_3
   \   00000134   0x7008             STRB     R0,[R1, #+0]
    375          						//l_equipmentaddr1 = 0xC1;
    376          				break;
   \   00000136   0xE00C             B.N      ??CSNR_RecDeal_10
    377          				
    378          			case 0xC2: 
    379          						CarddataOperate(recdsprotocolpara.databuf,recdsprotocolpara.datalen); 			//读卡器对接收的信息进行处理
   \                     ??CSNR_RecDeal_8: (+1)
   \   00000138   0x....             LDR.N    R0,??DataTable11_29
   \   0000013A   0x7A01             LDRB     R1,[R0, #+8]
   \   0000013C   0x....             LDR.N    R0,??DataTable11_29
   \   0000013E   0x6840             LDR      R0,[R0, #+4]
   \   00000140   0x.... 0x....      BL       CarddataOperate
    380          						//l_equipmentaddr2 = 0xC2;
    381                                  l_recFlg = 3;
   \   00000144   0x2003             MOVS     R0,#+3
   \   00000146   0x....             LDR.N    R1,??DataTable11_3
   \   00000148   0x7008             STRB     R0,[R1, #+0]
    382          
    383          				break;
   \   0000014A   0xE002             B.N      ??CSNR_RecDeal_10
    384          				
    385          			case 0xC3: 
    386          						printfcom0("\r\n 智能电量处理！");			//智能电量
   \                     ??CSNR_RecDeal_9: (+1)
   \   0000014C   0x....             LDR.N    R0,??DataTable11_33
   \   0000014E   0x.... 0x....      BL       printfcom0
    387          				
    388          				break;	
    389          				
    390          			default: ;
    391          																	//错误信息
    392          		}
    393          
    394          		if((l_befaddr &0xC0) == 0xC0)
   \                     ??CSNR_RecDeal_10: (+1)
   \   00000152   0x....             LDR.N    R0,??DataTable11_2
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   0000015A   0x28C0             CMP      R0,#+192
   \   0000015C   0xD146             BNE.N    ??CSNR_RecDeal_12
    395          		{
    396          //			printfcom0("\r\n comflg  %d,l_befaddr %d ",comflg,l_befaddr);
    397          			if(comflg == 0)
   \   0000015E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000160   0x2E00             CMP      R6,#+0
   \   00000162   0xD103             BNE.N    ??CSNR_RecDeal_13
    398          			{
    399          				l_led1com2flg = COM_LED_DATA; 			
   \   00000164   0x2002             MOVS     R0,#+2
   \   00000166   0x....             LDR.N    R1,??DataTable11
   \   00000168   0x7008             STRB     R0,[R1, #+0]
   \   0000016A   0xE03F             B.N      ??CSNR_RecDeal_12
    400          			}
    401          			else 
    402          			{
    403          				l_led2com3flg = COM_LED_DATA;	
   \                     ??CSNR_RecDeal_13: (+1)
   \   0000016C   0x2002             MOVS     R0,#+2
   \   0000016E   0x....             LDR.N    R1,??DataTable11_1
   \   00000170   0x7008             STRB     R0,[R1, #+0]
   \   00000172   0xE03B             B.N      ??CSNR_RecDeal_12
    404          			}
    405          		}
    406          	}
    407          	else
    408          	{
    409          		if(GetSysTime() - com2time > 100)
   \                     ??CSNR_RecDeal_1: (+1)
   \   00000174   0x.... 0x....      BL       GetSysTime
   \   00000178   0x....             LDR.N    R1,??DataTable11_23
   \   0000017A   0x6809             LDR      R1,[R1, #+0]
   \   0000017C   0x1A40             SUBS     R0,R0,R1
   \   0000017E   0x2865             CMP      R0,#+101
   \   00000180   0xD316             BCC.N    ??CSNR_RecDeal_14
    410          		{
    411          			if(GetSysTime() - errtime1 > 100 )
   \   00000182   0x.... 0x....      BL       GetSysTime
   \   00000186   0x....             LDR.N    R1,??DataTable11_34
   \   00000188   0x6809             LDR      R1,[R1, #+0]
   \   0000018A   0x1A40             SUBS     R0,R0,R1
   \   0000018C   0x2865             CMP      R0,#+101
   \   0000018E   0xD308             BCC.N    ??CSNR_RecDeal_15
    412          			{
    413          				com2errtimes++;
   \   00000190   0x....             LDR.N    R0,??DataTable11_22
   \   00000192   0x7800             LDRB     R0,[R0, #+0]
   \   00000194   0x1C40             ADDS     R0,R0,#+1
   \   00000196   0x....             LDR.N    R1,??DataTable11_22
   \   00000198   0x7008             STRB     R0,[R1, #+0]
    414          			    errtime1	= GetSysTime();
   \   0000019A   0x.... 0x....      BL       GetSysTime
   \   0000019E   0x....             LDR.N    R1,??DataTable11_34
   \   000001A0   0x6008             STR      R0,[R1, #+0]
    415          			}
    416          			
    417          			if(	 com2errtimes > 2)
   \                     ??CSNR_RecDeal_15: (+1)
   \   000001A2   0x....             LDR.N    R0,??DataTable11_22
   \   000001A4   0x7800             LDRB     R0,[R0, #+0]
   \   000001A6   0x2803             CMP      R0,#+3
   \   000001A8   0xDB02             BLT.N    ??CSNR_RecDeal_14
    418          			{
    419          				l_led1com2flg = 0;	
   \   000001AA   0x2000             MOVS     R0,#+0
   \   000001AC   0x....             LDR.N    R1,??DataTable11
   \   000001AE   0x7008             STRB     R0,[R1, #+0]
    420          			}
    421          		}
    422          
    423          		if(GetSysTime() - com3time > 100)
   \                     ??CSNR_RecDeal_14: (+1)
   \   000001B0   0x.... 0x....      BL       GetSysTime
   \   000001B4   0x....             LDR.N    R1,??DataTable11_26
   \   000001B6   0x6809             LDR      R1,[R1, #+0]
   \   000001B8   0x1A40             SUBS     R0,R0,R1
   \   000001BA   0x2865             CMP      R0,#+101
   \   000001BC   0xD316             BCC.N    ??CSNR_RecDeal_12
    424          		{
    425          			if(GetSysTime() - errtime2 > 100 )
   \   000001BE   0x.... 0x....      BL       GetSysTime
   \   000001C2   0x....             LDR.N    R1,??DataTable11_35
   \   000001C4   0x6809             LDR      R1,[R1, #+0]
   \   000001C6   0x1A40             SUBS     R0,R0,R1
   \   000001C8   0x2865             CMP      R0,#+101
   \   000001CA   0xD308             BCC.N    ??CSNR_RecDeal_16
    426          			{
    427          				com3errtimes++;
   \   000001CC   0x....             LDR.N    R0,??DataTable11_25
   \   000001CE   0x7800             LDRB     R0,[R0, #+0]
   \   000001D0   0x1C40             ADDS     R0,R0,#+1
   \   000001D2   0x....             LDR.N    R1,??DataTable11_25
   \   000001D4   0x7008             STRB     R0,[R1, #+0]
    428          			    errtime2	= GetSysTime();
   \   000001D6   0x.... 0x....      BL       GetSysTime
   \   000001DA   0x....             LDR.N    R1,??DataTable11_35
   \   000001DC   0x6008             STR      R0,[R1, #+0]
    429          			}
    430          
    431          			if( com3errtimes > 2)
   \                     ??CSNR_RecDeal_16: (+1)
   \   000001DE   0x....             LDR.N    R0,??DataTable11_25
   \   000001E0   0x7800             LDRB     R0,[R0, #+0]
   \   000001E2   0x2803             CMP      R0,#+3
   \   000001E4   0xDB02             BLT.N    ??CSNR_RecDeal_12
    432          			{
    433          				//printfcom0("\r\n l_led2com3flg %d",l_led2com3flg);
    434          				l_led2com3flg = 0;	
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x....             LDR.N    R1,??DataTable11_1
   \   000001EA   0x7008             STRB     R0,[R1, #+0]
    435          			}
    436          		}
    437          	}
    438          }
   \                     ??CSNR_RecDeal_12: (+1)
   \                     ??CSNR_RecDeal_5: (+1)
   \   000001EC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??RecBuf:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
   \                     ??DataBuf:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
   \                     ??com2time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??com3time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??com2errtimes:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??com3errtimes:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??errtime1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??errtime2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??recdsprotocolpara:
   \   00000000                      DS8 12
    439          
    440          

   \                                 In section .text, align 2, keep-with-next
    441          unsigned int GetHostBuf(unsigned char *Buf)
    442          {
   \                     GetHostBuf: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    443          //	memcpy(Buf,(unsigned char *)&g_cardsta,sizeof(g_cardsta));
    444          //	printfcom0("len %d,g_cardsta %d",sizeof(g_cardsta),g_cardsta); 
    445          //	return 	sizeof(g_cardsta);
    446          	return	0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    447          }
    448          

   \                                 In section .text, align 2, keep-with-next
    449          void	HostStationSend_CSNR(void)
    450          {
   \                     HostStationSend_CSNR: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
    451          	unsigned char HostBuf[64];
    452          	unsigned int  Len;
    453          	unsigned char addr;
    454          	
    455          	Len = GetHostBuf(HostBuf);
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       GetHostBuf
   \   0000000A   0x0004             MOVS     R4,R0
    456          	
    457          	addr = 0xCF;
   \   0000000C   0x20CF             MOVS     R0,#+207
   \   0000000E   0x0005             MOVS     R5,R0
    458          	
    459          	DataSend_CSNR(0x80,addr,HostBuf,Len);	
   \   00000010   0x0023             MOVS     R3,R4
   \   00000012   0x466A             MOV      R2,SP
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x2080             MOVS     R0,#+128
   \   0000001A   0x.... 0x....      BL       DataSend_CSNR
    460          
    461          }
   \   0000001E   0xB011             ADD      SP,SP,#+68
   \   00000020   0xBD30             POP      {R4,R5,PC}       ;; return
    462          

   \                                 In section .text, align 2, keep-with-next
    463          void HostScan(void)
    464          {
   \                     HostScan: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A3             SUB      SP,SP,#+140
    465          	static	unsigned char 	tmp = 0;
    466          	static	unsigned int 		time = 0;
    467          //	static	unsigned int	rectimes
    468          	unsigned char 		 	ScanAddrList[2]={0xC1,0xC2};
   \   00000006   0x....             LDR.N    R0,??DataTable11_36
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    469          	uint8		hostbuf[64];
    470          	uint32	    len;
    471          	uint8		modelnum;
    472          	uint16	    dip;
    473          	uint16	    myspeed1,myspeed2,mycsspeed;
    474          	int16		hig1,hig2;
    475          	uint8		locosta;
    476          //	unsigned char 		 	ScanAddrList[9]={0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA,0xCA};
    477          
    478          	len = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0004             MOVS     R4,R0
    479          //	if(
    480          ////						(GetSysTime() - time) > 100 
    481          ////				||    
    482          //                  (GetRecFlg()  )
    483          //		)
    484          	{
    485          		memcpy(&hostbuf[len],(unsigned char *)&l_befaddr,sizeof(l_befaddr))	;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x9011             STR      R0,[SP, #+68]
   \   00000016   0x....             LDR.N    R0,??DataTable11_2
   \   00000018   0x9010             STR      R0,[SP, #+64]
   \   0000001A   0xA812             ADD      R0,SP,#+72
   \   0000001C   0x1825             ADDS     R5,R4,R0
   \   0000001E   0x9A11             LDR      R2,[SP, #+68]
   \   00000020   0x9910             LDR      R1,[SP, #+64]
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy
    486          		len += sizeof(l_befaddr);
   \   00000028   0x1C64             ADDS     R4,R4,#+1
    487          		
    488          		modelnum = GetOilBoxCod();
   \   0000002A   0x.... 0x....      BL       GetOilBoxCod
   \   0000002E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    489          		memcpy(&hostbuf[len],(unsigned char *)&modelnum,sizeof(modelnum))	;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x900F             STR      R0,[SP, #+60]
   \   00000036   0xF10D 0x0001      ADD      R0,SP,#+1
   \   0000003A   0x900E             STR      R0,[SP, #+56]
   \   0000003C   0xA812             ADD      R0,SP,#+72
   \   0000003E   0x1825             ADDS     R5,R4,R0
   \   00000040   0x9A0F             LDR      R2,[SP, #+60]
   \   00000042   0x990E             LDR      R1,[SP, #+56]
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x.... 0x....      BL       __aeabi_memcpy
    490          		len += sizeof(modelnum);
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
    491          		
    492          		dip = g_DipVal;
   \   0000004C   0x....             LDR.N    R0,??DataTable11_37
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    493          		memcpy(&hostbuf[len],(unsigned char *)&dip,sizeof(dip));
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x900D             STR      R0,[SP, #+52]
   \   00000058   0xA803             ADD      R0,SP,#+12
   \   0000005A   0x900C             STR      R0,[SP, #+48]
   \   0000005C   0xA812             ADD      R0,SP,#+72
   \   0000005E   0x1825             ADDS     R5,R4,R0
   \   00000060   0x9A0D             LDR      R2,[SP, #+52]
   \   00000062   0x990C             LDR      R1,[SP, #+48]
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       __aeabi_memcpy
    494          		len += sizeof(dip);
   \   0000006A   0x1CA4             ADDS     R4,R4,#+2
    495          
    496          		memcpy(&hostbuf[len],(unsigned char *)&g_CurFlshRecNum,sizeof(g_CurFlshRecNum))	;
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0x900B             STR      R0,[SP, #+44]
   \   00000070   0x....             LDR.N    R0,??DataTable11_17
   \   00000072   0x900A             STR      R0,[SP, #+40]
   \   00000074   0xA812             ADD      R0,SP,#+72
   \   00000076   0x1825             ADDS     R5,R4,R0
   \   00000078   0x9A0B             LDR      R2,[SP, #+44]
   \   0000007A   0x990A             LDR      R1,[SP, #+40]
   \   0000007C   0x0028             MOVS     R0,R5
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy
    497          		len += sizeof(g_CurFlshRecNum);		
   \   00000082   0x1D24             ADDS     R4,R4,#+4
    498          		
    499          		//高度1
    500          		myspeed1    = GetMySpeed1();
   \   00000084   0x.... 0x....      BL       GetMySpeed1
   \   00000088   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    501          		myspeed2    = GetMySpeed2();
   \   0000008C   0x.... 0x....      BL       GetMySpeed2
   \   00000090   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    502          		mycsspeed   = GetMyEngRotSpd();
   \   00000094   0x.... 0x....      BL       GetMyEngRotSpd
   \   00000098   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    503          		hig1        = GetDip1Hig();
   \   0000009C   0x.... 0x....      BL       GetDip1Hig
   \   000000A0   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    504          		hig2        = GetDip2Hig();	
   \   000000A4   0x.... 0x....      BL       GetDip2Hig
   \   000000A8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    505          		locosta	    = GetMyLocoWorkState();
   \   000000AC   0x.... 0x....      BL       GetMyLocoWorkState
   \   000000B0   0xF88D 0x0000      STRB     R0,[SP, #+0]
    506          	  
    507          		memcpy(&hostbuf[len],(unsigned char *)&myspeed1,sizeof(myspeed1))	;
   \   000000B4   0x2002             MOVS     R0,#+2
   \   000000B6   0x9009             STR      R0,[SP, #+36]
   \   000000B8   0xF10D 0x000A      ADD      R0,SP,#+10
   \   000000BC   0x9008             STR      R0,[SP, #+32]
   \   000000BE   0xA812             ADD      R0,SP,#+72
   \   000000C0   0x1825             ADDS     R5,R4,R0
   \   000000C2   0x9A09             LDR      R2,[SP, #+36]
   \   000000C4   0x9908             LDR      R1,[SP, #+32]
   \   000000C6   0x0028             MOVS     R0,R5
   \   000000C8   0x.... 0x....      BL       __aeabi_memcpy
    508          		len += sizeof(myspeed1);		
   \   000000CC   0x1CA4             ADDS     R4,R4,#+2
    509          		
    510          		memcpy(&hostbuf[len],(unsigned char *)&myspeed2,sizeof(myspeed2))	;
   \   000000CE   0x2002             MOVS     R0,#+2
   \   000000D0   0x9007             STR      R0,[SP, #+28]
   \   000000D2   0xA802             ADD      R0,SP,#+8
   \   000000D4   0x9006             STR      R0,[SP, #+24]
   \   000000D6   0xA812             ADD      R0,SP,#+72
   \   000000D8   0x1825             ADDS     R5,R4,R0
   \   000000DA   0x9A07             LDR      R2,[SP, #+28]
   \   000000DC   0x9906             LDR      R1,[SP, #+24]
   \   000000DE   0x0028             MOVS     R0,R5
   \   000000E0   0x.... 0x....      BL       __aeabi_memcpy
    511          		len += sizeof(myspeed2);	
   \   000000E4   0x1CA4             ADDS     R4,R4,#+2
    512          
    513          		memcpy(&hostbuf[len],(unsigned char *)&mycsspeed,sizeof(mycsspeed))	;
   \   000000E6   0x2002             MOVS     R0,#+2
   \   000000E8   0x9005             STR      R0,[SP, #+20]
   \   000000EA   0xF10D 0x0006      ADD      R0,SP,#+6
   \   000000EE   0x9004             STR      R0,[SP, #+16]
   \   000000F0   0xA812             ADD      R0,SP,#+72
   \   000000F2   0x1825             ADDS     R5,R4,R0
   \   000000F4   0x9A05             LDR      R2,[SP, #+20]
   \   000000F6   0x9904             LDR      R1,[SP, #+16]
   \   000000F8   0x0028             MOVS     R0,R5
   \   000000FA   0x.... 0x....      BL       __aeabi_memcpy
    514          		len += sizeof(mycsspeed);	
   \   000000FE   0x1CA4             ADDS     R4,R4,#+2
    515          
    516          		memcpy(&hostbuf[len],(unsigned char *)&hig1,sizeof(hig1))	;
   \   00000100   0x2502             MOVS     R5,#+2
   \   00000102   0xAE01             ADD      R6,SP,#+4
   \   00000104   0xA812             ADD      R0,SP,#+72
   \   00000106   0x1827             ADDS     R7,R4,R0
   \   00000108   0x002A             MOVS     R2,R5
   \   0000010A   0x0031             MOVS     R1,R6
   \   0000010C   0x0038             MOVS     R0,R7
   \   0000010E   0x.... 0x....      BL       __aeabi_memcpy
    517          		len += sizeof(hig1);	
   \   00000112   0x1CA4             ADDS     R4,R4,#+2
    518          		
    519          		memcpy(&hostbuf[len],(unsigned char *)&hig2,sizeof(hig2))	;
   \   00000114   0x2702             MOVS     R7,#+2
   \   00000116   0xF10D 0x0802      ADD      R8,SP,#+2
   \   0000011A   0xA812             ADD      R0,SP,#+72
   \   0000011C   0xEB14 0x0900      ADDS     R9,R4,R0
   \   00000120   0x003A             MOVS     R2,R7
   \   00000122   0x4641             MOV      R1,R8
   \   00000124   0x4648             MOV      R0,R9
   \   00000126   0x.... 0x....      BL       __aeabi_memcpy
    520          		len += sizeof(hig2);	
   \   0000012A   0x1CA4             ADDS     R4,R4,#+2
    521          		
    522          		memcpy(&hostbuf[len],(unsigned char *)&locosta,sizeof(locosta))	;
   \   0000012C   0xF05F 0x0901      MOVS     R9,#+1
   \   00000130   0x46EA             MOV      R10,SP
   \   00000132   0xA812             ADD      R0,SP,#+72
   \   00000134   0xEB14 0x0B00      ADDS     R11,R4,R0
   \   00000138   0x464A             MOV      R2,R9
   \   0000013A   0x4651             MOV      R1,R10
   \   0000013C   0x4658             MOV      R0,R11
   \   0000013E   0x.... 0x....      BL       __aeabi_memcpy
    523          		len += sizeof(locosta);	
   \   00000142   0x1C64             ADDS     R4,R4,#+1
    524          		//if(GetRecAddr())				
    525          		
    526                  //DataSend_CSNR(0x80,ScanAddrList[tmp%2],hostbuf,len);
    527          		
    528                  sentendflg =1;
   \   00000144   0x2001             MOVS     R0,#+1
   \   00000146   0x....             LDR.N    R1,??DataTable11_21
   \   00000148   0x7008             STRB     R0,[R1, #+0]
    529          		//printfcom0("\r\n l_befaddr %d,%d,%d,%d",l_befaddr,modelnum,dip,g_CurFlshRecNum);
    530          		tmp++;
   \   0000014A   0x....             LDR.N    R0,??DataTable11_38
   \   0000014C   0x7800             LDRB     R0,[R0, #+0]
   \   0000014E   0x1C40             ADDS     R0,R0,#+1
   \   00000150   0x....             LDR.N    R1,??DataTable11_38
   \   00000152   0x7008             STRB     R0,[R1, #+0]
    531          		sentendflg  = 1;
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x....             LDR.N    R1,??DataTable11_21
   \   00000158   0x7008             STRB     R0,[R1, #+0]
    532          		l_recFlg    = 0; 
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x....             LDR.N    R1,??DataTable11_3
   \   0000015E   0x7008             STRB     R0,[R1, #+0]
    533          		//time 	    = GetSysTime(); 
    534          	}
    535          }
   \   00000160   0xB023             ADD      SP,SP,#+140
   \   00000162   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 1
   \                     ??tmp:
   \   00000000                      DS8 1
    536          

   \                                 In section .text, align 2, keep-with-next
    537          void  EquipmentComTask(void)   
    538          {
   \                     EquipmentComTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    539          	static	 unsigned int   time;
    540          
    541          	if(GetSendDataComFlg() == 1)     //readdata
   \   00000002   0x.... 0x....      BL       GetSendDataComFlg
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD10F             BNE.N    ??EquipmentComTask_0
    542          	{		
    543          		if(ComSendData(l_senddatastartnum,l_senddataendnum))
   \   0000000A   0x....             LDR.N    R0,??DataTable11_10
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable11_9
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       ComSendData
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD005             BEQ.N    ??EquipmentComTask_1
    544          		{
    545          			l_senddatastartnum++;
   \   0000001A   0x....             LDR.N    R0,??DataTable11_9
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable11_9
   \   00000022   0x6008             STR      R0,[R1, #+0]
    546          			return;
   \   00000024   0xE01E             B.N      ??EquipmentComTask_2
    547          		}
    548          		else
    549          		{
    550          			ClearSendDataComFlg();
   \                     ??EquipmentComTask_1: (+1)
   \   00000026   0x.... 0x....      BL       ClearSendDataComFlg
    551          		}
    552          	}
    553          
    554          	if(GetModelCardFlg() == 0) 	  	
   \                     ??EquipmentComTask_0: (+1)
   \   0000002A   0x.... 0x....      BL       GetModelCardFlg
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD10A             BNE.N    ??EquipmentComTask_3
    555          	{
    556          	 	HostScan();					
   \   00000032   0x.... 0x....      BL       HostScan
    557          		
    558          		GprsDataComDeal();  //补充ＧＰＲＳ处理
   \   00000036   0x.... 0x....      BL       GprsDataComDeal
    559          		
    560          		time = GetSysTime(); 
   \   0000003A   0x.... 0x....      BL       GetSysTime
   \   0000003E   0x....             LDR.N    R1,??DataTable11_39
   \   00000040   0x6008             STR      R0,[R1, #+0]
    561          
    562          		CSNR_RecDeal();
   \   00000042   0x.... 0x....      BL       CSNR_RecDeal
   \   00000046   0xE00D             B.N      ??EquipmentComTask_4
    563          	}
    564          	else
    565          	{
    566          		while(GetModelCardFlg() == 1)  //set model
   \                     ??EquipmentComTask_3: (+1)
   \   00000048   0x.... 0x....      BL       GetModelCardFlg
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD109             BNE.N    ??EquipmentComTask_4
    567          		{
    568          			sentendflg = 1;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x....             LDR.N    R1,??DataTable11_21
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    569          			if(GetSysTime() - time > 10*100 )    //模型卡退出
   \   00000056   0x.... 0x....      BL       GetSysTime
    570          			{
    571          //				ClearModelCardFlg();
    572          			}
    573          
    574          			CSNR_RecDeal();
   \   0000005A   0x.... 0x....      BL       CSNR_RecDeal
    575          
    576          			CirculatesTask();
   \   0000005E   0x.... 0x....      BL       CirculatesTask
   \   00000062   0xE7F1             B.N      ??EquipmentComTask_3
    577          		}
    578          	}
    579          }
   \                     ??EquipmentComTask_4: (+1)
   \                     ??EquipmentComTask_2: (+1)
   \   00000064   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??time:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     l_led1com2flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     l_led2com3flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     l_befaddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     l_recFlg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     l_senddatacomflg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     l_readdatadisplaytime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     l_eqiupmentcode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     l_senddatastartnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     l_senddataendnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     g_CurFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     g_LshRedFlshRecNum_gprs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     l_sequipmentcomm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x........         DC32     sentendflg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x........         DC32     ??com2errtimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \   00000000   0x........         DC32     ??com2time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \   00000000   0x........         DC32     ??RecBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \   00000000   0x........         DC32     ??com3errtimes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \   00000000   0x........         DC32     ??com3time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \   00000000   0x........         DC32     ??DataBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_29:
   \   00000000   0x........         DC32     ??recdsprotocolpara

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_30:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_31:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_32:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_33:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_34:
   \   00000000   0x........         DC32     ??errtime1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_35:
   \   00000000   0x........         DC32     ??errtime2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_36:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_37:
   \   00000000   0x........         DC32     g_DipVal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_38:
   \   00000000   0x........         DC32     ??tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_39:
   \   00000000   0x........         DC32     ??time

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012 ReadCardDisplay"
   \              0x0D 0x0A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x43    
   \              0x61 0x72    
   \              0x64 0x44    
   \              0x69 0x73    
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0D 0x0A          DC8 "\015\012 IndicateWriteCardFinsh"
   \              0x20 0x49    
   \              0x6E 0x64    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x57    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x43 0x61    
   \              0x72 0x64    
   \              0x46 0x69    
   \              0x6E 0x73    
   \              0x68 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0D 0x0A          DC8 "\015\012 COPY_CARD "
   \              0x20 0x43    
   \              0x4F 0x50    
   \              0x59 0x5F    
   \              0x43 0x41    
   \              0x52 0x44    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0D 0x0A          DC8 "\015\012 COPY_FRAM_CARD "
   \              0x20 0x43    
   \              0x4F 0x50    
   \              0x59 0x5F    
   \              0x46 0x52    
   \              0x41 0x4D    
   \              0x5F 0x43    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0D 0x0A          DC8 "\015\012 EXPAND_CARD "
   \              0x20 0x45    
   \              0x58 0x50    
   \              0x41 0x4E    
   \              0x44 0x5F    
   \              0x43 0x41    
   \              0x52 0x44    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x46 0x2E          DC8 "F.%2d T.%2d"
   \              0x25 0x32    
   \              0x64 0x20    
   \              0x54 0x2E    
   \              0x25 0x32    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \307\345\301\343"
   \              0x20 0xC7    
   \              0xE5 0xC1    
   \              0xE3 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x43 0x5F          DC8 "C_ALL"
   \              0x41 0x4C    
   \              0x4C 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x0D 0x0A          DC8 "\015\012 RecLen <10 \015\012"
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x4C 0x65    
   \              0x6E 0x20    
   \              0x3C 0x31    
   \              0x30 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012 l_befaddr %x,%d"
   \              0x0D 0x0A    
   \              0x20 0x6C    
   \              0x5F 0x62    
   \              0x65 0x66    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012 GPRS\264\246\300\355\243\241%d"
   \              0x0D 0x0A    
   \              0x20 0x47    
   \              0x50 0x52    
   \              0x53 0xB4    
   \              0xA6 0xC0    
   \              0xED 0xA3    
   \              0xA1 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x0D 0x0A          DC8 "\015\012 IC\264\246\300\355\243\241"
   \              0x20 0x49    
   \              0x43 0xB4    
   \              0xA6 0xC0    
   \              0xED 0xA3    
   \              0xA1 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \326\307\304\334\265\347\301\277\264\246\300\355\243\241"
   \              0x20 0xD6    
   \              0xC7 0xC4    
   \              0xDC 0xB5    
   \              0xE7 0xC1    
   \              0xBF 0xB4    
   \              0xA6 0xC0    
   \              0xED 0xA3    
   \              0xA1 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \                     ?_13:
   \   00000000   0xC1 0xC2          DC8 193, 194
    580          
    581          
    582          
    583          
    584          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   CSNR_RecDeal
        24   -> CarddataOperate
        24   -> ClearFramRecEndFlgCom2
        24   -> ClearFramRecEndFlgCom3
        24   -> DataUnpack_CSNR
        24   -> GetFramRecEndFlgCom2
        24   -> GetFramRecEndFlgCom3
        24   -> GetSysTime
        24   -> GprsRecOperate
        24   -> ReadRs485DataCom2
        24   -> ReadRs485DataCom3
        24   -> SendCOM1
        24   -> printfcom0
        24   -> printfcom2
      72   CarddataOperate
        72   -> ClaerDisplaySetWithoutStore
        72   -> DisplaySet
        72   -> GetSysTime
        72   -> IndicateWriteCardFinsh
        72   -> ReCalPara
        72   -> ReadCardDisplay
        72   -> ResetSys
        72   -> SetCalcPara
        72   -> SetDen
        72   -> SetFix
        72   -> SetHight
        72   -> SetModel
        72   -> SetSel
        72   -> StoreCurFlshRecNum
        72   -> StoreLstRedFlshRecNum
        72   -> StoreLstRedFlshRecNum_gprs
        72   -> StoreSysRunPara
        72   -> WriteTime
        72   -> __aeabi_memcpy
        72   -> printfcom0
       8   ClearFramRecEndFlg
         8   -> ClearCOM1EndFlg
       8   ClearFramRecEndFlgCom2
         8   -> ClearCOM2EndFlg
       8   ClearFramRecEndFlgCom3
         8   -> ClearCOM3EndFlg
       0   ClearSendDataComFlg
       8   EquipmentComTask
         8   -> CSNR_RecDeal
         8   -> CirculatesTask
         8   -> ClearSendDataComFlg
         8   -> ComSendData
         8   -> GetModelCardFlg
         8   -> GetSendDataComFlg
         8   -> GetSysTime
         8   -> GprsDataComDeal
         8   -> HostScan
       8   GetFramRecEndFlgCom2
         8   -> GetCOM2EndFlg
       8   GetFramRecEndFlgCom3
         8   -> GetCOM3EndFlg
       0   GetGprsCommNum
       0   GetHostBuf
       0   GetLed1Com2Flg
       0   GetLed2Com3Flg
       0   GetReadDataDisplayTime
       0   GetRecFlg
       0   GetRecaddr
       0   GetSendDataComFlg
     176   HostScan
       176   -> GetDip1Hig
       176   -> GetDip2Hig
       176   -> GetMyEngRotSpd
       176   -> GetMyLocoWorkState
       176   -> GetMySpeed1
       176   -> GetMySpeed2
       176   -> GetOilBoxCod
       176   -> __aeabi_memcpy
      80   HostStationSend_CSNR
        80   -> DataSend_CSNR
        80   -> GetHostBuf
       8   ReadRs485DataCom2
         8   -> ReadCOM2
       8   ReadRs485DataCom3
         8   -> ReadCOM3


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_29
       4  ??DataTable11_3
       4  ??DataTable11_30
       4  ??DataTable11_31
       4  ??DataTable11_32
       4  ??DataTable11_33
       4  ??DataTable11_34
       4  ??DataTable11_35
       4  ??DataTable11_36
       4  ??DataTable11_37
       4  ??DataTable11_38
       4  ??DataTable11_39
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      24  ?_0
      28  ?_1
      20  ?_10
      12  ?_11
      20  ?_12
       2  ?_13
      16  ?_2
      20  ?_3
      16  ?_4
      12  ?_5
       8  ?_6
       8  ?_7
      20  ?_8
      24  ?_9
     496  CSNR_RecDeal
     770  CarddataOperate
       8  ClearFramRecEndFlg
       8  ClearFramRecEndFlgCom2
       8  ClearFramRecEndFlgCom3
      10  ClearSendDataComFlg
     256  DataBuf
     102  EquipmentComTask
      10  GetFramRecEndFlgCom2
      10  GetFramRecEndFlgCom3
      22  GetGprsCommNum
       6  GetHostBuf
       8  GetLed1Com2Flg
       8  GetLed2Com3Flg
       8  GetReadDataDisplayTime
       8  GetRecFlg
       8  GetRecaddr
       8  GetSendDataComFlg
     358  HostScan
      34  HostStationSend_CSNR
      18  ReadRs485DataCom2
      18  ReadRs485DataCom3
     256  RecBuf
       1  com2errtimes
       4  com2time
       1  com3errtimes
       4  com3time
       4  errtime1
       4  errtime2
       1  l_befaddr
       4  l_eqiupmentcode
       1  l_led1com2flg
       1  l_led2com3flg
       4  l_readdatadisplaytime
       1  l_recFlg
       1  l_senddatacomflg
       4  l_senddataendnum
       4  l_senddatastartnum
       4  l_sequipmentcomm
      12  recdsprotocolpara
       1  sentendflg
       4  time
       1  tmp

 
   573 bytes in section .bss
   230 bytes in section .rodata
 2 086 bytes in section .text
 
 2 086 bytes of CODE  memory
   230 bytes of CONST memory
   573 bytes of DATA  memory

Errors: none
Warnings: 34
