###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  21:03:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-310统计模块\Software\uC-MB\Source\MB_UTIL.C
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\uC-MB\Source\MB_UTIL.C -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\MB_UTIL.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\MB_UTIL.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\uC-MB\Source\MB_UTIL.C
      1          /*
      2          *********************************************************************************************************
      3          *                                              uC/Modbus
      4          *                                       The Embedded Modbus Stack
      5          *
      6          *                          (c) Copyright 2003-2009; Micrium, Inc.; Weston, FL               
      7          *
      8          *               All rights reserved.  Protected by international copyright laws.
      9          *               Knowledge of the source code may NOT be used to develop a similar product.
     10          *               Please help us continue to provide the Embedded community with the finest
     11          *               software available.  Your honesty is greatly appreciated.
     12          *********************************************************************************************************
     13          */
     14          
     15          /*
     16          *********************************************************************************************************
     17          *
     18          *                                        uC/MODBUS Utilities
     19          *
     20          * Filename      : mb_util.h
     21          * Version       : V2.12
     22          * Programmer(s) : JJL
     23          *********************************************************************************************************
     24          * Note(s)       :
     25          *********************************************************************************************************
     26          */
     27          
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #include <mb.h>
     36          
     37          /*$PAGE*/
     38          /*
     39          *********************************************************************************************************
     40          *                                          MB_ASCII_BinToHex()
     41          *
     42          * Description : Converts a byte into two ASCII characters into the given buffer.
     43          *
     44          * Argument(s) : value      The byte of data to be converted.
     45          *               pbuf       A pointer to the buffer to store the ASCII chars.
     46          *
     47          * Return(s)   : The buffer pointer which has been updated to point to the next char in the buffer.
     48          *
     49          * Caller(s)   : MB_ASCII_Tx()
     50          *
     51          * Note(s)     : (1) The function ONLY converts the byte to ASCII and DOES NOT null terminate the string.
     52          *********************************************************************************************************
     53          */
     54          
     55          #if (MODBUS_CFG_ASCII_EN == DEF_ENABLED)
     56          CPU_INT08U  *MB_ASCII_BinToHex (CPU_INT08U  value,
     57                                          CPU_INT08U *pbuf)
     58          {
     59              CPU_INT08U  nibble;
     60          
     61          
     62              nibble = (value >> 4) & 0x0F;                /* Upper Nibble                                       */
     63              if (nibble <= 9) {
     64                  *pbuf++ = (CPU_INT08U)(nibble + '0');
     65              } else {
     66                  *pbuf++ = (CPU_INT08U)(nibble - 10 + 'A');
     67              }
     68          
     69              nibble = value & 0x0F;                       /* Lower Nibble                                       */
     70              if (nibble <= 9) {
     71                  *pbuf++ = (CPU_INT08U)(nibble + '0');
     72              } else {
     73                  *pbuf++ = (CPU_INT08U)(nibble - 10 + 'A');
     74              }
     75              return (pbuf);
     76          }
     77          #endif
     78          
     79          /*$PAGE*/
     80          /*
     81          *********************************************************************************************************
     82          *                                          MB_ASCII_HexToBin()
     83          *
     84          * Description : Converts the first two ASCII hex characters in the buffer into one byte.
     85          *
     86          * Argument(s) : phex     Pointer to the buffer that contains the two ascii chars.
     87          *
     88          * Return(s)   : value of the two ASCII HEX digits pointed to by 'phex'.
     89          *
     90          * Caller(s)   : MB_ASCII_RxByte()
     91          *               MB_ASCII_Rx()
     92          *               MB_ASCII_RxCalcLRC()
     93          *               MB_ASCII_TxCalcLRC
     94          *
     95          * Note(s)     : none.
     96          *********************************************************************************************************
     97          */
     98          
     99          #if (MODBUS_CFG_ASCII_EN == DEF_ENABLED)
    100          CPU_INT08U  MB_ASCII_HexToBin (CPU_INT08U  *phex)
    101          {
    102              CPU_INT08U  value;
    103              CPU_INT08U  high;
    104              CPU_INT08U  low;
    105          
    106          
    107              high = *phex;                                /* Get upper nibble                                   */
    108              phex++;
    109              low  = *phex;                                /* Get lower nibble                                   */
    110              if (high <= '9') {                           /* Upper Nibble                                       */
    111                  value  = (CPU_INT08U)(high - '0');
    112              } else if (high <= 'F') {
    113                  value  = (CPU_INT08U)(high - 'A' + 10);
    114              } else {
    115                  value  = (CPU_INT08U)(high - 'a' + 10);
    116              }
    117              value <<= 4;
    118          
    119              if (low <= '9') {                            /* Lower Nibble                                       */
    120                  value += (CPU_INT08U)(low - '0');
    121              } else if (low <= 'F') {
    122                  value += (CPU_INT08U)(low - 'A' + 10);
    123              } else {
    124                  value += (CPU_INT08U)(low - 'a' + 10);
    125              }
    126              return (value);
    127          }
    128          #endif
    129          
    130          /*$PAGE*/
    131          /*
    132          *********************************************************************************************************
    133          *                                          MB_ASCII_RxCalcLRC()
    134          *
    135          * Description : The function calculates an 8-bit Longitudinal Redundancy Check on a MODBUS_FRAME
    136          *               structure.
    137          *
    138          * Argument(s) : none.
    139          *
    140          * Return(s)   : The calculated LRC value.
    141          *
    142          * Caller(s)   : MBS_ASCII_Task()
    143          *
    144          * Note(s)     : (1) The LRC is calculated on the ADDR, FC and Data fields, not the ':', CR/LF and LRC
    145          *                   placed in the message by the sender.  We thus need to subtract 5 'ASCII' characters
    146          *                   from the received message to exclude these.
    147          *********************************************************************************************************
    148          */
    149          
    150          #if (MODBUS_CFG_ASCII_EN == DEF_ENABLED)
    151          CPU_INT08U  MB_ASCII_RxCalcLRC (MODBUS_CH  *pch)
    152          {
    153              CPU_INT08U   lrc;
    154              CPU_INT16U   len;
    155              CPU_INT08U  *pblock;
    156          
    157          
    158              len    = (pch->RxBufByteCtr - 5) / 2 ;        /* LRC to include Addr + FC + Data                    */
    159              pblock = (CPU_INT08U *)&pch->RxBuf[1];
    160              lrc    = 0;
    161              while (len-- > 0) {                          /* For each byte of data in the data block...         */
    162                  lrc    += MB_ASCII_HexToBin(pblock);     /* Add the data byte to LRC, increment data pointer.  */
    163                  pblock += 2;
    164              }
    165              
    166              lrc = ~lrc + 1;                              /* Two complement the binary sum                      */
    167              return (lrc);                                /* Return LRC for all data in block.                  */
    168          }
    169          #endif
    170          
    171          /*$PAGE*/
    172          /*
    173          *********************************************************************************************************
    174          *                                          MB_ASCII_TxCalcLRC()
    175          *
    176          * Description : The function calculates an 8-bit Longitudinal Redundancy Check on a MODBUS_FRAME
    177          *               structure.
    178          *
    179          * Argument(s) : none
    180          *
    181          * Return(s)   : The calculated LRC value.
    182          *
    183          * Caller(s)   : MB_ASCII_Tx()
    184          *
    185          * Note(s)     : (1) The LRC is calculated on the ADDR, FC and Data fields, not the ':' which was inserted
    186          *                   in the TxBuf[].  Thus we subtract 1 ASCII character from the LRC.
    187          *
    188          *               (2) The LRC and CR/LF bytes are not YET in the .RxBuf[].
    189          *********************************************************************************************************
    190          */
    191          
    192          #if (MODBUS_CFG_ASCII_EN == DEF_ENABLED)
    193          CPU_INT08U  MB_ASCII_TxCalcLRC (MODBUS_CH  *pch, CPU_INT16U tx_bytes)
    194          {
    195              CPU_INT08U     lrc;
    196              CPU_INT16U     len;
    197              CPU_INT08U    *pblock;
    198          
    199          
    200              len    = (tx_bytes - 1) / 2;                 /* LRC to include Addr + FC + Data (exclude ':')      */
    201              pblock = (CPU_INT08U *)&pch->TxBuf[1];
    202              lrc    = 0;
    203              while (len-- > 0) {                          /* For each byte of data in the data block...         */
    204                  lrc    += MB_ASCII_HexToBin(pblock);     /* Add the data byte to LRC, increment data pointer.  */
    205                  pblock += 2;
    206              }
    207              lrc = ~lrc + 1;                              /* Two complement the binary sum                      */
    208              return (lrc);                                /* Return LRC for all data in block.                  */
    209          }
    210          #endif
    211          
    212          /*$PAGE*/
    213          /*
    214          *********************************************************************************************************
    215          *                                          MB_RTU_RxCalcCRC()
    216          *
    217          * Description : The polynomial is a CRC-16 found for 'MBS_RxFrameNDataBytes' number of characters
    218          *               starting at 'MBS_RxFrameAddr'.
    219          *
    220          * Argument(s) : none.
    221          *
    222          * Return(s)   : An unsigned 16-bit value representing the CRC-16 of the data.
    223          *
    224          * Caller(s)   : MBS_RTU_Task()
    225          *
    226          * Note(s)     : none. 
    227          *********************************************************************************************************
    228          */
    229          
    230          #if (MODBUS_CFG_RTU_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    231          CPU_INT16U  MB_RTU_RxCalcCRC (MODBUS_CH  *pch)
    232          {
   \                     MB_RTU_RxCalcCRC: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0001             MOVS     R1,R0
    233              CPU_INT16U      crc;
    234              CPU_INT08U      shiftctr;
    235              CPU_BOOLEAN     flag;
    236              CPU_INT16U      length;
    237              CPU_INT08U     *pblock;
    238          
    239          
    240              pblock = (CPU_INT08U *)&pch->RxFrameData[0];      /* Starting address of where the CRC data starts            */
   \   00000004   0xF511 0x7611      ADDS     R6,R1,#+580
   \   00000008   0x0035             MOVS     R5,R6
    241              length = pch->RxFrameNDataBytes + 2;              /* Include the address and function code in the CRC         */
   \   0000000A   0xF8B1 0x6344      LDRH     R6,[R1, #+836]
   \   0000000E   0x1CB6             ADDS     R6,R6,#+2
   \   00000010   0x0034             MOVS     R4,R6
    242              crc    = 0xFFFF;                                  /* Initialize CRC to all ones.                              */
   \   00000012   0xF64F 0x76FF      MOVW     R6,#+65535
   \   00000016   0x0030             MOVS     R0,R6
    243              while (length > 0) {                              /* Account for each byte of data                            */
   \                     ??MB_RTU_RxCalcCRC_0: (+1)
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD016             BEQ.N    ??MB_RTU_RxCalcCRC_1
    244                  length--;
   \   0000001E   0x1E64             SUBS     R4,R4,#+1
    245                  crc      ^= (CPU_INT16U)*pblock++;
   \   00000020   0x782E             LDRB     R6,[R5, #+0]
   \   00000022   0x4070             EORS     R0,R6,R0
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
    246                  shiftctr  = 8;
   \   00000026   0x2608             MOVS     R6,#+8
   \   00000028   0x0032             MOVS     R2,R6
    247                  do {
    248                      flag   = (crc & 0x0001) ? DEF_TRUE : DEF_FALSE; /* Determine if the shift out of rightmost bit is 1   */
   \                     ??MB_RTU_RxCalcCRC_2: (+1)
   \   0000002A   0xF010 0x0601      ANDS     R6,R0,#0x1
   \   0000002E   0x0033             MOVS     R3,R6
    249                      crc  >>= 1;                               /* Shift CRC to the right one bit.                          */
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x0840             LSRS     R0,R0,#+1
    250                      if (flag == DEF_TRUE) {                   /* If (bit shifted out of rightmost bit was a 1)            */
   \   00000034   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000036   0x2B01             CMP      R3,#+1
   \   00000038   0xD103             BNE.N    ??MB_RTU_RxCalcCRC_3
    251                          crc ^= MODBUS_CRC16_POLY;             /* 0XA001  Exclusive OR the CRC with the generating polynomial. */
   \   0000003A   0xF480 0x4020      EOR      R0,R0,#0xA000
   \   0000003E   0xF090 0x0001      EORS     R0,R0,#0x1
    252                      }
    253                      shiftctr--;
   \                     ??MB_RTU_RxCalcCRC_3: (+1)
   \   00000042   0x1E52             SUBS     R2,R2,#+1
    254                  } while (shiftctr > 0);
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD1EF             BNE.N    ??MB_RTU_RxCalcCRC_2
   \   0000004A   0xE7E5             B.N      ??MB_RTU_RxCalcCRC_0
    255              }
    256              pch->RxFrameCRC_Calc = crc;
   \                     ??MB_RTU_RxCalcCRC_1: (+1)
   \   0000004C   0xF8A1 0x0348      STRH     R0,[R1, #+840]
    257              return (crc);
   \   00000050   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000052   0xBC70             POP      {R4-R6}
   \   00000054   0x4770             BX       LR               ;; return
    258          }
    259          #endif
    260          
    261          /*$PAGE*/
    262          /*
    263          *********************************************************************************************************
    264          *                                           MB_RTU_TxCalcCRC()
    265          *
    266          * Description : The polynomial is a CRC-16 found for 'MBS_TxFrameNDataBytes' number of characters
    267          *               starting at 'MBS_TxFrameAddr'.
    268          *
    269          * Argument(s) : none
    270          *
    271          * Return(s)   : An unsigned 16-bit value representing the CRC-16 of the data.
    272          *
    273          * Caller(s)   : MB_RTU_Tx()
    274          *
    275          * Note*(s)    : none.
    276          *********************************************************************************************************
    277          */
    278          
    279          #if (MODBUS_CFG_RTU_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    280          CPU_INT16U  MB_RTU_TxCalcCRC (MODBUS_CH *pch)
    281          {
   \                     MB_RTU_TxCalcCRC: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0001             MOVS     R1,R0
    282              CPU_INT16U      crc;
    283              CPU_INT08U      shiftctr;
    284              CPU_BOOLEAN     flag;
    285              CPU_INT16U      length;
    286              CPU_INT08U     *pblock;
    287          
    288          
    289              pblock = (CPU_INT08U *)&pch->TxFrameData[0];       /* Starting address of where the CRC data starts           */
   \   00000004   0xF201 0x364E      ADDW     R6,R1,#+846
   \   00000008   0x0035             MOVS     R5,R6
    290              length = pch->TxFrameNDataBytes + 2;               /* Include the address and function code in the CRC        */
   \   0000000A   0xF8B1 0x644E      LDRH     R6,[R1, #+1102]
   \   0000000E   0x1CB6             ADDS     R6,R6,#+2
   \   00000010   0x0034             MOVS     R4,R6
    291              crc    = 0xFFFF;                                   /* Initialize CRC to all ones.                             */
   \   00000012   0xF64F 0x76FF      MOVW     R6,#+65535
   \   00000016   0x0030             MOVS     R0,R6
    292              while (length > 0) {                               /* Account for each byte of data                           */
   \                     ??MB_RTU_TxCalcCRC_0: (+1)
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD016             BEQ.N    ??MB_RTU_TxCalcCRC_1
    293                  length--;
   \   0000001E   0x1E64             SUBS     R4,R4,#+1
    294                  crc      ^= (CPU_INT16U)*pblock++;
   \   00000020   0x782E             LDRB     R6,[R5, #+0]
   \   00000022   0x4070             EORS     R0,R6,R0
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
    295                  shiftctr  = 8;
   \   00000026   0x2608             MOVS     R6,#+8
   \   00000028   0x0032             MOVS     R2,R6
    296                  do {
    297                      flag   = (crc & 0x0001) ? DEF_TRUE : DEF_FALSE; /* Determine if the shift out of rightmost bit is 1.  */
   \                     ??MB_RTU_TxCalcCRC_2: (+1)
   \   0000002A   0xF010 0x0601      ANDS     R6,R0,#0x1
   \   0000002E   0x0033             MOVS     R3,R6
    298                      crc  >>= 1;                                /* Shift CRC to the right one bit.                         */
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x0840             LSRS     R0,R0,#+1
    299                      if (flag == DEF_TRUE) {                    /* If (bit shifted out of rightmost bit was a 1)           */
   \   00000034   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000036   0x2B01             CMP      R3,#+1
   \   00000038   0xD103             BNE.N    ??MB_RTU_TxCalcCRC_3
    300                          crc ^= MODBUS_CRC16_POLY;              /*     Exclusive OR the CRC with the generating polynomial */
   \   0000003A   0xF480 0x4020      EOR      R0,R0,#0xA000
   \   0000003E   0xF090 0x0001      EORS     R0,R0,#0x1
    301                      }
    302                      shiftctr--;
   \                     ??MB_RTU_TxCalcCRC_3: (+1)
   \   00000042   0x1E52             SUBS     R2,R2,#+1
    303                  } while (shiftctr > 0);
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD1EF             BNE.N    ??MB_RTU_TxCalcCRC_2
   \   0000004A   0xE7E5             B.N      ??MB_RTU_TxCalcCRC_0
    304              }
    305              return (crc);                                      /* Return CRC for all data in block.                       */
   \                     ??MB_RTU_TxCalcCRC_1: (+1)
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBC70             POP      {R4-R6}
   \   00000050   0x4770             BX       LR               ;; return
    306          }
    307          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   MB_RTU_RxCalcCRC
      12   MB_RTU_TxCalcCRC


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      86  MB_RTU_RxCalcCRC
      82  MB_RTU_TxCalcCRC

 
 168 bytes in section .text
 
 168 bytes of CODE memory

Errors: none
Warnings: none
