###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Aug/2017  16:25:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\bsp_os.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\bsp_os.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\BSP\OS\uCOS-III\bsp_os.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICRIUM BOARD SUPPORT SUPPORT
      4          *
      5          *                          (c) Copyright 2003-2012; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                       BOARD SUPPORT PACKAGE
     18          *                                          uCOS-III LAYER
     19          *
     20          * Filename      : bsp_os.c
     21          * Version       : V1.00
     22          * Programmer(s) : DC
     23          *
     24          *********************************************************************************************************
     25          */
     26          
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                             INCLUDE FILES
     31          *********************************************************************************************************
     32          */
     33          
     34          #define  BSP_OS_MODULE
     35          #include <bsp.h>
     36          #include <bsp_os.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          
     46          /*
     47          *********************************************************************************************************
     48          *                                           LOCAL CONSTANTS
     49          *********************************************************************************************************
     50          */
     51          
     52          
     53          /*
     54          *********************************************************************************************************
     55          *                                          LOCAL DATA TYPES
     56          *********************************************************************************************************
     57          */
     58          
     59          
     60          /*
     61          *********************************************************************************************************
     62          *                                            LOCAL TABLES
     63          *********************************************************************************************************
     64          */
     65          
     66          
     67          /*
     68          *********************************************************************************************************
     69          *                                       LOCAL GLOBAL VARIABLES
     70          *********************************************************************************************************
     71          */
     72          
     73          
     74          /*
     75          *********************************************************************************************************
     76          *                                      LOCAL FUNCTION PROTOTYPES
     77          *********************************************************************************************************
     78          */
     79          
     80          
     81          /*
     82          *********************************************************************************************************
     83          *                                     LOCAL CONFIGURATION ERRORS
     84          *********************************************************************************************************
     85          */
     86          
     87          /*
     88          *********************************************************************************************************
     89          *********************************************************************************************************
     90          **                                         GLOBAL FUNCTIONS
     91          *********************************************************************************************************
     92          *********************************************************************************************************
     93          */
     94          
     95          
     96          /*
     97          *********************************************************************************************************
     98          *********************************************************************************************************
     99          **                                     BSP OS LOCKS FUNCTIONS
    100          *********************************************************************************************************
    101          *********************************************************************************************************
    102          */
    103          
    104          /*
    105          *********************************************************************************************************
    106          *********************************************************************************************************
    107          **                                     BSP OS LOCKS FUNCTIONS
    108          *********************************************************************************************************
    109          *********************************************************************************************************
    110          */
    111          
    112          /*
    113          *********************************************************************************************************
    114          *                                      BSP_OS_SemCreate()
    115          *
    116          * Description : Creates a sempahore to lock/unlock
    117          *
    118          * Argument(s) : p_sem        Pointer to a BSP_OS_SEM structure
    119          *
    120          *               sem_val      Initial value of the semaphore.
    121          *
    122          *               p_sem_name   Pointer to the semaphore name.
    123          *
    124          * Return(s)   : DEF_OK       if the semaphore was created.
    125          *               DEF_FAIL     if the sempahore could not be created.
    126          *
    127          * Caller(s)   : Application.
    128          *
    129          * Note(s)     : none.
    130          *
    131          *********************************************************************************************************
    132          */
    133          

   \                                 In section .text, align 2, keep-with-next
    134          CPU_BOOLEAN  BSP_OS_SemCreate (BSP_OS_SEM       *p_sem,
    135                                         BSP_OS_SEM_VAL    sem_val,
    136                                         CPU_CHAR         *p_sem_name)
    137          {
   \                     BSP_OS_SemCreate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    138              OS_ERR     err;
    139          
    140          
    141              OSSemCreate((OS_SEM    *)p_sem,
    142                          (CPU_CHAR  *)p_sem_name,
    143                          (OS_SEM_CTR )sem_val,
    144                          (OS_ERR    *)&err);
   \   0000000A   0x466B             MOV      R3,SP
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x0031             MOVS     R1,R6
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       OSSemCreate
    145          
    146              if (err != OS_ERR_NONE) {
   \   00000016   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD001             BEQ.N    ??BSP_OS_SemCreate_0
    147                  return (DEF_FAIL);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xE000             B.N      ??BSP_OS_SemCreate_1
    148              }
    149          
    150              return (DEF_OK);
   \                     ??BSP_OS_SemCreate_0: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemCreate_1: (+1)
   \   00000024   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    151          }
    152          
    153          
    154          /*
    155          *********************************************************************************************************
    156          *                                     BSP_OS_SemWait()
    157          *
    158          * Description : Wait on a semaphore to become available
    159          *
    160          * Argument(s) : sem          sempahore handler
    161          *
    162          *               dly_ms       delay in miliseconds to wait on the semaphore
    163          *
    164          * Return(s)   : DEF_OK       if the semaphore was acquire
    165          *               DEF_FAIL     if the sempahore could not be acquire
    166          *
    167          * Caller(s)   : Application.
    168          *
    169          * Note(s)     : none.
    170          *********************************************************************************************************
    171          */
    172          

   \                                 In section .text, align 2, keep-with-next
    173          CPU_BOOLEAN  BSP_OS_SemWait (BSP_OS_SEM  *p_sem,
    174                                       CPU_INT32U   dly_ms)
    175          {
   \                     BSP_OS_SemWait: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    176              OS_ERR      err;
    177              CPU_INT32U  dly_ticks;
    178          
    179          
    180              dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OSCfg_TickRate_Hz);
   \   00000006   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000016   0x0006             MOVS     R6,R0
    181          
    182              OSSemPend((OS_SEM *)p_sem,
    183                        (OS_TICK )dly_ticks,
    184                        (OS_OPT  )OS_OPT_PEND_BLOCKING,
    185                        (CPU_TS  )0,
    186                        (OS_ERR *)&err);
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       OSSemPend
    187          
    188              if (err != OS_ERR_NONE) {
   \   00000028   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD001             BEQ.N    ??BSP_OS_SemWait_0
    189                 return (DEF_FAIL);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??BSP_OS_SemWait_1
    190              }
    191          
    192              return (DEF_OK);
   \                     ??BSP_OS_SemWait_0: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemWait_1: (+1)
   \   00000036   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    193          }
    194          
    195          /*
    196          *********************************************************************************************************
    197          *                                      BSP_OS_SemPost()
    198          *
    199          * Description : Post a semaphore
    200          *
    201          * Argument(s) : sem          Semaphore handler
    202          *
    203          * Return(s)   : DEF_OK     if the semaphore was posted.
    204          *               DEF_FAIL      if the sempahore could not be posted.
    205          *
    206          * Caller(s)   : Application.
    207          *
    208          * Note(s)     : none.
    209          *********************************************************************************************************
    210          */
    211          

   \                                 In section .text, align 2, keep-with-next
    212          CPU_BOOLEAN  BSP_OS_SemPost (BSP_OS_SEM *p_sem)
    213          {
   \                     BSP_OS_SemPost: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    214              OS_ERR  err;
    215          
    216          
    217              OSSemPost((OS_SEM *)p_sem,
    218                        (OS_OPT  )OS_OPT_POST_1,
    219                        (OS_ERR *)&err);
   \   00000006   0x466A             MOV      R2,SP
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       OSSemPost
    220          
    221              if (err != OS_ERR_NONE) {
   \   00000010   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD001             BEQ.N    ??BSP_OS_SemPost_0
    222                  return (DEF_FAIL);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE000             B.N      ??BSP_OS_SemPost_1
    223              }
    224          
    225              return (DEF_OK);
   \                     ??BSP_OS_SemPost_0: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemPost_1: (+1)
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    226          }
    227          
    228          
    229          /*
    230          *********************************************************************************************************
    231          *********************************************************************************************************
    232          **                                     uC/OS-III TIMER FUNCTIONS
    233          *********************************************************************************************************
    234          *********************************************************************************************************
    235          */
    236          
    237          /*
    238          *********************************************************************************************************
    239          *                                    BSP_TimeDlyMs()
    240          *
    241          * Description : This function delay the exceution for specifi amount of miliseconds
    242          *
    243          * Argument(s) : dly_ms       Delay in miliseconds
    244          *
    245          * Return(s)   : none.
    246          *
    247          * Caller(s)   : Application
    248          *
    249          * Note(s)     : none.
    250          *
    251          *********************************************************************************************************
    252          */
    253          

   \                                 In section .text, align 2, keep-with-next
    254          void   BSP_OS_TimeDlyMs (CPU_INT32U  dly_ms)
    255          {
   \                     BSP_OS_TimeDlyMs: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    256              CPU_INT16U  ms;
    257              CPU_INT16U  sec;
    258              OS_ERR      err;
    259          
    260          
    261              if (dly_ms > 10000u) {                                       /* Limit delays to 10 seconds.                        */
   \   00000006   0xF242 0x7011      MOVW     R0,#+10001
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD302             BCC.N    ??BSP_OS_TimeDlyMs_0
    262                  dly_ms = 10000u;
   \   0000000E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000012   0x0004             MOVS     R4,R0
    263              }
    264          
    265              if (dly_ms >= 1000u) {
   \                     ??BSP_OS_TimeDlyMs_0: (+1)
   \   00000014   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   00000018   0xD30C             BCC.N    ??BSP_OS_TimeDlyMs_1
    266                  ms  = dly_ms % 1000u;
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   00000022   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000026   0x0005             MOVS     R5,R0
    267                  sec = dly_ms / 1000u;
   \   00000028   0xF44F 0x707A      MOV      R0,#+1000
   \   0000002C   0xFBB4 0xF0F0      UDIV     R0,R4,R0
   \   00000030   0x0006             MOVS     R6,R0
   \   00000032   0xE003             B.N      ??BSP_OS_TimeDlyMs_2
    268              } else {
    269                  ms  = dly_ms;
   \                     ??BSP_OS_TimeDlyMs_1: (+1)
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x0005             MOVS     R5,R0
    270                  sec = 0u;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0006             MOVS     R6,R0
    271              }
    272          
    273          
    274              OSTimeDlyHMSM((CPU_INT16U) 0u,
    275                            (CPU_INT16U) 0u,
    276                            (CPU_INT16U) sec,
    277                            (CPU_INT32U) ms,
    278                            (OS_OPT    ) OS_OPT_TIME_HMSM_STRICT,
    279                            (OS_ERR   *)&err);
   \                     ??BSP_OS_TimeDlyMs_2: (+1)
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x002B             MOVS     R3,R5
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       OSTimeDlyHMSM
    280          }
   \   00000054   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     OSCfg_TickRate_Hz
    281          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   BSP_OS_SemCreate
        24   -> OSSemCreate
      16   BSP_OS_SemPost
        16   -> OSSemPost
      24   BSP_OS_SemWait
        24   -> OSSemPend
      32   BSP_OS_TimeDlyMs
        32   -> OSTimeDlyHMSM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      38  BSP_OS_SemCreate
      32  BSP_OS_SemPost
      56  BSP_OS_SemWait
      86  BSP_OS_TimeDlyMs

 
 216 bytes in section .text
 
 216 bytes of CODE memory

Errors: none
Warnings: none
