###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       19/Sep/2017  19:02:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC136B-310统计模块\Application\Library\Driver\ADC.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\Driver\ADC.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\ADC.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\ADC.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\Driver\ADC.c
      1          #include <includes.h>
      2          #include  "lpc17xx_adc.h"
      3          
      4          #define  	BATTERY_ADC 		130
      5          
      6          
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void InitAdc(void)
      9          {
   \                     InitAdc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     10          	GPIO_PinselConfig(BATTERY_ADC,3);
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x2082             MOVS     R0,#+130
   \   00000006   0x.... 0x....      BL       GPIO_PinselConfig
     11          
     12          	ADC_Init(LPC_ADC, 200000);
   \   0000000A   0x....             LDR.N    R1,??DataTable2  ;; 0x30d40
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   0000000E   0x.... 0x....      BL       ADC_Init
     13          	ADC_IntConfig(LPC_ADC,ADC_ADINTEN4,DISABLE);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   00000018   0x.... 0x....      BL       ADC_IntConfig
     14          	ADC_ChannelCmd(LPC_ADC,ADC_ADINTEN4,ENABLE);	
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   00000022   0x.... 0x....      BL       ADC_ChannelCmd
     15          
     16          //	GPIO_SetOrClearValue(BATTERY_ADC,1);
     17          //	while(1);							
     18          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     19          

   \                                 In section .bss, align 4
     20          float		BatterVal;
   \                     BatterVal:
   \   00000000                      DS8 4
     21          
     22          

   \                                 In section .text, align 2, keep-with-next
     23          uint16 ReadAdc(void)
     24          {
   \                     ReadAdc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     25          	uint16_t	adc_value = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     26          	uint32	time;
     27          //	InitAdc();
     28          	ADC_StartCmd(LPC_ADC,ADC_START_NOW);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   00000008   0x.... 0x....      BL       ADC_StartCmd
     29          	//Wait conversion complete
     30          	time = GetSysTime();
   \   0000000C   0x.... 0x....      BL       GetSysTime
   \   00000010   0x0005             MOVS     R5,R0
     31          //	while((GetSysTime() - time) < 100);
     32          	
     33          	while (!(ADC_ChannelGetStatus(LPC_ADC,ADC_ADINTEN4,ADC_DATA_DONE)))
   \                     ??ReadAdc_0: (+1)
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   00000018   0x.... 0x....      BL       ADC_ChannelGetStatus
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD10B             BNE.N    ??ReadAdc_1
     34          	{
     35          		if(GetSysTime() - time > 100)
   \   00000020   0x.... 0x....      BL       GetSysTime
   \   00000024   0x1B40             SUBS     R0,R0,R5
   \   00000026   0x2865             CMP      R0,#+101
   \   00000028   0xD3F3             BCC.N    ??ReadAdc_0
     36          		{
     37          			printfcom0("\r\n11 %d",adc_value);
   \   0000002A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   0x0021             MOVS     R1,R4
   \   0000002E   0x....             LDR.N    R0,??DataTable2_2
   \   00000030   0x.... 0x....      BL       printfcom0
     38          			return 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE00F             B.N      ??ReadAdc_2
     39          		}
     40          	}
     41          	adc_value = ADC_ChannelGetData(LPC_ADC,ADC_ADINTEN4);
   \                     ??ReadAdc_1: (+1)
   \   00000038   0x2104             MOVS     R1,#+4
   \   0000003A   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40034000
   \   0000003C   0x.... 0x....      BL       ADC_ChannelGetData
   \   00000040   0x0004             MOVS     R4,R0
     42          	//printfcom0("\r\n %d",adc_value*3000*2/4096);
     43          	adc_value = adc_value*3000*2/4096;
   \   00000042   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000044   0xF241 0x7070      MOVW     R0,#+6000
   \   00000048   0xFB00 0xF004      MUL      R0,R0,R4
   \   0000004C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000050   0xFB90 0xF4F1      SDIV     R4,R0,R1
     44          	return adc_value;
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??ReadAdc_2: (+1)
   \   00000058   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     45          }
     46          
     47          
     48          //---------------------------------------------------------------------
     49          //名    称：    void	InitAdc(void)
     50          //功    能：   	初始化ADC
     51          //入口参数：    
     52          //出口参数：    
     53          //--------------------------------------------------------------------
     54          //void	InitAdc(void)
     55          //{
     56          //	uint32	AdcCode = 0;
     57          //
     58          // 	PINSEL2 &= 0xFFFFFFDF;								//初始化端口
     59          // 	PINSEL2 |= 0x00000010;
     60          // 	PINSEL2 |= 0x00000080;
     61          //
     62          //	AdcCode = ADDR;
     63          //	
     64          //	AdcCode = 0;
     65          //	    												/* 进行ADC模块设置，其中x<<n表示第n位设置为x(若x超过一位，则向高位顺延) */
     66          //    AdcCode = (1 << 7)                 	|				/* SEL = 1 ，选择通道0 */
     67          //           (0x000000ff << 8) 			| 				/* CLKDIV = Fpclk / 1000000 - 1 ，即转换时钟为1MHz */
     68          //           (0 << 16)                    |				/* BURST = 0 ，软件控制转换操作 */
     69          //           (0 << 17)                    | 				/* CLKS = 0 ，使用11clock转换 */
     70          //           (1 << 21)                    | 				/* PDN = 1 ， 正常工作模式(非掉电转换模式) */
     71          //           (0 << 22)                    | 				/* TEST1:0 = 00 ，正常工作模式(非测试模式) */
     72          //           (1 << 24)                    | 				/* START = 1 ，直接启动ADC转换 */
     73          //           (0 << 27);									/* EDGE = 0 (CAP/MAT引脚下降沿触发ADC转换)	 */
     74          //	
     75          //	ADCR = 	AdcCode;
     76          //}
     77          
     78          //------------------------------------------------------------------------
     79          //  名  称 ：void ReadAdc(void)
     80          //  功  能 ：读ADC值
     81          // 入口参数：无
     82          // 出口参数：无
     83          //------------------------------------------------------------------------
     84          //uint16 ReadAdc(void)
     85          //{
     86          ////	uint32	i;
     87          //	uint32	AdcData;
     88          //	uint16	AdcVal;
     89          //	uint32	Time;
     90          //	
     91          //	
     92          //	Time = GetSysTime();
     93          //	ADCR = ADCR | (1 << 24);      
     94          //
     95          //	do
     96          //	{
     97          //		DelayX10ms(1);
     98          //		AdcData = ADDR;
     99          //		
    100          //		if(GetSysTime() - Time > 1*100)
    101          //		{
    102          //			break;
    103          //		}
    104          //	}while((AdcData & 0x80000000) == 0);
    105          //		
    106          //	AdcVal = ((AdcData>>6) & 0xffff03ff);
    107          //	
    108          //	return	AdcVal;
    109          //}
    110          
    111          
    112          //------------------------------------------------------------------------
    113          //  名  称 ：float GetBotVolt(void)
    114          //  功  能 ：取电池电压值
    115          // 入口参数：无
    116          // 出口参数：无
    117          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    118          int16 GetBotVolt(void)
    119          {
   \                     GetBotVolt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    120          //	int16	AdcVccVal;
    121          	uint16			AdcVal;
    122          	
    123          	AdcVal 		= ReadAdc();
   \   00000002   0x.... 0x....      BL       ReadAdc
   \   00000006   0x0004             MOVS     R4,R0
    124          
    125          //	AdcVccVal 	= (float)((float)AdcVal / 1024)*3.3*2;
    126          	
    127          	return	AdcVal;
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    128          }
    129          
    130          #define		RIGHT_DATA			0xff
    131          #define		BOT_LOW_VOL_ERR		31
    132          #define		BOT_LOW_VAL  		2800
    133          								//2800mV
    134          //------------------------------------------------------------------------
    135          //  名  称 ：uint8 JudgeEr2450Err(void)
    136          //  功  能 ：读ADC值
    137          // 入口参数：无
    138          // 出口参数：无
    139          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    140          uint8	JudgeEr2450Err(void)
    141          {
   \                     JudgeEr2450Err: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    142          	int16	Er2450Volt;
    143          	static	uint32	Time  = 0;
    144          	static	uint32	Times = 0;
    145          	static	uint8	ErrTyp = RIGHT_DATA;
    146          	
    147          	if(GetSysTime() - Time > 100)
   \   00000002   0x.... 0x....      BL       GetSysTime
   \   00000006   0x....             LDR.N    R1,??DataTable2_3
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x2865             CMP      R0,#+101
   \   0000000E   0xD31E             BCC.N    ??JudgeEr2450Err_0
    148          	{
    149          		Time	= GetSysTime();
   \   00000010   0x.... 0x....      BL       GetSysTime
   \   00000014   0x....             LDR.N    R1,??DataTable2_3
   \   00000016   0x6008             STR      R0,[R1, #+0]
    150          	
    151          		Er2450Volt = GetBotVolt();
   \   00000018   0x.... 0x....      BL       GetBotVolt
   \   0000001C   0x0004             MOVS     R4,R0
    152          
    153          		//printfcom0("\r\n battery volateg %d",Er2450Volt);
    154          
    155          		if(Er2450Volt < BOT_LOW_VAL)
   \   0000001E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000020   0xF5B4 0x6F2F      CMP      R4,#+2800
   \   00000024   0xDA05             BGE.N    ??JudgeEr2450Err_1
    156          		{
    157          			Times++;
   \   00000026   0x....             LDR.N    R0,??DataTable2_4
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable2_4
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   \   00000030   0xE002             B.N      ??JudgeEr2450Err_2
    158          		}
    159          		else
    160          		{
    161          			Times = 0;
   \                     ??JudgeEr2450Err_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable2_4
   \   00000036   0x6008             STR      R0,[R1, #+0]
    162          		}
    163          		
    164          		if(Times > 10)
   \                     ??JudgeEr2450Err_2: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable2_4
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x280B             CMP      R0,#+11
   \   0000003E   0xD303             BCC.N    ??JudgeEr2450Err_3
    165          		{
    166          			ErrTyp = BOT_LOW_VOL_ERR;
   \   00000040   0x201F             MOVS     R0,#+31
   \   00000042   0x....             LDR.N    R1,??DataTable2_5
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   \   00000046   0xE002             B.N      ??JudgeEr2450Err_0
    167          		}
    168          		else
    169          		{
    170          			ErrTyp = RIGHT_DATA;
   \                     ??JudgeEr2450Err_3: (+1)
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0x....             LDR.N    R1,??DataTable2_5
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    171          		}
    172          	}
    173          		
    174          	return	ErrTyp;
   \                     ??JudgeEr2450Err_0: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable2_5
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    175          }

   \                                 In section .bss, align 4
   \                     ??Time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Times:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??ErrTyp:
   \   00000000   0xFF               DC8 255

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00030D40         DC32     0x30d40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40034000         DC32     0x40034000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??Time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ??Times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ??ErrTyp

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\01211 %d"
   \              0x31 0x31    
   \              0x20 0x25    
   \              0x64 0x00    
    176          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GetBotVolt
         8   -> ReadAdc
       8   InitAdc
         8   -> ADC_ChannelCmd
         8   -> ADC_Init
         8   -> ADC_IntConfig
         8   -> GPIO_PinselConfig
       8   JudgeEr2450Err
         8   -> GetBotVolt
         8   -> GetSysTime
      16   ReadAdc
        16   -> ADC_ChannelGetData
        16   -> ADC_ChannelGetStatus
        16   -> ADC_StartCmd
        16   -> GetSysTime
        16   -> printfcom0


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       8  ?_0
       4  BatterVal
       1  ErrTyp
      14  GetBotVolt
      40  InitAdc
      84  JudgeEr2450Err
      90  ReadAdc
       4  Time
       4  Times

 
  12 bytes in section .bss
   1 byte  in section .data
   8 bytes in section .rodata
 252 bytes in section .text
 
 252 bytes of CODE  memory
   8 bytes of CONST memory
  13 bytes of DATA  memory

Errors: none
Warnings: 3
