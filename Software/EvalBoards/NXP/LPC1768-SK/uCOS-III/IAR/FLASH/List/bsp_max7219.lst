###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       11/Oct/2017  18:40:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\BSP\Driver\bsp_max7219.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\BSP\Driver\bsp_max7219.c -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\bsp_max7219.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\bsp_max7219.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\BSP\Driver\bsp_max7219.c
      1          /*******************************************************************************
      2           *   Filename:      bsp_max7219.c
      3           *   Revised:       $Date: 2015-12-07$
      4           *   Revision:      $
      5           *	 Writer:		Wuming Shen.
      6           *
      7           *   Description:
      8           *   Notes:
      9           *					QQ:276193028
     10           *     				E-mail:shenchangwei945@163.com
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17          * INCLUDES
     18          */
     19          #include <includes.h>
     20          #include <global.h>
     21          #include <app_lib.h>
     22          #include <string.h>
     23          #include <stdlib.h> 
     24          #include <bsp_max7219.h>
     25          
     26          #define BSP_MAX7219_MODULE_EN 1
     27          #if BSP_MAX7219_MODULE_EN > 0
     28          /*******************************************************************************
     29           * CONSTANTS
     30           */
     31          /***********************************************
     32          * 描述： max7219寄存器地址定义
     33          */
     34          #define MAX7279_NON_OPT         0x00            // 空操作寄存器
     35          #define Digit0                  0x01            // 数码管1寄存器
     36          #define Digit1                  0x02            // 数码管2寄存器
     37          #define Digit2                  0x03            // 数码管3寄存器
     38          #define Digit3                  0x04            // 数码管4寄存器
     39          #define Digit4                  0x05            // 数码管5寄存器
     40          #define Digit5                  0x06            // 数码管6寄存器
     41          #define Digit6                  0x07            // 数码管7寄存器
     42          #define Digit7                  0x08            // 数码管8寄存器
     43          /**/
     44          #define MAX7279_DECODE_MODE     0x09            // 译码模式寄存器
     45          #define MAX7279_BRIGHTNESS      0x0a            // 亮度寄存器
     46          #define MAX7279_SCAN            0x0b            // 扫描位数寄存器
     47          #define MAX7279_LOW_PWR         0x0c            // 低功耗模式寄存器
     48          #define MAX7279_DISP_TEST       0x0f            // 显示测试寄存器
     49          
     50          /***********************************************
     51          * 描述： max7219控制寄存器命令
     52          */
     53          #define MAX7279_LOW_PWR_MODE    0x00            // 低功耗方式
     54          #define MAX7279_NORMAL_MODE     0x01            // 正常操作方式
     55          #define MAX7279_DECODE_SET      0x00            // 译码设置，8位均为BCD码;对8个数都编码
     56          #define MAX7279_8_DIGIT_SCAN    0x07            // 扫描位数设置，显示8位数码管
     57          #define MAX7279_4_DIGIT_SCAN    0x03            // 扫描位数设置，显示4位数码管
     58          //#define MAX7279_BRIGHTNESS_LEVEL    0x00      // 亮度级别设置
     59          #define MAX7279_BRIGHTNESS_LEVEL 0X0A           // 亮度级别设置
     60          //#define MAX7279_BRIGHTNESS_LEVEL    0xf       // 亮度级别设置
     61          #define MAX7279_TEST_ENTER      0x01            // 显示测试模式
     62          #define MAX7279_TEST_EXIT       0x00            // 显示测试结束，恢复正常工作模式
     63          
     64          
     65          /***********************************************
     66          * 描述： 
     67          */
     68          
     69          /***********************************************
     70          * 描述： 
     71          */

   \                                 In section .bss, align 1
     72          uint8           dis_num_pos = 0;                //显示位置
   \                     dis_num_pos:
   \   00000000                      DS8 1
     73          

   \                                 In section .bss, align 4
     74          StrLedDisp    LedDispCtrl[DISPLAY_FRAME_NUM]  = {0};
   \                     LedDispCtrl:
   \   00000000                      DS8 44

   \                                 In section .data, align 4
     75          uint8_t       LedDispBuf[DISPLAY_LED_NUM]     = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \                     LedDispBuf:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    
     76          /***********************************************
     77          * 描述： redmorningcn 2017-05-22
     78          */

   \                                 In section .rodata, align 4
     79          const uint8_t LED_SEG_CODE[]    = {
   \                     LED_SEG_CODE:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 229, 229, 229, 229, 229, 229
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5         
   \   00000028   0xE5 0xE5          DC8 229, 229, 229, 229, 128, 1, 128, 229, 126, 48, 109, 121, 51, 91, 95
   \              0xE5 0xE5    
   \              0x80 0x01    
   \              0x80 0xE5    
   \              0x7E 0x30    
   \              0x6D 0x79    
   \              0x33 0x5B    
   \              0x5F         
   \   00000037   0x70 0x7F          DC8 112, 127, 123, 229, 229, 229, 229, 229, 229, 229, 119, 31, 78, 61
   \              0x7B 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0x77 0x1F    
   \              0x4E 0x3D    
   \   00000045   0x4F 0x47          DC8 79, 71, 95, 55, 48, 60, 135, 14, 229, 118, 126, 103, 254, 102, 91
   \              0x5F 0x37    
   \              0x30 0x3C    
   \              0x87 0x0E    
   \              0xE5 0x76    
   \              0x7E 0x67    
   \              0xFE 0x66    
   \              0x5B         
   \   00000054   0x0F 0x3E          DC8 15, 62, 62, 229, 55, 51, 109, 229, 229, 229, 229, 8, 229, 119, 31
   \              0x3E 0xE5    
   \              0x37 0x33    
   \              0x6D 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x08    
   \              0xE5 0x77    
   \              0x1F         
   \   00000063   0x0D 0x3D          DC8 13, 61, 79, 71, 123, 23, 48, 60, 135, 14, 229, 21, 29, 103, 115, 5
   \              0x4F 0x47    
   \              0x7B 0x17    
   \              0x30 0x3C    
   \              0x87 0x0E    
   \              0xE5 0x15    
   \              0x1D 0x67    
   \              0x73 0x05    
   \   00000073   0x5B 0x0F          DC8 91, 15, 28, 28, 211, 55, 51, 109, 229, 229, 229, 229, 229, 0
   \              0x1C 0x1C    
   \              0xD3 0x37    
   \              0x33 0x6D    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     80              //
     81              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     82              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     83          
     84          //    //空格 !    "    #    $    %    &    '    (     )    *    +    ,    -    .   /
     85          //    0x00,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0x01,0xE5,0xE5,
     86          //    // 0    1    2      3        4    5    6    7    8    9
     87          //    0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B,
     88          //    // :    ;    <    =     >   ?    @
     89          //    0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
     90          //    //  A    B   C    D     E    F    G    H   I    J    K    L    M
     91          //    0x77,0x1F,0x4E,0x3d,0x4F,0x47,0x5F,0x37,0x30,0x3c,0x87,0x0e,0xE5,
     92          //    //  N    O    P   Q    R     S    T    U    V   W    X    Y    Z
     93          //    0x76,0x7E,0x67,0xFE,0x66,0x5B,0x0F,0x3E,0x3E,0xE5,0x37,0x33,0x6D,
     94          //    // [    \    ]    ^    _    `
     95          //    0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
     96          //    // a    b   c    d     e    f    g    h    i    j     k    l    m
     97          //    0x77,0x1F,0x0D,0x3D,0x4F,0x47,0x5F,0x17,0x30,0x3c,0x87,0x0e,0xE5,
     98          //    // n    o   p    q     r    s    t    u    v   w    x    y    z
     99          //    0x15,0x1D,0x67,0x73,0x05,0x5B,0x0F,0x1C,0x1C,0xD3,0x37,0x33,0x6D,
    100          //    // {    |    }    ~       灭
    101          //    0xE5,0xE5,0xE5,0xE5,0xE5,0x00
    102              
    103              
    104              0x00,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0x80,0x01,0x80,0xE5,
    105              //       !    "    #    $    %    &    '    (     )    *    +    ,    -    .   /
    106                0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B, 
    107              // 0    1    2		3   4    5    6    7    8    9	
    108                0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
    109              // :    ;    <    =     >   ?    @
    110                0x77,0x1F,0x4E,0x3d,0x4F,0x47,0x5F,0x37,0x30,0x3c,0x87,0x0e,0xE5,
    111              //  A    B   C    D     E    F    G    H   I    J    K    L    M    
    112                0x76,0x7E,0x67,0xFE,0x66,0x5B,0x0F,0x3E,0x3E,0xE5,0x37,0x33,0x6D,
    113              //  N    O    P   Q    R     S    T    U    V   W    X    Y    Z     
    114                0xE5,0xE5,0xE5,0xE5,0x08,0xE5,
    115               // [    \    ]    ^    _    `
    116                0x77,0x1F,0x0D,0x3D,0x4F,0x47,0x7B,0x17,0x30,0x3c,0x87,0x0e,0xE5,
    117               // a    b   c    d     e    f    g    h    i    j     k    l    m
    118                0x15,0x1D,0x67,0x73,0x05,0x5B,0x0F,0x1C,0x1C,0xD3,0x37,0x33,0x6D,
    119               // n    o   p    q     r    s    t    u    v   w    x    y    z     
    120                0xE5,0xE5,0xE5,0xE5,0xE5,0x00//
    121                // {    |    }    ~       ?e
    122              
    123          };
    124          
    125          
    126          /*******************************************************************************
    127           * MACROS
    128           */
    129          /***********************************************
    130          * 描述： IO,时钟等定义
    131          */
    132          #define SPI_CS_PIN            DEF_BIT_13             /* PB.12 */
    133          #define SPI_CS_PIN_NUM        13 
    134          #define SPI_CS_GPIO_PORT      CSP_GPIO_PORT_NBR_02
    135          #define SPI_CS_GPIO_CLK       CSP_GPIO_FNCT_00
    136          
    137          #define SPI_SCK_PIN           DEF_BIT_07             /* PB.13 */
    138          #define SPI_SCK_PIN_NUM       7          
    139          #define SPI_SCK_GPIO_PORT     CSP_GPIO_PORT_NBR_00 
    140          #define SPI_SCK_GPIO_CLK      CSP_GPIO_FNCT_00
    141          
    142          #define SPI_MOSI_PIN          DEF_BIT_09             /* PB.15 */
    143          #define SPI_MOSI_PIN_NUM      9 
    144          #define SPI_MOSI_GPIO_PORT    CSP_GPIO_PORT_NBR_00
    145          #define SPI_MOSI_GPIO_CLK     CSP_GPIO_FNCT_00
    146          
    147          /***********************************************
    148          * 描述： IO操作定义
    149          */
    150          #define SPI_CS_LOW()     	  CSP_GPIO_BitClr(SPI_CS_GPIO_PORT, SPI_CS_PIN)
    151          #define SPI_CS_HIGH()    	  CSP_GPIO_BitSet(SPI_CS_GPIO_PORT, SPI_CS_PIN)
    152          
    153          #define SPI_SCK_LOW()    	  CSP_GPIO_BitClr(SPI_SCK_GPIO_PORT,SPI_SCK_PIN)
    154          #define SPI_SCK_HIGH()   	  CSP_GPIO_BitSet(SPI_SCK_GPIO_PORT,SPI_SCK_PIN)
    155          
    156          #define SPI_MOSI_LOW()        CSP_GPIO_BitClr(SPI_MOSI_GPIO_PORT,SPI_MOSI_PIN)
    157          #define SPI_MOSI_HIGH()       CSP_GPIO_BitSet(SPI_MOSI_GPIO_PORT,SPI_MOSI_PIN)
    158          
    159          /*******************************************************************************
    160           * TYPEDEFS
    161           */
    162          
    163          /*******************************************************************************
    164           * LOCAL VARIABLES
    165           */
    166          
    167          /*******************************************************************************
    168           * GLOBAL VARIABLES
    169           */
    170          
    171          /*******************************************************************************
    172           * LOCAL FUNCTIONS
    173           */
    174          
    175          /*******************************************************************************
    176           * GLOBAL FUNCTIONS
    177           */
    178          
    179          /*******************************************************************************
    180           * EXTERN VARIABLES
    181           */
    182          
    183          /*******************************************************************************
    184           * EXTERN FUNCTIONS
    185           */
    186          
    187          /*******************************************************************************
    188          * 名    称： SPI_GpioInit
    189          * 功    能： ADC GPIO初始化
    190          * 入口参数： 无
    191          * 出口参数： 无
    192          * 作　 　者： wumingshen.
    193          * 创建日期： 2015-12-07
    194          * 修    改：
    195          * 修改日期：
    196          * 备    注：
    197          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    198          static void SPI_GpioInit(void)
    199          {
   \                     SPI_GpioInit: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    200              CSP_GPIO_Cfg(SPI_CS_GPIO_PORT,
    201                           SPI_CS_PIN,
    202                           CSP_GPIO_DIR_OUT,
    203                           CSP_GPIO_FLAG_MODE_NONE,
    204                           DEF_NO,
    205                           0u,
    206                           SPI_CS_GPIO_CLK);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9002             STR      R0,[SP, #+8]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xF44F 0x5100      MOV      R1,#+8192
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       CSP_GPIO_Cfg
    207              
    208              CSP_GPIO_Cfg(SPI_SCK_GPIO_PORT,
    209                           SPI_SCK_PIN,
    210                           CSP_GPIO_DIR_OUT,
    211                           CSP_GPIO_FLAG_MODE_NONE,
    212                           DEF_NO,
    213                           0u,
    214                           SPI_SCK_GPIO_CLK);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9002             STR      R0,[SP, #+8]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2301             MOVS     R3,#+1
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x2180             MOVS     R1,#+128
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       CSP_GPIO_Cfg
    215              
    216              CSP_GPIO_Cfg(SPI_MOSI_GPIO_PORT,
    217                           SPI_MOSI_PIN ,
    218                           CSP_GPIO_DIR_OUT,
    219                           CSP_GPIO_FLAG_MODE_NONE,
    220                           DEF_NO,
    221                           0u,
    222                           SPI_MOSI_GPIO_CLK);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9002             STR      R0,[SP, #+8]
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x2301             MOVS     R3,#+1
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0xF44F 0x7100      MOV      R1,#+512
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       CSP_GPIO_Cfg
    223          
    224              SPI_CS_HIGH();
   \   0000004E   0xF44F 0x5100      MOV      R1,#+8192
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x.... 0x....      BL       CSP_GPIO_BitSet
    225          }
   \   00000058   0xBD07             POP      {R0-R2,PC}       ;; return
    226          
    227          /*******************************************************************************
    228          * 名    称： SPI_SendByte
    229          * 功    能： 通过SPI总线发送一个字节数据(同时接收一个字节数据)
    230          * 入口参数： 要写入的一个字节数据
    231          * 出口参数： 在发数据时，MISO信号线上接收的一个字节
    232          * 作　 　者： wumingshen.
    233          * 创建日期： 2015-12-07
    234          * 修    改：
    235          * 修改日期：
    236          * 备    注：
    237          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          static void SPI_SendByte(uint8_t byte)
    239          {
   \                     SPI_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    240              uint8_t i;
    241              
    242              /***********************************************
    243              * 描述： 
    244              */
    245              for(i=0;i<8;i++) {		
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
   \                     ??SPI_SendByte_0: (+1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D08             CMP      R5,#+8
   \   0000000C   0xDA20             BGE.N    ??SPI_SendByte_1
    246          		SPI_SCK_LOW();
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       CSP_GPIO_BitClr
    247          		Delay_Nus(10);
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       Delay_Nus
    248          		if(byte & 0x80)
   \   0000001C   0x0620             LSLS     R0,R4,#+24
   \   0000001E   0xD505             BPL.N    ??SPI_SendByte_2
    249          			SPI_MOSI_HIGH();
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       CSP_GPIO_BitSet
   \   0000002A   0xE004             B.N      ??SPI_SendByte_3
    250          		else
    251          			SPI_MOSI_LOW();
   \                     ??SPI_SendByte_2: (+1)
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       CSP_GPIO_BitClr
    252          		byte = byte << 1;
   \                     ??SPI_SendByte_3: (+1)
   \   00000036   0x0064             LSLS     R4,R4,#+1
    253          		Delay_Nus(5);
   \   00000038   0x2005             MOVS     R0,#+5
   \   0000003A   0x.... 0x....      BL       Delay_Nus
    254          		SPI_SCK_HIGH();
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       CSP_GPIO_BitSet
    255          		Delay_Nus(10);
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       Delay_Nus
    256          	}
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \   0000004E   0xE7DB             B.N      ??SPI_SendByte_0
    257          }	
   \                     ??SPI_SendByte_1: (+1)
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    258          
    259          /*******************************************************************************
    260          * 名    称： BSP_MAX7219Init
    261          * 功    能： MAX7219初始化
    262          * 入口参数： 无
    263          * 出口参数： 无
    264          * 作　 　者： wumingshen.
    265          * 创建日期： 2015-12-07
    266          * 修    改：
    267          * 修改日期：
    268          * 备    注：
    269          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    270          void BSP_MAX7219Init( void )
    271          {
   \                     BSP_MAX7219Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    272          	SPI_GpioInit(); 
   \   00000002   0x.... 0x....      BL       SPI_GpioInit
    273              
    274          	SPI_CS_HIGH();
   \   00000006   0xF44F 0x5100      MOV      R1,#+8192
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       CSP_GPIO_BitSet
    275          	SPI_SCK_HIGH();
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       CSP_GPIO_BitSet
    276              
    277          	Delay_Nus(30);
   \   00000018   0x201E             MOVS     R0,#+30
   \   0000001A   0x.... 0x....      BL       Delay_Nus
    278          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    279          
    280          /*******************************************************************************
    281          * 名    称： LED_SPI_SendData
    282          * 功    能： 向7219发送1Byte数据或命令
    283          * 入口参数：-addr:   数据接收地址
    284          *           -num:   要存的数据
    285          * 出口参数： 
    286          * 作　 　者： wumingshen.
    287          * 创建日期： 2015-12-08
    288          * 修    改：
    289          * 修改日期：
    290          * 备    注：
    291          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    292          void LED_SPI_SendData(uint8_t Addr,uint8_t Num)
    293          {    
   \                     LED_SPI_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    294              SPI_CS_LOW();                                  //7219允许接接收
   \   00000006   0xF44F 0x5100      MOV      R1,#+8192
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       CSP_GPIO_BitClr
    295              SPI_SendByte( Addr );                          //送地址
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       SPI_SendByte
    296              SPI_SendByte( Num );                           //送数据
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       SPI_SendByte
    297              SPI_CS_HIGH();                                 //关7219接收
   \   00000020   0xF44F 0x5100      MOV      R1,#+8192
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x.... 0x....      BL       CSP_GPIO_BitSet
    298          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    299          
    300          /*******************************************************************************
    301          * 名    称： BSP_DispWrite
    302          * 功    能： 将显示数据写入显示缓存
    303          * 入口参数： - Num         显示数据
    304          *           - Fmt         显示数据格式。如："e%",显示字母‘e’和数据Num
    305          *           - Align       对齐方式 ‘1’为左对齐，’0‘为右对齐
    306          *           - FmtType     格式化模式。’1‘前面显示，’0‘后面显示
    307          *           - DotPosition 显示点的位置
    308          *           - Cycle       闪烁次数
    309          *           - Duty    亮的时间
    310          *           - OffX100ms   灭的时间
    311          *           - Index       显示序号
    312          * 出口参数： 
    313          * 作　 　者： wumingshen.
    314          * 创建日期： 2015-12-08
    315          * 修    改：
    316          * 修改日期：
    317          * 备    注：
    318          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    319          void BSP_DispWrite( int     Num,
    320                              char    *Fmt,
    321                              char    Align,
    322                              uint8_t   FmtType,
    323                              uint8_t   DotPosition,
    324                              uint8_t   Cycle,
    325                              uint8_t   Duty,
    326                              // uint8_t   OffX100ms,
    327                              uint8_t   Index)
    328          {
   \                     BSP_DispWrite: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
    329          
    330              char    i               = 0,    Nflag   = 0,    b       = 0;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2600             MOVS     R6,#+0
    331              char    NbrCnt          = 0,    Chcnt   = 0;
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    332              char    NumPosition     = 0;
   \   00000012   0xF05F 0x0B00      MOVS     R11,#+0
    333              int     temp            = 0;
   \   00000016   0xF05F 0x0900      MOVS     R9,#+0
    334              char    flag            = 0;
   \   0000001A   0xF05F 0x0A00      MOVS     R10,#+0
    335              uint8_t   BSP_DispBuff[8] = {0};
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0xC006             STM      R0!,{R1,R2}
   \   00000026   0x3808             SUBS     R0,R0,#+8
    336              uint8_t   CharBuffer[8]   = {0};
   \   00000028   0xA804             ADD      R0,SP,#+16
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0xC006             STM      R0!,{R1,R2}
   \   00000030   0x3808             SUBS     R0,R0,#+8
    337              uint8_t   NumbBuffer[8]   = {0};
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xC006             STM      R0!,{R1,R2}
   \   0000003A   0x3808             SUBS     R0,R0,#+8
    338              uint8_t   buf[DISPLAY_LED_NUM]          = {128,128,128,128,128,128,128,128};
   \   0000003C   0xA806             ADD      R0,SP,#+24
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000042   0xC90C             LDM      R1!,{R2,R3}
   \   00000044   0xC00C             STM      R0!,{R2,R3}
   \   00000046   0x3908             SUBS     R1,R1,#+8
   \   00000048   0x3808             SUBS     R0,R0,#+8
    339                      temp            = Num;
   \   0000004A   0x9809             LDR      R0,[SP, #+36]
   \   0000004C   0x4681             MOV      R9,R0
    340          
    341              /***********************************************
    342              * 描述： 
    343              */
    344              if(Index > sizeof(LedDispCtrl)/sizeof(StrLedDisp)-1) {
   \   0000004E   0xF89D 0x0064      LDRB     R0,[SP, #+100]
   \   00000052   0x2804             CMP      R0,#+4
   \   00000054   0xF080 0x81C7      BCS.W    ??BSP_DispWrite_0
    345                  return;
    346              }
    347              
    348              LedDispCtrl[Index].Flag         = 1;
   \                     ??BSP_DispWrite_1: (+1)
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000005E   0xF89D 0x2064      LDRB     R2,[SP, #+100]
   \   00000062   0x230B             MOVS     R3,#+11
   \   00000064   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    349              LedDispCtrl[Index].Cycle        = Cycle;
   \   0000006A   0xF89D 0x005C      LDRB     R0,[SP, #+92]
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000072   0xF89D 0x2064      LDRB     R2,[SP, #+100]
   \   00000076   0x230B             MOVS     R3,#+11
   \   00000078   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   0000007C   0x7048             STRB     R0,[R1, #+1]
    350              LedDispCtrl[Index].Duty         = Duty;
   \   0000007E   0xF89D 0x0060      LDRB     R0,[SP, #+96]
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000086   0xF89D 0x2064      LDRB     R2,[SP, #+100]
   \   0000008A   0x230B             MOVS     R3,#+11
   \   0000008C   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000090   0x7088             STRB     R0,[R1, #+2]
    351              // LedDispCtrl[Index].OffX100ms     = OffX100ms;
    352          
    353              /***********************************************
    354              * 描述： 
    355              */
    356              for(i = 0;i < strlen(Fmt);i++) {
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_2: (+1)
   \   00000096   0x980A             LDR      R0,[SP, #+40]
   \   00000098   0x.... 0x....      BL       strlen
   \   0000009C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009E   0x4284             CMP      R4,R0
   \   000000A0   0xF080 0x80A3      BCS.W    ??BSP_DispWrite_3
    357                  if(Fmt[i] == '%') {
   \   000000A4   0x980A             LDR      R0,[SP, #+40]
   \   000000A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A8   0x5C20             LDRB     R0,[R4, R0]
   \   000000AA   0x2825             CMP      R0,#+37
   \   000000AC   0xF040 0x8091      BNE.W    ??BSP_DispWrite_4
    358                      if ( FmtType == 0 ) {
   \   000000B0   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD120             BNE.N    ??BSP_DispWrite_5
    359                          if(temp < 0) {
   \   000000B8   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000BC   0xD509             BPL.N    ??BSP_DispWrite_6
    360                              Nflag = 1;
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0x0005             MOVS     R5,R0
    361                              temp = abs(temp);
   \   000000C2   0x4648             MOV      R0,R9
   \   000000C4   0x.... 0x....      BL       abs
   \   000000C8   0x4681             MOV      R9,R0
    362                              NumbBuffer[0] = '-';
   \   000000CA   0x202D             MOVS     R0,#+45
   \   000000CC   0xF88D 0x0008      STRB     R0,[SP, #+8]
    363                              NbrCnt++;
   \   000000D0   0x1C7F             ADDS     R7,R7,#+1
    364                          }
    365                          
    366                          do {
    367                              NumbBuffer[NbrCnt] = temp%10 + '0';
   \                     ??BSP_DispWrite_6: (+1)
   \   000000D2   0x200A             MOVS     R0,#+10
   \   000000D4   0xFB99 0xF1F0      SDIV     R1,R9,R0
   \   000000D8   0xFB00 0x9011      MLS      R0,R0,R1,R9
   \   000000DC   0x3030             ADDS     R0,R0,#+48
   \   000000DE   0xA902             ADD      R1,SP,#+8
   \   000000E0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000E2   0x5478             STRB     R0,[R7, R1]
    368                              temp /= 10;
   \   000000E4   0x200A             MOVS     R0,#+10
   \   000000E6   0xFB99 0xF9F0      SDIV     R9,R9,R0
    369                              NbrCnt++;
   \   000000EA   0x1C7F             ADDS     R7,R7,#+1
    370                          } while((NbrCnt <= 8)&&temp);
   \   000000EC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000EE   0x2F09             CMP      R7,#+9
   \   000000F0   0xDA24             BGE.N    ??BSP_DispWrite_7
   \   000000F2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000F6   0xD1EC             BNE.N    ??BSP_DispWrite_6
   \   000000F8   0xE020             B.N      ??BSP_DispWrite_7
    371                      } else {
    372                          do {
    373                              NumbBuffer[NbrCnt] = temp%10 + '0';
   \                     ??BSP_DispWrite_5: (+1)
   \   000000FA   0x200A             MOVS     R0,#+10
   \   000000FC   0xFB99 0xF1F0      SDIV     R1,R9,R0
   \   00000100   0xFB00 0x9011      MLS      R0,R0,R1,R9
   \   00000104   0x3030             ADDS     R0,R0,#+48
   \   00000106   0xA902             ADD      R1,SP,#+8
   \   00000108   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000010A   0x5478             STRB     R0,[R7, R1]
    374                              temp /= 10;
   \   0000010C   0x200A             MOVS     R0,#+10
   \   0000010E   0xFB99 0xF9F0      SDIV     R9,R9,R0
    375                              NbrCnt++;
   \   00000112   0x1C7F             ADDS     R7,R7,#+1
    376                          } while((NbrCnt <= 8)&&temp);
   \   00000114   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000116   0x2F09             CMP      R7,#+9
   \   00000118   0xDA02             BGE.N    ??BSP_DispWrite_8
   \   0000011A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000011E   0xD1EC             BNE.N    ??BSP_DispWrite_5
    377                          
    378                          if(temp < 0) {
   \                     ??BSP_DispWrite_8: (+1)
   \   00000120   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000124   0xD50A             BPL.N    ??BSP_DispWrite_7
    379                              Nflag = 1;
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0x0005             MOVS     R5,R0
    380                              temp = abs(temp);
   \   0000012A   0x4648             MOV      R0,R9
   \   0000012C   0x.... 0x....      BL       abs
   \   00000130   0x4681             MOV      R9,R0
    381                              NumbBuffer[NbrCnt] = '-';
   \   00000132   0x202D             MOVS     R0,#+45
   \   00000134   0xA902             ADD      R1,SP,#+8
   \   00000136   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000138   0x5478             STRB     R0,[R7, R1]
    382                              NbrCnt++;
   \   0000013A   0x1C7F             ADDS     R7,R7,#+1
    383                          }
    384                      
    385                      }
    386                      
    387                      switch(i) {
   \                     ??BSP_DispWrite_7: (+1)
   \   0000013C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013E   0x2C00             CMP      R4,#+0
   \   00000140   0xD005             BEQ.N    ??BSP_DispWrite_9
   \   00000142   0x2C02             CMP      R4,#+2
   \   00000144   0xD009             BEQ.N    ??BSP_DispWrite_10
   \   00000146   0xD305             BCC.N    ??BSP_DispWrite_11
   \   00000148   0x2C03             CMP      R4,#+3
   \   0000014A   0xD009             BEQ.N    ??BSP_DispWrite_12
   \   0000014C   0xE00A             B.N      ??BSP_DispWrite_13
    388                      case 0: NumPosition = 0;break;
   \                     ??BSP_DispWrite_9: (+1)
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x4683             MOV      R11,R0
   \   00000152   0xE007             B.N      ??BSP_DispWrite_13
    389                      case 1: NumPosition = 1;break;
   \                     ??BSP_DispWrite_11: (+1)
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x4683             MOV      R11,R0
   \   00000158   0xE004             B.N      ??BSP_DispWrite_13
    390                      case 2: NumPosition = 2;break;
   \                     ??BSP_DispWrite_10: (+1)
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0x4683             MOV      R11,R0
   \   0000015E   0xE001             B.N      ??BSP_DispWrite_13
    391                      case 3: NumPosition = 3;break;
   \                     ??BSP_DispWrite_12: (+1)
   \   00000160   0x2003             MOVS     R0,#+3
   \   00000162   0x4683             MOV      R11,R0
    392                      }
    393                      
    394                      if(Nflag == 0) {
   \                     ??BSP_DispWrite_13: (+1)
   \   00000164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000166   0x2D00             CMP      R5,#+0
   \   00000168   0xD102             BNE.N    ??BSP_DispWrite_14
    395                          flag = 1;
   \   0000016A   0x2001             MOVS     R0,#+1
   \   0000016C   0x4682             MOV      R10,R0
   \   0000016E   0xE001             B.N      ??BSP_DispWrite_15
    396                      } else {
    397                          flag = 0;
   \                     ??BSP_DispWrite_14: (+1)
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x4682             MOV      R10,R0
    398                      }
    399                      
    400                      for(b = 0;b < (NbrCnt - Nflag)/2;b++) {
   \                     ??BSP_DispWrite_15: (+1)
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x0006             MOVS     R6,R0
   \                     ??BSP_DispWrite_16: (+1)
   \   00000178   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000017A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000017C   0x1B78             SUBS     R0,R7,R5
   \   0000017E   0x2102             MOVS     R1,#+2
   \   00000180   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000184   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000186   0x4286             CMP      R6,R0
   \   00000188   0xDA2D             BGE.N    ??BSP_DispWrite_17
    401                          temp = NumbBuffer[b + Nflag];
   \   0000018A   0xA802             ADD      R0,SP,#+8
   \   0000018C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000018E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000190   0x19A9             ADDS     R1,R5,R6
   \   00000192   0x5C08             LDRB     R0,[R1, R0]
   \   00000194   0x4681             MOV      R9,R0
    402                          NumbBuffer[b + Nflag] = NumbBuffer[NbrCnt -flag- Nflag - b];
   \   00000196   0xA802             ADD      R0,SP,#+8
   \   00000198   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000019A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000019E   0xEBB7 0x010A      SUBS     R1,R7,R10
   \   000001A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001A4   0x1B49             SUBS     R1,R1,R5
   \   000001A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001A8   0x1B89             SUBS     R1,R1,R6
   \   000001AA   0x5C08             LDRB     R0,[R1, R0]
   \   000001AC   0xA902             ADD      R1,SP,#+8
   \   000001AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001B2   0x19AA             ADDS     R2,R5,R6
   \   000001B4   0x5450             STRB     R0,[R2, R1]
    403                          NumbBuffer[NbrCnt - flag - Nflag - b] = temp;
   \   000001B6   0xA802             ADD      R0,SP,#+8
   \   000001B8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001BA   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000001BE   0xEBB7 0x010A      SUBS     R1,R7,R10
   \   000001C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C4   0x1B49             SUBS     R1,R1,R5
   \   000001C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C8   0x1B89             SUBS     R1,R1,R6
   \   000001CA   0xF801 0x9000      STRB     R9,[R1, R0]
    404                      }
   \   000001CE   0x1C76             ADDS     R6,R6,#+1
   \   000001D0   0xE7D2             B.N      ??BSP_DispWrite_16
    405                  } else {
    406                      CharBuffer[Chcnt] = Fmt[i];
   \                     ??BSP_DispWrite_4: (+1)
   \   000001D2   0x980A             LDR      R0,[SP, #+40]
   \   000001D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D6   0x5C20             LDRB     R0,[R4, R0]
   \   000001D8   0xA904             ADD      R1,SP,#+16
   \   000001DA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001DE   0xF808 0x0001      STRB     R0,[R8, R1]
    407                      Chcnt++;
   \   000001E2   0xF118 0x0801      ADDS     R8,R8,#+1
    408                  }
    409              }
   \                     ??BSP_DispWrite_17: (+1)
   \   000001E6   0x1C64             ADDS     R4,R4,#+1
   \   000001E8   0xE755             B.N      ??BSP_DispWrite_2
    410              /***********************************************
    411              * 描述： 
    412              */
    413              switch(NumPosition) {
   \                     ??BSP_DispWrite_3: (+1)
   \   000001EA   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001EE   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001F2   0xD007             BEQ.N    ??BSP_DispWrite_18
   \   000001F4   0xF1BB 0x0F02      CMP      R11,#+2
   \   000001F8   0xD043             BEQ.N    ??BSP_DispWrite_19
   \   000001FA   0xD31F             BCC.N    ??BSP_DispWrite_20
   \   000001FC   0xF1BB 0x0F03      CMP      R11,#+3
   \   00000200   0xD066             BEQ.N    ??BSP_DispWrite_21
   \   00000202   0xE081             B.N      ??BSP_DispWrite_22
    414              case 0: 
    415                  for(i = 0;i < 8;i++) {
   \                     ??BSP_DispWrite_18: (+1)
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_23: (+1)
   \   00000208   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000020A   0x2C08             CMP      R4,#+8
   \   0000020C   0xDA07             BGE.N    ??BSP_DispWrite_24
    416                      BSP_DispBuff[i] = NumbBuffer[i];
   \   0000020E   0xA802             ADD      R0,SP,#+8
   \   00000210   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000212   0x5C20             LDRB     R0,[R4, R0]
   \   00000214   0x4669             MOV      R1,SP
   \   00000216   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000218   0x5460             STRB     R0,[R4, R1]
    417                  }
   \   0000021A   0x1C64             ADDS     R4,R4,#+1
   \   0000021C   0xE7F4             B.N      ??BSP_DispWrite_23
    418                  for(i = NbrCnt;i < 8;i++) {
   \                     ??BSP_DispWrite_24: (+1)
   \   0000021E   0x003C             MOVS     R4,R7
   \                     ??BSP_DispWrite_25: (+1)
   \   00000220   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000222   0x2C08             CMP      R4,#+8
   \   00000224   0xDA09             BGE.N    ??BSP_DispWrite_26
    419                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   00000226   0xA804             ADD      R0,SP,#+16
   \   00000228   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000022A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000022C   0x1BE1             SUBS     R1,R4,R7
   \   0000022E   0x5C08             LDRB     R0,[R1, R0]
   \   00000230   0x4669             MOV      R1,SP
   \   00000232   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000234   0x5460             STRB     R0,[R4, R1]
    420                  }
   \   00000236   0x1C64             ADDS     R4,R4,#+1
   \   00000238   0xE7F2             B.N      ??BSP_DispWrite_25
    421                  break;
   \                     ??BSP_DispWrite_26: (+1)
   \   0000023A   0xE065             B.N      ??BSP_DispWrite_22
    422              case 1: 
    423                  BSP_DispBuff[0] = CharBuffer[0];
   \                     ??BSP_DispWrite_20: (+1)
   \   0000023C   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000240   0xF88D 0x0000      STRB     R0,[SP, #+0]
    424                  for(i = 1;i < 8;i++) {
   \   00000244   0x2001             MOVS     R0,#+1
   \   00000246   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_27: (+1)
   \   00000248   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000024A   0x2C08             CMP      R4,#+8
   \   0000024C   0xDA09             BGE.N    ??BSP_DispWrite_28
    425                      BSP_DispBuff[i] = NumbBuffer[i - 1];
   \   0000024E   0xA802             ADD      R0,SP,#+8
   \   00000250   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000252   0x1820             ADDS     R0,R4,R0
   \   00000254   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000258   0x4669             MOV      R1,SP
   \   0000025A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000025C   0x5460             STRB     R0,[R4, R1]
    426                  }
   \   0000025E   0x1C64             ADDS     R4,R4,#+1
   \   00000260   0xE7F2             B.N      ??BSP_DispWrite_27
    427                  for(i = (NbrCnt + 1);i < 8;i++) {
   \                     ??BSP_DispWrite_28: (+1)
   \   00000262   0x1C78             ADDS     R0,R7,#+1
   \   00000264   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_29: (+1)
   \   00000266   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000268   0x2C08             CMP      R4,#+8
   \   0000026A   0xDA09             BGE.N    ??BSP_DispWrite_30
    428                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   0000026C   0xA804             ADD      R0,SP,#+16
   \   0000026E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000270   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000272   0x1BE1             SUBS     R1,R4,R7
   \   00000274   0x5C08             LDRB     R0,[R1, R0]
   \   00000276   0x4669             MOV      R1,SP
   \   00000278   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000027A   0x5460             STRB     R0,[R4, R1]
    429                  }
   \   0000027C   0x1C64             ADDS     R4,R4,#+1
   \   0000027E   0xE7F2             B.N      ??BSP_DispWrite_29
    430              break;
   \                     ??BSP_DispWrite_30: (+1)
   \   00000280   0xE042             B.N      ??BSP_DispWrite_22
    431              case 2: 
    432                  BSP_DispBuff[0] = CharBuffer[0];
   \                     ??BSP_DispWrite_19: (+1)
   \   00000282   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000286   0xF88D 0x0000      STRB     R0,[SP, #+0]
    433                  BSP_DispBuff[1] = CharBuffer[1];
   \   0000028A   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   0000028E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    434                  for(i = 2;i < 8;i++) {
   \   00000292   0x2002             MOVS     R0,#+2
   \   00000294   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_31: (+1)
   \   00000296   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000298   0x2C08             CMP      R4,#+8
   \   0000029A   0xDA09             BGE.N    ??BSP_DispWrite_32
    435                      BSP_DispBuff[i] = NumbBuffer[i - 2];
   \   0000029C   0xA802             ADD      R0,SP,#+8
   \   0000029E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A0   0x1820             ADDS     R0,R4,R0
   \   000002A2   0xF810 0x0C02      LDRB     R0,[R0, #-2]
   \   000002A6   0x4669             MOV      R1,SP
   \   000002A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002AA   0x5460             STRB     R0,[R4, R1]
    436                  }
   \   000002AC   0x1C64             ADDS     R4,R4,#+1
   \   000002AE   0xE7F2             B.N      ??BSP_DispWrite_31
    437                  for(i = (NbrCnt + 2);i < 8;i++) {
   \                     ??BSP_DispWrite_32: (+1)
   \   000002B0   0x1CB8             ADDS     R0,R7,#+2
   \   000002B2   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_33: (+1)
   \   000002B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B6   0x2C08             CMP      R4,#+8
   \   000002B8   0xDA09             BGE.N    ??BSP_DispWrite_34
    438                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   000002BA   0xA804             ADD      R0,SP,#+16
   \   000002BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002BE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002C0   0x1BE1             SUBS     R1,R4,R7
   \   000002C2   0x5C08             LDRB     R0,[R1, R0]
   \   000002C4   0x4669             MOV      R1,SP
   \   000002C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002C8   0x5460             STRB     R0,[R4, R1]
    439                  }
   \   000002CA   0x1C64             ADDS     R4,R4,#+1
   \   000002CC   0xE7F2             B.N      ??BSP_DispWrite_33
    440              break;
   \                     ??BSP_DispWrite_34: (+1)
   \   000002CE   0xE01B             B.N      ??BSP_DispWrite_22
    441              case 3: 
    442                  for(i = 0;i < 3;i++) {
   \                     ??BSP_DispWrite_21: (+1)
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_35: (+1)
   \   000002D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002D6   0x2C03             CMP      R4,#+3
   \   000002D8   0xDA07             BGE.N    ??BSP_DispWrite_36
    443                      BSP_DispBuff[i] = CharBuffer[i];
   \   000002DA   0xA804             ADD      R0,SP,#+16
   \   000002DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DE   0x5C20             LDRB     R0,[R4, R0]
   \   000002E0   0x4669             MOV      R1,SP
   \   000002E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002E4   0x5460             STRB     R0,[R4, R1]
    444                  }
   \   000002E6   0x1C64             ADDS     R4,R4,#+1
   \   000002E8   0xE7F4             B.N      ??BSP_DispWrite_35
    445                  for(i = 3;i < 8;i++) {
   \                     ??BSP_DispWrite_36: (+1)
   \   000002EA   0x2003             MOVS     R0,#+3
   \   000002EC   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_37: (+1)
   \   000002EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002F0   0x2C08             CMP      R4,#+8
   \   000002F2   0xDA09             BGE.N    ??BSP_DispWrite_38
    446                      BSP_DispBuff[i] = NumbBuffer[i - 3];
   \   000002F4   0xA802             ADD      R0,SP,#+8
   \   000002F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002F8   0x1820             ADDS     R0,R4,R0
   \   000002FA   0xF810 0x0C03      LDRB     R0,[R0, #-3]
   \   000002FE   0x4669             MOV      R1,SP
   \   00000300   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000302   0x5460             STRB     R0,[R4, R1]
    447                  }
   \   00000304   0x1C64             ADDS     R4,R4,#+1
   \   00000306   0xE7F2             B.N      ??BSP_DispWrite_37
    448              }
    449              
    450              for(i = 0;i < DISPLAY_LED_NUM;i++) {
   \                     ??BSP_DispWrite_38: (+1)
   \                     ??BSP_DispWrite_22: (+1)
   \   00000308   0x2000             MOVS     R0,#+0
   \   0000030A   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_39: (+1)
   \   0000030C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000030E   0x2C08             CMP      R4,#+8
   \   00000310   0xDA05             BGE.N    ??BSP_DispWrite_40
    451                  buf[i] = 128;
   \   00000312   0x2080             MOVS     R0,#+128
   \   00000314   0xA906             ADD      R1,SP,#+24
   \   00000316   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000318   0x5460             STRB     R0,[R4, R1]
    452              }
   \   0000031A   0x1C64             ADDS     R4,R4,#+1
   \   0000031C   0xE7F6             B.N      ??BSP_DispWrite_39
    453              
    454              /***********************************************
    455              * 描述： 
    456              */
    457          	if(Align == 1) {
   \                     ??BSP_DispWrite_40: (+1)
   \   0000031E   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000322   0x2801             CMP      R0,#+1
   \   00000324   0xD114             BNE.N    ??BSP_DispWrite_41
    458                  for(i = 0;(i < (NbrCnt + Chcnt))&&(i < DISPLAY_LED_NUM);i++) {
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_42: (+1)
   \   0000032A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000032C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000032E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000332   0xEB18 0x0007      ADDS     R0,R8,R7
   \   00000336   0x4284             CMP      R4,R0
   \   00000338   0xDA27             BGE.N    ??BSP_DispWrite_43
   \   0000033A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000033C   0x2C08             CMP      R4,#+8
   \   0000033E   0xDA24             BGE.N    ??BSP_DispWrite_43
    459                      buf[i]      = BSP_DispBuff[i];
   \   00000340   0x4668             MOV      R0,SP
   \   00000342   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000344   0x5C20             LDRB     R0,[R4, R0]
   \   00000346   0xA906             ADD      R1,SP,#+24
   \   00000348   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000034A   0x5460             STRB     R0,[R4, R1]
    460                  }
   \   0000034C   0x1C64             ADDS     R4,R4,#+1
   \   0000034E   0xE7EC             B.N      ??BSP_DispWrite_42
    461              } else {
    462                  for(i = 0;(i < (NbrCnt + Chcnt))&&(i < DISPLAY_LED_NUM);i++) {
   \                     ??BSP_DispWrite_41: (+1)
   \   00000350   0x2000             MOVS     R0,#+0
   \   00000352   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_44: (+1)
   \   00000354   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000356   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000358   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000035C   0xEB18 0x0007      ADDS     R0,R8,R7
   \   00000360   0x4284             CMP      R4,R0
   \   00000362   0xDA12             BGE.N    ??BSP_DispWrite_43
   \   00000364   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000366   0x2C08             CMP      R4,#+8
   \   00000368   0xDA0F             BGE.N    ??BSP_DispWrite_43
    463                      buf[3 - i]  = BSP_DispBuff[NbrCnt + Chcnt -1 -i];
   \   0000036A   0x4668             MOV      R0,SP
   \   0000036C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000036E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000372   0xEB18 0x0107      ADDS     R1,R8,R7
   \   00000376   0x1E49             SUBS     R1,R1,#+1
   \   00000378   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000037A   0x1B09             SUBS     R1,R1,R4
   \   0000037C   0x5C08             LDRB     R0,[R1, R0]
   \   0000037E   0xA906             ADD      R1,SP,#+24
   \   00000380   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000382   0x1B09             SUBS     R1,R1,R4
   \   00000384   0x70C8             STRB     R0,[R1, #+3]
    464                  }
   \   00000386   0x1C64             ADDS     R4,R4,#+1
   \   00000388   0xE7E4             B.N      ??BSP_DispWrite_44
    465              }
    466              
    467              /***********************************************
    468              * 描述： 
    469              */
    470              for(i = 0;i < DISPLAY_LED_NUM;i++) {
   \                     ??BSP_DispWrite_43: (+1)
   \   0000038A   0x2000             MOVS     R0,#+0
   \   0000038C   0x0004             MOVS     R4,R0
   \                     ??BSP_DispWrite_45: (+1)
   \   0000038E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000390   0x2C08             CMP      R4,#+8
   \   00000392   0xDA28             BGE.N    ??BSP_DispWrite_46
    471                  if(DotPosition & (0x01 << (3 - i))) {
   \   00000394   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   00000398   0x2101             MOVS     R1,#+1
   \   0000039A   0xF1D4 0x0203      RSBS     R2,R4,#+3
   \   0000039E   0x4091             LSLS     R1,R1,R2
   \   000003A0   0x4208             TST      R0,R1
   \   000003A2   0xD010             BEQ.N    ??BSP_DispWrite_47
    472                      LedDispCtrl[Index].Code[i] = LED_SEG_CODE[buf[i]]|0x80;
   \   000003A4   0x....             LDR.N    R0,??DataTable7_1
   \   000003A6   0xF89D 0x1064      LDRB     R1,[SP, #+100]
   \   000003AA   0x220B             MOVS     R2,#+11
   \   000003AC   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000003B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003B2   0x1820             ADDS     R0,R4,R0
   \   000003B4   0x....             LDR.N    R1,??DataTable7_2
   \   000003B6   0xAA06             ADD      R2,SP,#+24
   \   000003B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003BA   0x5CA2             LDRB     R2,[R4, R2]
   \   000003BC   0x5C51             LDRB     R1,[R2, R1]
   \   000003BE   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   000003C2   0x70C1             STRB     R1,[R0, #+3]
   \   000003C4   0xE00D             B.N      ??BSP_DispWrite_48
    473                  } else {
    474                      LedDispCtrl[Index].Code[i] = LED_SEG_CODE[buf[i]];
   \                     ??BSP_DispWrite_47: (+1)
   \   000003C6   0x....             LDR.N    R0,??DataTable7_1
   \   000003C8   0xF89D 0x1064      LDRB     R1,[SP, #+100]
   \   000003CC   0x220B             MOVS     R2,#+11
   \   000003CE   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000003D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003D4   0x1820             ADDS     R0,R4,R0
   \   000003D6   0x....             LDR.N    R1,??DataTable7_2
   \   000003D8   0xAA06             ADD      R2,SP,#+24
   \   000003DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003DC   0x5CA2             LDRB     R2,[R4, R2]
   \   000003DE   0x5C51             LDRB     R1,[R2, R1]
   \   000003E0   0x70C1             STRB     R1,[R0, #+3]
    475                  }
    476              }
   \                     ??BSP_DispWrite_48: (+1)
   \   000003E2   0x1C64             ADDS     R4,R4,#+1
   \   000003E4   0xE7D3             B.N      ??BSP_DispWrite_45
    477          }
   \                     ??BSP_DispWrite_46: (+1)
   \                     ??BSP_DispWrite_0: (+1)
   \   000003E6   0xB00D             ADD      SP,SP,#+52
   \   000003E8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    478          
    479          /*******************************************************************************
    480          * 名    称： BSP_Disp
    481          * 功    能： 根据序号，给7219送相应的数据
    482          * 入口参数： 
    483          * 出口参数： 
    484          * 作　 　者： wumingshen.
    485          * 创建日期： 2015-12-08
    486          * 修    改：
    487          * 修改日期：
    488          * 备    注：
    489          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    490          void WIN_DispMsg(const char *msg)
    491          {
   \                     WIN_DispMsg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    492          
    493              static  uint8   k = 0;
    494              
    495              
    496              while(k < DISPLAY_FRAME_NUM){
   \                     ??WIN_DispMsg_0: (+1)
   \   00000004   0x....             LDR.N    R0,??DataTable7_3
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2804             CMP      R0,#+4
   \   0000000A   0xDA0E             BGE.N    ??WIN_DispMsg_1
    497                  if(LedDispCtrl[k].Flag == 0){
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1
   \   0000000E   0x....             LDR.N    R1,??DataTable7_3
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0x220B             MOVS     R2,#+11
   \   00000014   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD005             BEQ.N    ??WIN_DispMsg_1
    498                      break;
    499                  }
    500                  k++;
   \                     ??WIN_DispMsg_2: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable7_3
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable7_3
   \   00000026   0x7008             STRB     R0,[R1, #+0]
   \   00000028   0xE7EC             B.N      ??WIN_DispMsg_0
    501              }
    502              
    503              if(k == DISPLAY_FRAME_NUM)          //没有空数据，直接退出
   \                     ??WIN_DispMsg_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable7_3
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2804             CMP      R0,#+4
   \   00000030   0xD103             BNE.N    ??WIN_DispMsg_3
    504              {   
    505                  k = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable7_3
   \   00000036   0x7008             STRB     R0,[R1, #+0]
    506                  return; 
   \   00000038   0xE071             B.N      ??WIN_DispMsg_4
    507              }
    508              
    509              char i,j;
    510              LedDispCtrl[k].Flag         = 1;
   \                     ??WIN_DispMsg_3: (+1)
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable7_1
   \   0000003E   0x....             LDR.N    R2,??DataTable7_3
   \   00000040   0x7812             LDRB     R2,[R2, #+0]
   \   00000042   0x230B             MOVS     R3,#+11
   \   00000044   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    511              LedDispCtrl[k].Cycle        = 1;
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x....             LDR.N    R1,??DataTable7_1
   \   0000004E   0x....             LDR.N    R2,??DataTable7_3
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x230B             MOVS     R3,#+11
   \   00000054   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000058   0x7048             STRB     R0,[R1, #+1]
    512              LedDispCtrl[k].Duty         = 20;
   \   0000005A   0x2014             MOVS     R0,#+20
   \   0000005C   0x....             LDR.N    R1,??DataTable7_1
   \   0000005E   0x....             LDR.N    R2,??DataTable7_3
   \   00000060   0x7812             LDRB     R2,[R2, #+0]
   \   00000062   0x230B             MOVS     R3,#+11
   \   00000064   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   00000068   0x7088             STRB     R0,[R1, #+2]
    513              
    514              /***********************************************
    515              * 描述：补齐8位数据,如果字节8，在前面补空格 
    516              * redmorningcn 
    517              * 2017-05-24
    518              */
    519              
    520              //对小数点处理。2017-05-24
    521              uint8   datalen = strlen(msg);
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x.... 0x....      BL       strlen
   \   00000070   0x0007             MOVS     R7,R0
    522              for(i = 0;i < strlen(msg);i++) {
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x0005             MOVS     R5,R0
   \                     ??WIN_DispMsg_5: (+1)
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       strlen
   \   0000007C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007E   0x4285             CMP      R5,R0
   \   00000080   0xD20C             BCS.N    ??WIN_DispMsg_6
    523                  if(msg[i+1] == '.' && msg[i] != '.'){
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0x1928             ADDS     R0,R5,R4
   \   00000086   0x7840             LDRB     R0,[R0, #+1]
   \   00000088   0x282E             CMP      R0,#+46
   \   0000008A   0xD105             BNE.N    ??WIN_DispMsg_7
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x5D28             LDRB     R0,[R5, R4]
   \   00000090   0x282E             CMP      R0,#+46
   \   00000092   0xD001             BEQ.N    ??WIN_DispMsg_7
    524                      datalen--;
   \   00000094   0x1E7F             SUBS     R7,R7,#+1
    525                      i++;
   \   00000096   0x1C6D             ADDS     R5,R5,#+1
    526                  }
    527              }
   \                     ??WIN_DispMsg_7: (+1)
   \   00000098   0x1C6D             ADDS     R5,R5,#+1
   \   0000009A   0xE7EC             B.N      ??WIN_DispMsg_5
    528              
    529              for(i = 0,j = 0;j < DISPLAY_LED_NUM;j++) {
   \                     ??WIN_DispMsg_6: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x0005             MOVS     R5,R0
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x0006             MOVS     R6,R0
   \                     ??WIN_DispMsg_8: (+1)
   \   000000A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A6   0x2E08             CMP      R6,#+8
   \   000000A8   0xDA39             BGE.N    ??WIN_DispMsg_9
    530                  if(datalen < DISPLAY_LED_NUM)
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x2F08             CMP      R7,#+8
   \   000000AE   0xDA0C             BGE.N    ??WIN_DispMsg_10
    531                  {
    532                      LedDispCtrl[k].Code[j] = LED_SEG_CODE[0];
   \   000000B0   0x....             LDR.N    R0,??DataTable7_1
   \   000000B2   0x....             LDR.N    R1,??DataTable7_3
   \   000000B4   0x7809             LDRB     R1,[R1, #+0]
   \   000000B6   0x220B             MOVS     R2,#+11
   \   000000B8   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000BC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000BE   0x1830             ADDS     R0,R6,R0
   \   000000C0   0x....             LDR.N    R1,??DataTable7_2
   \   000000C2   0x7809             LDRB     R1,[R1, #+0]
   \   000000C4   0x70C1             STRB     R1,[R0, #+3]
    533                      datalen++;
   \   000000C6   0x1C7F             ADDS     R7,R7,#+1
   \   000000C8   0xE027             B.N      ??WIN_DispMsg_11
    534                  } else{
    535                      if(msg[i+1] == '.' && msg[i] != '.') {
   \                     ??WIN_DispMsg_10: (+1)
   \   000000CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CC   0x1928             ADDS     R0,R5,R4
   \   000000CE   0x7840             LDRB     R0,[R0, #+1]
   \   000000D0   0x282E             CMP      R0,#+46
   \   000000D2   0xD114             BNE.N    ??WIN_DispMsg_12
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x5D28             LDRB     R0,[R5, R4]
   \   000000D8   0x282E             CMP      R0,#+46
   \   000000DA   0xD010             BEQ.N    ??WIN_DispMsg_12
    536                          LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]] | 0x80;
   \   000000DC   0x....             LDR.N    R0,??DataTable7_1
   \   000000DE   0x....             LDR.N    R1,??DataTable7_3
   \   000000E0   0x7809             LDRB     R1,[R1, #+0]
   \   000000E2   0x220B             MOVS     R2,#+11
   \   000000E4   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000EA   0x1830             ADDS     R0,R6,R0
   \   000000EC   0x....             LDR.N    R1,??DataTable7_2
   \   000000EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F0   0x5D2A             LDRB     R2,[R5, R4]
   \   000000F2   0x5C51             LDRB     R1,[R2, R1]
   \   000000F4   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   000000F8   0x70C1             STRB     R1,[R0, #+3]
    537                          i++;
   \   000000FA   0x1C6D             ADDS     R5,R5,#+1
   \   000000FC   0xE00C             B.N      ??WIN_DispMsg_13
    538                      } else {
    539                          LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]];
   \                     ??WIN_DispMsg_12: (+1)
   \   000000FE   0x....             LDR.N    R0,??DataTable7_1
   \   00000100   0x....             LDR.N    R1,??DataTable7_3
   \   00000102   0x7809             LDRB     R1,[R1, #+0]
   \   00000104   0x220B             MOVS     R2,#+11
   \   00000106   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000010A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000010C   0x1830             ADDS     R0,R6,R0
   \   0000010E   0x....             LDR.N    R1,??DataTable7_2
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x5D2A             LDRB     R2,[R5, R4]
   \   00000114   0x5C51             LDRB     R1,[R2, R1]
   \   00000116   0x70C1             STRB     R1,[R0, #+3]
    540                      }
    541                      i++;
   \                     ??WIN_DispMsg_13: (+1)
   \   00000118   0x1C6D             ADDS     R5,R5,#+1
    542                  }
    543              }
   \                     ??WIN_DispMsg_11: (+1)
   \   0000011A   0x1C76             ADDS     R6,R6,#+1
   \   0000011C   0xE7C2             B.N      ??WIN_DispMsg_8
    544              
    545          //    /***********************************************
    546          //    * 描述： 
    547          //    */
    548          //    for(i = 0,j = 0;j < DISPLAY_LED_NUM;j++,i++) {
    549          //        if(msg[i] == '.') {
    550          //            i++;
    551          //            LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]] | 0x80;
    552          //        } else {
    553          //            LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]];
    554          //        }
    555          //    }    
    556              
    557              //BSP_DispSetBrightness(Ctrl.Para.dat.DispLevel);
    558              //BSP_DispEvtProcess();    
    559          }
   \                     ??WIN_DispMsg_9: (+1)
   \                     ??WIN_DispMsg_4: (+1)
   \   0000011E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 1
   \                     ??k:
   \   00000000                      DS8 1
    560          
    561          /*******************************************************************************
    562          * 名    称： BSP_Disp
    563          * 功    能： 根据序号，给7219送相应的数据
    564          * 入口参数： 
    565          * 出口参数： 
    566          * 作　 　者： wumingshen.
    567          * 创建日期： 2015-12-08
    568          * 修    改：
    569          * 修改日期：
    570          * 备    注：
    571          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    572          void BSP_Disp(uint8_t Index)
    573          {
   \                     BSP_Disp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    574              uint8_t i;
    575              if(Index > sizeof(LedDispCtrl)/sizeof(StrLedDisp)-1) {
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xD213             BCS.N    ??BSP_Disp_0
    576                  return;
    577              }
    578              //BSP_DispInit();
    579              for(i = 0; i<DISPLAY_LED_NUM ; i++) {
   \                     ??BSP_Disp_1: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0005             MOVS     R5,R0
   \                     ??BSP_Disp_2: (+1)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D08             CMP      R5,#+8
   \   00000012   0xDA0E             BGE.N    ??BSP_Disp_3
    580                  LED_SPI_SendData(LedDispBuf[i],LedDispCtrl[Index].Code[i]);
   \   00000014   0x....             LDR.N    R0,??DataTable7_1
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x210B             MOVS     R1,#+11
   \   0000001A   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x1828             ADDS     R0,R5,R0
   \   00000022   0x78C1             LDRB     R1,[R0, #+3]
   \   00000024   0x....             LDR.N    R0,??DataTable7_4
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x5C28             LDRB     R0,[R5, R0]
   \   0000002A   0x.... 0x....      BL       LED_SPI_SendData
    581              }
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xE7ED             B.N      ??BSP_Disp_2
    582          }
   \                     ??BSP_Disp_3: (+1)
   \                     ??BSP_Disp_0: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    583          
    584          /*******************************************************************************
    585          * 名    称： BSP_DispOff
    586          * 功    能： 通过给数码管送消隐段码来清除显示
    587          * 入口参数： 
    588          * 出口参数： 
    589          * 作　 　者： wumingshen.
    590          * 创建日期： 2015-12-08
    591          * 修    改：
    592          * 修改日期：
    593          * 备    注：
    594          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    595          void BSP_DispOff(void)
    596          {
   \                     BSP_DispOff: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    597              uint8_t i;
    598              BSP_DispInit();
   \   00000002   0x.... 0x....      BL       BSP_DispInit
    599              for(i = 0; i<DISPLAY_LED_NUM ; i++) {
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0004             MOVS     R4,R0
   \                     ??BSP_DispOff_0: (+1)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C08             CMP      R4,#+8
   \   0000000E   0xDA07             BGE.N    ??BSP_DispOff_1
    600                  LED_SPI_SendData(LedDispBuf[i],0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR.N    R0,??DataTable7_4
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x5C20             LDRB     R0,[R4, R0]
   \   00000018   0x.... 0x....      BL       LED_SPI_SendData
    601              }
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \   0000001E   0xE7F4             B.N      ??BSP_DispOff_0
    602          }
   \                     ??BSP_DispOff_1: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    603          
    604          
    605          /*******************************************************************************
    606          * 名    称： BSP_DispEvtProcess
    607          * 功    能： 用数码管将整型数据显示出来
    608          * 入口参数： 
    609          * 出口参数： 有数据显示，返回1，无数据显示，返回0
    610          * 作　 　者： redmorningcn.
    611          * 创建日期： 2015-12-08
    612          * 修    改：
    613          * 修改日期：
    614          * 备    注：
    615          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    616          uint8 BSP_DispEvtProcess(void)
    617          {    
   \                     BSP_DispEvtProcess: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    618              uint8   i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    619              
    620              while(i < DISPLAY_FRAME_NUM)                          //FIFO显示
   \                     ??BSP_DispEvtProcess_0: (+1)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xDA2E             BGE.N    ??BSP_DispEvtProcess_1
    621              {
    622                  //标示，可以赋值，有数据显示
    623                  if(LedDispCtrl[ dis_num_pos % DISPLAY_FRAME_NUM ].Flag != 0 ) {
   \   0000000A   0x....             LDR.N    R0,??DataTable7_1
   \   0000000C   0x....             LDR.N    R1,??DataTable7_5
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0x2204             MOVS     R2,#+4
   \   00000012   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000016   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   0000001A   0x210B             MOVS     R1,#+11
   \   0000001C   0xFB01 0x0003      MLA      R0,R1,R3,R0
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD019             BEQ.N    ??BSP_DispEvtProcess_2
    624                      LedDispCtrl[dis_num_pos % DISPLAY_FRAME_NUM ].Flag = 0;    //可以重新赋值
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable7_1
   \   0000002A   0x....             LDR.N    R2,??DataTable7_5
   \   0000002C   0x7812             LDRB     R2,[R2, #+0]
   \   0000002E   0x2304             MOVS     R3,#+4
   \   00000030   0xFB92 0xF5F3      SDIV     R5,R2,R3
   \   00000034   0xFB05 0x2513      MLS      R5,R5,R3,R2
   \   00000038   0x220B             MOVS     R2,#+11
   \   0000003A   0xFB02 0x1105      MLA      R1,R2,R5,R1
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    625                      BSP_Disp(   dis_num_pos % DISPLAY_FRAME_NUM );
   \   00000040   0x....             LDR.N    R0,??DataTable7_5
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x2104             MOVS     R1,#+4
   \   00000046   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000004A   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000004E   0x0010             MOVS     R0,R2
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x.... 0x....      BL       BSP_Disp
    626                                  
    627                      return 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0xE007             B.N      ??BSP_DispEvtProcess_3
    628                  }
    629                  
    630                  dis_num_pos++;
   \                     ??BSP_DispEvtProcess_2: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable7_5
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0x....             LDR.N    R1,??DataTable7_5
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    631                  i++;
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \   00000066   0xE7CD             B.N      ??BSP_DispEvtProcess_0
    632              }
    633              return 0;
   \                     ??BSP_DispEvtProcess_1: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \                     ??BSP_DispEvtProcess_3: (+1)
   \   0000006A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    634          }
    635          
    636          /*******************************************************************************
    637          * 名    称： BSP_DispClr
    638          * 功    能： 清除显示缓冲区,包括显示标志位和显示内容
    639          * 入口参数： 第几个显示缓冲区
    640          * 出口参数： 
    641          * 作　 　者： wumingshen.
    642          * 创建日期： 2015-12-08
    643          * 修    改：
    644          * 修改日期：
    645          * 备    注：
    646          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    647          void BSP_DispClr(uint8_t order)
    648          {
    649              if( order < sizeof(LedDispCtrl) / sizeof(StrLedDisp) ) {
   \                     BSP_DispClr: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2804             CMP      R0,#+4
   \   00000004   0xD206             BCS.N    ??BSP_DispClr_0
    650                  LedDispCtrl[order].Flag = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR.N    R2,??DataTable7_1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x230B             MOVS     R3,#+11
   \   0000000E   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000012   0x7011             STRB     R1,[R2, #+0]
    651              }
    652          }
   \                     ??BSP_DispClr_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    653          
    654          /*******************************************************************************
    655          * 名    称： BSP_DispClrAll
    656          * 功    能： 清除所有显示缓冲区内容
    657          * 入口参数： 
    658          * 出口参数： 
    659          * 作　 　者： wumingshen.
    660          * 创建日期： 2015-12-08
    661          * 修    改：
    662          * 修改日期：
    663          * 备    注：
    664          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    665          void BSP_DispClrAll(void)
    666          {
    667              uint8_t i;
    668              
    669              //显示位置清零
    670              dis_num_pos = 0;
   \                     BSP_DispClrAll: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R2,??DataTable7_5
   \   00000004   0x7011             STRB     R1,[R2, #+0]
    671              
    672              for(i=0;i<sizeof(LedDispCtrl)/sizeof(StrLedDisp);i++) {
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x0008             MOVS     R0,R1
   \                     ??BSP_DispClrAll_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2804             CMP      R0,#+4
   \   0000000E   0xD208             BCS.N    ??BSP_DispClrAll_1
    673                  LedDispCtrl[i].Flag = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR.N    R2,??DataTable7_1
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x230B             MOVS     R3,#+11
   \   00000018   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000001C   0x7011             STRB     R1,[R2, #+0]
    674              }
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0xE7F3             B.N      ??BSP_DispClrAll_0
    675          }
   \                     ??BSP_DispClrAll_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    676          
    677          /*******************************************************************************
    678          * 名    称： BSP_DispSetBrightness
    679          * 功    能： 7219设置亮度
    680          * 入口参数： 
    681          * 出口参数： 
    682          * 作　 　者： wumingshen.
    683          * 创建日期： 2015-12-12
    684          * 修    改：
    685          * 修改日期：
    686          * 备    注：
    687          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    688          void BSP_DispSetBrightness ( uint8_t bl )
    689          {    
   \                     BSP_DispSetBrightness: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    690              static uint8_t   last;
    691              
    692              if ( bl > 15 )
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C10             CMP      R4,#+16
   \   00000008   0xDB01             BLT.N    ??BSP_DispSetBrightness_0
    693                  bl  = 15;
   \   0000000A   0x200F             MOVS     R0,#+15
   \   0000000C   0x0004             MOVS     R4,R0
    694              if ( last != bl ) {
   \                     ??BSP_DispSetBrightness_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable7_6
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x42A0             CMP      R0,R4
   \   00000016   0xD006             BEQ.N    ??BSP_DispSetBrightness_1
    695                  last    = bl;
   \   00000018   0x....             LDR.N    R0,??DataTable7_6
   \   0000001A   0x7004             STRB     R4,[R0, #+0]
    696                  LED_SPI_SendData( MAX7279_BRIGHTNESS,bl );      // 设置亮度
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       LED_SPI_SendData
    697              }
    698          }
   \                     ??BSP_DispSetBrightness_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??last:
   \   00000000                      DS8 1
    699          
    700          /*******************************************************************************
    701          * 名    称： BSP_DispInit
    702          * 功    能： 7219初始化
    703          * 入口参数： 
    704          * 出口参数： 
    705          * 作　 　者： wumingshen.
    706          * 创建日期： 2015-12-08
    707          * 修    改：
    708          * 修改日期：
    709          * 备    注：
    710          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    711          void BSP_DispInit (void)
    712          {
   \                     BSP_DispInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    713              BSP_MAX7219Init();                                              // 初始化硬件
   \   00000002   0x.... 0x....      BL       BSP_MAX7219Init
    714              
    715              LED_SPI_SendData( MAX7279_DISP_TEST,0x00 );                         // 设置工作模式
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x200F             MOVS     R0,#+15
   \   0000000A   0x.... 0x....      BL       LED_SPI_SendData
    716              LED_SPI_SendData( MAX7279_SCAN,MAX7279_8_DIGIT_SCAN );              // 设置扫描界限
   \   0000000E   0x2107             MOVS     R1,#+7
   \   00000010   0x200B             MOVS     R0,#+11
   \   00000012   0x.... 0x....      BL       LED_SPI_SendData
    717              LED_SPI_SendData( MAX7279_DECODE_MODE,MAX7279_DECODE_SET );         // 设置译码模式
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2009             MOVS     R0,#+9
   \   0000001A   0x.... 0x....      BL       LED_SPI_SendData
    718              LED_SPI_SendData( MAX7279_BRIGHTNESS,MAX7279_BRIGHTNESS_LEVEL );    // 设置亮度
   \   0000001E   0x210A             MOVS     R1,#+10
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       LED_SPI_SendData
    719              LED_SPI_SendData( MAX7279_LOW_PWR,MAX7279_NORMAL_MODE );            // 设置为正常工作模式
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0x.... 0x....      BL       LED_SPI_SendData
    720              
    721              BSP_DispClrAll();                                               // 清屏
   \   0000002E   0x.... 0x....      BL       BSP_DispClrAll
    722          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     LedDispCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     LED_SEG_CODE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ??k

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     LedDispBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     dis_num_pos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ??last

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x80 0x80          DC8 128, 128, 128, 128, 128, 128, 128, 128
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
    723          
    724          /*******************************************************************************
    725          * 				                end of file                                    *
    726          *******************************************************************************/
    727          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BSP_Disp
        16   -> LED_SPI_SendData
       0   BSP_DispClr
       0   BSP_DispClrAll
      16   BSP_DispEvtProcess
        16   -> BSP_Disp
       8   BSP_DispInit
         8   -> BSP_DispClrAll
         8   -> BSP_MAX7219Init
         8   -> LED_SPI_SendData
       8   BSP_DispOff
         8   -> BSP_DispInit
         8   -> LED_SPI_SendData
       8   BSP_DispSetBrightness
         8   -> LED_SPI_SendData
      88   BSP_DispWrite
        88   -> abs
        88   -> strlen
       8   BSP_MAX7219Init
         8   -> CSP_GPIO_BitSet
         8   -> Delay_Nus
         8   -> SPI_GpioInit
      16   LED_SPI_SendData
        16   -> CSP_GPIO_BitClr
        16   -> CSP_GPIO_BitSet
        16   -> SPI_SendByte
      16   SPI_GpioInit
        16   -> CSP_GPIO_BitSet
        16   -> CSP_GPIO_Cfg
      16   SPI_SendByte
        16   -> CSP_GPIO_BitClr
        16   -> CSP_GPIO_BitSet
        16   -> Delay_Nus
      24   WIN_DispMsg
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
      52  BSP_Disp
      22  BSP_DispClr
      36  BSP_DispClrAll
     108  BSP_DispEvtProcess
      52  BSP_DispInit
      34  BSP_DispOff
      40  BSP_DispSetBrightness
    1004  BSP_DispWrite
      32  BSP_MAX7219Init
     132  LED_SEG_CODE
      44  LED_SPI_SendData
       8  LedDispBuf
      44  LedDispCtrl
      90  SPI_GpioInit
      82  SPI_SendByte
     288  WIN_DispMsg
       1  dis_num_pos
       1  k
       1  last

 
    47 bytes in section .bss
     8 bytes in section .data
   164 bytes in section .rodata
 1 912 bytes in section .text
 
 1 912 bytes of CODE  memory
   164 bytes of CONST memory
    55 bytes of DATA  memory

Errors: none
Warnings: none
