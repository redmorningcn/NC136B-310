###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       10/Aug/2017  10:56:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310 统计模块\Software\CSB\source\lpc17xx_wdt.c
#    Command line =  
#        "F:\iar\NC136B-310 统计模块\Software\CSB\source\lpc17xx_wdt.c" -lCN
#        "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List"
#        --diag_suppress Pa050 -o "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\" -I
#        "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\"
#        -I "F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\"
#        -I "F:\iar\NC136B-310 统计模块\Application\Library\csnr_package_deal\"
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\lpc17xx_wdt.lst
#    Object file  =  
#        F:\iar\NC136B-310
#        统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\lpc17xx_wdt.o
#
###############################################################################

F:\iar\NC136B-310 统计模块\Software\CSB\source\lpc17xx_wdt.c
      1          /**********************************************************************
      2          * $Id$		lpc17xx_wdt.c			2010-05-21
      3          *//**
      4          * @file		lpc17xx_wdt.c
      5          * @brief	Contains all functions support for WDT firmware library
      6          * 			on LPC17xx
      7          * @version	2.0
      8          * @date		21. May. 2010
      9          * @author	NXP MCU SW Application Team
     10          *
     11          * Copyright(C) 2010, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          * Permission to use, copy, modify, and distribute this software and its
     26          * documentation is hereby granted, under NXP Semiconductors'
     27          * relevant copyright in the software, without fee, provided that it
     28          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     29          * copyright, permission, and disclaimer notice must appear in all copies of
     30          * this code.
     31          **********************************************************************/
     32          
     33          /* Peripheral group ----------------------------------------------------------- */
     34          /** @addtogroup WDT
     35           * @{
     36           */
     37          
     38          /* Includes ------------------------------------------------------------------- */
     39          #include "lpc17xx_wdt.h"
     40          #include "lpc17xx_clkpwr.h"
     41          #include "lpc17xx_pinsel.h"
     42          
     43          
     44          /* If this source file built with example, the LPC17xx FW library configuration
     45           * file in each example directory ("lpc17xx_libcfg.h") must be included,
     46           * otherwise the default FW library configuration file must be included instead
     47           */
     48          #ifdef __BUILD_WITH_EXAMPLE__
     49          #include "lpc17xx_libcfg.h"
     50          #else
     51          #include "lpc17xx_libcfg_default.h"
     52          #endif /* __BUILD_WITH_EXAMPLE__ */
     53          
     54          
     55          #ifdef _WDT
     56          
     57          /* Private Functions ---------------------------------------------------------- */
     58          
     59          static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout);
     60          
     61          /********************************************************************//**
     62           * @brief 		Set WDT time out value and WDT mode
     63           * @param[in]	clk_source select Clock source for WDT device
     64           * @param[in]	timeout value of time-out for WDT (us)
     65           * @return		None
     66           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     67          static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
     68          {
   \                     WDT_SetTimeOut: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     69          
     70          	uint32_t pclk_wdt = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     71          	uint32_t tempval = 0;
   \   00000008   0x2700             MOVS     R7,#+0
     72          
     73          	switch ((WDT_CLK_OPT) clk_source)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD003             BEQ.N    ??WDT_SetTimeOut_0
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xD060             BEQ.N    ??WDT_SetTimeOut_1
   \   00000014   0xD314             BCC.N    ??WDT_SetTimeOut_2
   \   00000016   0xE073             B.N      ??WDT_SetTimeOut_3
     74              {
     75              case WDT_CLKSRC_IRC:
     76              	pclk_wdt = 4000000;
   \                     ??WDT_SetTimeOut_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable5  ;; 0x3d0900
   \   0000001A   0x0006             MOVS     R6,R0
     77              	// Calculate TC in WDT
     78              	tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
   \   0000001C   0xFBA5 0x0106      UMULL    R0,R1,R5,R6
   \   00000020   0x0880             LSRS     R0,R0,#+2
   \   00000022   0xEA40 0x7081      ORR      R0,R0,R1, LSL #+30
   \   00000026   0x0889             LSRS     R1,R1,#+2
   \   00000028   0x....             LDR.N    R2,??DataTable5_1  ;; 0xf4240
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000030   0x0007             MOVS     R7,R0
     79              	// Check if it valid
     80              	if (tempval >= WDT_TIMEOUT_MIN)
   \   00000032   0x2FFF             CMP      R7,#+255
   \   00000034   0xD303             BCC.N    ??WDT_SetTimeOut_4
     81              	{
     82              		LPC_WDT->WDTC = tempval;
   \   00000036   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   00000038   0x6007             STR      R7,[R0, #+0]
     83              		return	SUCCESS;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE061             B.N      ??WDT_SetTimeOut_5
     84              	}
     85          
     86              	break;
   \                     ??WDT_SetTimeOut_4: (+1)
   \   0000003E   0xE05F             B.N      ??WDT_SetTimeOut_6
     87          
     88              case WDT_CLKSRC_PCLK:
     89          
     90              	// Get WDT clock with CCLK divider = 4
     91          		pclk_wdt = SystemCoreClock / 4;
   \                     ??WDT_SetTimeOut_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable5_3
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x0880             LSRS     R0,R0,#+2
   \   00000046   0x0006             MOVS     R6,R0
     92          		// Calculate TC in WDT
     93          		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
   \   00000048   0xFBA5 0x0106      UMULL    R0,R1,R5,R6
   \   0000004C   0x0880             LSRS     R0,R0,#+2
   \   0000004E   0xEA40 0x7081      ORR      R0,R0,R1, LSL #+30
   \   00000052   0x0889             LSRS     R1,R1,#+2
   \   00000054   0x....             LDR.N    R2,??DataTable5_1  ;; 0xf4240
   \   00000056   0x2300             MOVS     R3,#+0
   \   00000058   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000005C   0x0007             MOVS     R7,R0
     94          
     95          		if (tempval >= WDT_TIMEOUT_MIN)
   \   0000005E   0x2FFF             CMP      R7,#+255
   \   00000060   0xD307             BCC.N    ??WDT_SetTimeOut_7
     96          		{
     97          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
     98          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   0000006A   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   0000006C   0x6007             STR      R7,[R0, #+0]
     99          			return SUCCESS;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xE047             B.N      ??WDT_SetTimeOut_5
    100          		}
    101          
    102          		// Get WDT clock with CCLK divider = 2
    103          		pclk_wdt = SystemCoreClock / 2;
   \                     ??WDT_SetTimeOut_7: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable5_3
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0840             LSRS     R0,R0,#+1
   \   00000078   0x0006             MOVS     R6,R0
    104          		// Calculate TC in WDT
    105          		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
   \   0000007A   0xFBA5 0x0106      UMULL    R0,R1,R5,R6
   \   0000007E   0x0880             LSRS     R0,R0,#+2
   \   00000080   0xEA40 0x7081      ORR      R0,R0,R1, LSL #+30
   \   00000084   0x0889             LSRS     R1,R1,#+2
   \   00000086   0x....             LDR.N    R2,??DataTable5_1  ;; 0xf4240
   \   00000088   0x2300             MOVS     R3,#+0
   \   0000008A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000008E   0x0007             MOVS     R7,R0
    106          
    107          		if (tempval >= WDT_TIMEOUT_MIN)
   \   00000090   0x2FFF             CMP      R7,#+255
   \   00000092   0xD307             BCC.N    ??WDT_SetTimeOut_8
    108          		{
    109          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
   \   00000094   0x2102             MOVS     R1,#+2
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
    110          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   0000009C   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   0000009E   0x6007             STR      R7,[R0, #+0]
    111          			return	SUCCESS;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE02E             B.N      ??WDT_SetTimeOut_5
    112          		}
    113          
    114          		// Get WDT clock with CCLK divider = 1
    115          		pclk_wdt = SystemCoreClock;
   \                     ??WDT_SetTimeOut_8: (+1)
   \   000000A4   0x....             LDR.N    R0,??DataTable5_3
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x0006             MOVS     R6,R0
    116          		// Calculate TC in WDT
    117          		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
   \   000000AA   0xFBA5 0x0106      UMULL    R0,R1,R5,R6
   \   000000AE   0x0880             LSRS     R0,R0,#+2
   \   000000B0   0xEA40 0x7081      ORR      R0,R0,R1, LSL #+30
   \   000000B4   0x0889             LSRS     R1,R1,#+2
   \   000000B6   0x....             LDR.N    R2,??DataTable5_1  ;; 0xf4240
   \   000000B8   0x2300             MOVS     R3,#+0
   \   000000BA   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000BE   0x0007             MOVS     R7,R0
    118          
    119          		if (tempval >= WDT_TIMEOUT_MIN)
   \   000000C0   0x2FFF             CMP      R7,#+255
   \   000000C2   0xD307             BCC.N    ??WDT_SetTimeOut_9
    120          		{
    121          			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
   \   000000C4   0x2101             MOVS     R1,#+1
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
    122          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   000000CC   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   000000CE   0x6007             STR      R7,[R0, #+0]
    123          			return	SUCCESS;
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0xE016             B.N      ??WDT_SetTimeOut_5
    124          		}
    125          		break ;
   \                     ??WDT_SetTimeOut_9: (+1)
   \   000000D4   0xE014             B.N      ??WDT_SetTimeOut_6
    126          
    127          
    128              case WDT_CLKSRC_RTC:
    129          		pclk_wdt = 32768;
   \                     ??WDT_SetTimeOut_1: (+1)
   \   000000D6   0xF44F 0x4000      MOV      R0,#+32768
   \   000000DA   0x0006             MOVS     R6,R0
    130          		// Calculate TC in WDT
    131          		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
   \   000000DC   0xFBA5 0x0106      UMULL    R0,R1,R5,R6
   \   000000E0   0x0880             LSRS     R0,R0,#+2
   \   000000E2   0xEA40 0x7081      ORR      R0,R0,R1, LSL #+30
   \   000000E6   0x0889             LSRS     R1,R1,#+2
   \   000000E8   0x....             LDR.N    R2,??DataTable5_1  ;; 0xf4240
   \   000000EA   0x2300             MOVS     R3,#+0
   \   000000EC   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000F0   0x0007             MOVS     R7,R0
    132          		// Check if it valid
    133          		if (tempval >= WDT_TIMEOUT_MIN)
   \   000000F2   0x2FFF             CMP      R7,#+255
   \   000000F4   0xD303             BCC.N    ??WDT_SetTimeOut_10
    134          		{
    135          			LPC_WDT->WDTC = (uint32_t) tempval;
   \   000000F6   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40000004
   \   000000F8   0x6007             STR      R7,[R0, #+0]
    136          			return	SUCCESS;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0xE001             B.N      ??WDT_SetTimeOut_5
    137          		}
    138          
    139          		break;
   \                     ??WDT_SetTimeOut_10: (+1)
   \   000000FE   0xE7FF             B.N      ??WDT_SetTimeOut_6
    140          
    141          // Error parameter
    142          		default:
    143          			break;
    144          }
    145          
    146          	return ERROR;
   \                     ??WDT_SetTimeOut_3: (+1)
   \                     ??WDT_SetTimeOut_6: (+1)
   \   00000100   0x2000             MOVS     R0,#+0
   \                     ??WDT_SetTimeOut_5: (+1)
   \   00000102   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    147          }
    148          
    149          /* End of Private Functions --------------------------------------------------- */
    150          
    151          
    152          /* Public Functions ----------------------------------------------------------- */
    153          /** @addtogroup WDT_Public_Functions
    154           * @{
    155           */
    156          
    157          
    158          /*********************************************************************//**
    159          * @brief 		Initial for Watchdog function
    160          * 					Clock source = RTC ,
    161          * @param[in]	ClkSrc  Select clock source, should be:
    162          * 				- WDT_CLKSRC_IRC: Clock source from Internal RC oscillator
    163          * 				- WDT_CLKSRC_PCLK: Selects the APB peripheral clock (PCLK)
    164          * 				- WDT_CLKSRC_RTC: Selects the RTC oscillator
    165          * @param[in]	WDTMode WDT mode, should be:
    166          * 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
    167          * 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
    168          * @return 		None
    169           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    170          void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
    171          {
   \                     WDT_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    172          	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD009             BEQ.N    ??WDT_Init_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xD006             BEQ.N    ??WDT_Init_0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xD003             BEQ.N    ??WDT_Init_0
   \   00000018   0x21AC             MOVS     R1,#+172
   \   0000001A   0x....             LDR.N    R0,??DataTable5_4
   \   0000001C   0x.... 0x....      BL       check_failed
    173          	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
   \                     ??WDT_Init_0: (+1)
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD006             BEQ.N    ??WDT_Init_1
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D01             CMP      R5,#+1
   \   0000002A   0xD003             BEQ.N    ??WDT_Init_1
   \   0000002C   0x21AD             MOVS     R1,#+173
   \   0000002E   0x....             LDR.N    R0,??DataTable5_4
   \   00000030   0x.... 0x....      BL       check_failed
    174          	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
   \                     ??WDT_Init_1: (+1)
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       CLKPWR_SetPCLKDiv
    175          
    176          	//Set clock source
    177          	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
   \   0000003C   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x0880             LSRS     R0,R0,#+2
   \   00000042   0x0080             LSLS     R0,R0,#+2
   \   00000044   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40000010
   \   00000046   0x6008             STR      R0,[R1, #+0]
    178          	LPC_WDT->WDCLKSEL |= ClkSrc;
   \   00000048   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x4320             ORRS     R0,R4,R0
   \   00000050   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40000010
   \   00000052   0x6008             STR      R0,[R1, #+0]
    179          	//Set WDT mode
    180          	if (WDTMode == WDT_MODE_RESET){
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x2D01             CMP      R5,#+1
   \   00000058   0xD107             BNE.N    ??WDT_Init_2
    181          		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
   \   0000005A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000064   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    182          	}
    183          }
   \                     ??WDT_Init_2: (+1)
   \   0000006A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    184          
    185          /*********************************************************************//**
    186          * @brief 		Start WDT activity with given timeout value
    187          * @param[in]	TimeOut WDT reset after timeout if it is not feed
    188          * @return 		None
    189           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    190          void WDT_Start(uint32_t TimeOut)
    191          {
   \                     WDT_Start: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    192          	uint32_t ClkSrc;
    193          
    194          	ClkSrc = LPC_WDT->WDCLKSEL;
   \   00000004   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0005             MOVS     R5,R0
    195          	ClkSrc &=WDT_WDCLKSEL_MASK;
   \   0000000A   0xF015 0x0503      ANDS     R5,R5,#0x3
    196          	WDT_SetTimeOut(ClkSrc,TimeOut);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       WDT_SetTimeOut
    197          	//enable watchdog
    198          	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
   \   00000018   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000022   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    199          	WDT_Feed();
   \   00000028   0x.... 0x....      BL       WDT_Feed
    200          }
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    201          
    202          /********************************************************************//**
    203           * @brief 		Read WDT Time out flag
    204           * @param[in]	None
    205           * @return		Time out flag status of WDT
    206           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          FlagStatus WDT_ReadTimeOutFlag (void)
    208          {
    209          	return ((FlagStatus)((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2));
   \                     WDT_ReadTimeOutFlag: (+1)
   \   00000000   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    210          }
    211          
    212          /********************************************************************//**
    213           * @brief 		Clear WDT Time out flag
    214           * @param[in]	None
    215           * @return		None
    216           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    217          void WDT_ClrTimeOutFlag (void)
    218          {
    219          	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
   \                     WDT_ClrTimeOutFlag: (+1)
   \   00000000   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000000A   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    220          }
   \   00000010   0x4770             BX       LR               ;; return
    221          
    222          /********************************************************************//**
    223           * @brief 		Update WDT timeout value and feed
    224           * @param[in]	TimeOut	TimeOut value to be updated
    225           * @return		None
    226           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    227          void WDT_UpdateTimeOut ( uint32_t TimeOut)
    228          {
   \                     WDT_UpdateTimeOut: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    229          	uint32_t ClkSrc;
    230          	ClkSrc = LPC_WDT->WDCLKSEL;
   \   00000004   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000010
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0005             MOVS     R5,R0
    231          	ClkSrc &=WDT_WDCLKSEL_MASK;
   \   0000000A   0xF015 0x0503      ANDS     R5,R5,#0x3
    232          	WDT_SetTimeOut(ClkSrc,TimeOut);
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       WDT_SetTimeOut
    233          	WDT_Feed();
   \   00000018   0x.... 0x....      BL       WDT_Feed
    234          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    235          
    236          
    237          /********************************************************************//**
    238           * @brief 		After set WDTEN, call this function to start Watchdog
    239           * 				or reload the Watchdog timer
    240           * @param[in]	None
    241           *
    242           * @return		None
    243           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          void WDT_Feed (void)
    245          {
    246          	// Disable irq interrupt
    247          	__disable_irq();
   \                     WDT_Feed: (+1)
   \   00000000   0xB672             CPSID    I
    248          	LPC_WDT->WDFEED = 0xAA;
   \   00000002   0x20AA             MOVS     R0,#+170
   \   00000004   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40000008
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    249          	LPC_WDT->WDFEED = 0x55;
   \   00000008   0x2055             MOVS     R0,#+85
   \   0000000A   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40000008
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    250          	// Then enable irq interrupt
    251          	__enable_irq();
   \   0000000E   0xB662             CPSIE    I
    252          }
   \   00000010   0x4770             BX       LR               ;; return
    253          
    254          /********************************************************************//**
    255           * @brief 		Get the current value of WDT
    256           * @param[in]	None
    257           * @return		current value of WDT
    258           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    259          uint32_t WDT_GetCurrentCount(void)
    260          {
    261          	return LPC_WDT->WDTV;
   \                     WDT_GetCurrentCount: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_7  ;; 0x4000000c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    262          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40000010         DC32     0x40000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4000000C         DC32     0x4000000c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 69H, 61H, 72H, 5CH, 4EH
   \              0x5C 0x69    
   \              0x61 0x72    
   \              0x5C 0x4E    
   \   00000008   0x43 0x31          DC8 43H, 31H, 33H, 36H, 42H, 2DH, 33H, 31H
   \              0x33 0x36    
   \              0x42 0x2D    
   \              0x33 0x31    
   \   00000010   0x30 0x20          DC8 30H, 20H, 0CDH, 0B3H, 0BCH, 0C6H, 0C4H, 0A3H
   \              0xCD 0xB3    
   \              0xBC 0xC6    
   \              0xC4 0xA3    
   \   00000018   0xBF 0xE9          DC8 0BFH, 0E9H, 5CH, 53H, 6FH, 66H, 74H, 77H
   \              0x5C 0x53    
   \              0x6F 0x66    
   \              0x74 0x77    
   \   00000020   0x61 0x72          DC8 61H, 72H, 65H, 5CH, 43H, 53H, 42H, 5CH
   \              0x65 0x5C    
   \              0x43 0x53    
   \              0x42 0x5C    
   \   00000028   0x73 0x6F          DC8 73H, 6FH, 75H, 72H, 63H, 65H, 5CH, 6CH
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x5C 0x6C    
   \   00000030   0x70 0x63          DC8 70H, 63H, 31H, 37H, 78H, 78H, 5FH, 77H
   \              0x31 0x37    
   \              0x78 0x78    
   \              0x5F 0x77    
   \   00000038   0x64 0x74          DC8 64H, 74H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    263          
    264          /**
    265           * @}
    266           */
    267          
    268          #endif /* _WDT */
    269          
    270          /**
    271           * @}
    272           */
    273          
    274          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WDT_ClrTimeOutFlag
       0   WDT_Feed
       0   WDT_GetCurrentCount
      16   WDT_Init
        16   -> CLKPWR_SetPCLKDiv
        16   -> check_failed
       0   WDT_ReadTimeOutFlag
      24   WDT_SetTimeOut
        24   -> CLKPWR_SetPCLKDiv
        24 __aeabi_uldivmod
      16   WDT_Start
        16   -> WDT_Feed
        16   -> WDT_SetTimeOut
      16   WDT_UpdateTimeOut
        16   -> WDT_Feed
        16   -> WDT_SetTimeOut


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
      64  ?_0
      18  WDT_ClrTimeOutFlag
      18  WDT_Feed
       6  WDT_GetCurrentCount
     108  WDT_Init
      14  WDT_ReadTimeOutFlag
     260  WDT_SetTimeOut
      46  WDT_Start
      30  WDT_UpdateTimeOut

 
  64 bytes in section .rodata
 532 bytes in section .text
 
 532 bytes of CODE  memory
  64 bytes of CONST memory

Errors: none
Warnings: none
