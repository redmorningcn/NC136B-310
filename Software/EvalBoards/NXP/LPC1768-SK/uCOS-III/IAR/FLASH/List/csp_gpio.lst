###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       15/Aug/2017  16:25:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_gpio.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_gpio.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\csp_gpio.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\csp_gpio.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_gpio.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              uC/CSP
      4          *                                        Chip Support Package
      5          *
      6          *                            (c) Copyright 2010; Micrium, Inc.; Weston, FL
      7          *                         (c) Copyright 2003-2010; Micrium, Inc.; Weston, FL
      8          *
      9          *               All rights reserved. Protected by international copyright laws.
     10          *
     11          *               uC/CSP is provided in source form to registered licensees ONLY.  It is
     12          *               illegal to distribute this source code to any third party unless you receive
     13          *               written permission by an authorized Micrium representative.  Knowledge of
     14          *               the source code may NOT be used to develop a similar product.
     15          *
     16          *               Please help us continue to provide the Embedded community with the finest
     17          *               software available.  Your honesty is greatly appreciated.
     18          *
     19          *               You can contact us at www.micrium.com.
     20          *********************************************************************************************************
     21          */
     22          
     23          /*
     24          *********************************************************************************************************
     25          *
     26          *                                  GENERAL PURPOSE I/O CONTROLLER
     27          *                                            NXP  LPC17XX
     28          * Filename      : csp_gio.c
     29          * Version       : V1.00
     30          * Programmer(s) : FT
     31          *********************************************************************************************************
     32          * Note(s)       : 
     33          *********************************************************************************************************
     34          */
     35          
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                            INCLUDE FILES
     40          *********************************************************************************************************
     41          */
     42          
     43          #define    CSP_GPIO_MODULE
     44          #include   <csp.h>
     45          
     46          /*
     47          *********************************************************************************************************
     48          *                                            LOCAL DEFINES
     49          *********************************************************************************************************
     50          */
     51          
     52          #define  CSP_GPIO_PORT_MAX_NBR                            5u    /* LPC17xx maximum number of ports                    */
     53          
     54                                                                          /* ------ LPC17xx GPIO REGISTER ADDRESS DEFINES ----- */
     55          #define  CSP_GPIO_ADDR_FIO                      (CPU_ADDR  )(0x2009C000)
     56          #define  CSP_GPIO_ADDR_PINSEL                   (CPU_ADDR  )(0x4002C000)
     57          #define  CSP_GPIO_ADDR_PINMODE                  (CPU_ADDR  )(0x4002C040)
     58          #define  CSP_GPIO_ADDR_INT                      (CPU_ADDR  )(0x40028080)
     59          
     60          #define  CSP_GPIO_REG_EXT_INT                   (*(CPU_REG32 *)(0x400FC140))
     61          #define  CSP_GPIO_REG_EXT_MODE                  (*(CPU_REG32 *)(0x400FC148))
     62          #define  CSP_GPIO_REG_EXT_POLAR                 (*(CPU_REG32 *)(0x400FC14C))
     63          
     64          #define  CSP_GPIO_REG_FIODIRx(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_FIO     + (     (port_nbr) * 32u) + 0x00))
     65          #define  CSP_GPIO_REG_FIOMASKx(port_nbr)        (*(CPU_REG32 *)(CSP_GPIO_ADDR_FIO     + (     (port_nbr) * 32u) + 0x10))
     66          #define  CSP_GPIO_REG_FIOPINx(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_FIO     + (     (port_nbr) * 32u) + 0x14))
     67          #define  CSP_GPIO_REG_FIOSETx(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_FIO     + (     (port_nbr) * 32u) + 0x18))
     68          #define  CSP_GPIO_REG_FIOCLRx(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_FIO     + (     (port_nbr) * 32u) + 0x1C))
     69          
     70          #define  CSP_GPIO_REG_PINSELLx(port_nbr)        (*(CPU_REG32 *)(CSP_GPIO_ADDR_PINSEL  + (2u * (port_nbr) *  4u) + 0x00))
     71          #define  CSP_GPIO_REG_PINSELHx(port_nbr)        (*(CPU_REG32 *)(CSP_GPIO_ADDR_PINSEL  + (2u * (port_nbr) *  4u) + 0x04))
     72          
     73          #define  CSP_GPIO_REG_PINMODELx(port_nbr)       (*(CPU_REG32 *)(CSP_GPIO_ADDR_PINMODE + (2u * (port_nbr) *  4u) + 0x00))
     74          #define  CSP_GPIO_REG_PINMODEHx(port_nbr)       (*(CPU_REG32 *)(CSP_GPIO_ADDR_PINMODE + (2u * (port_nbr) *  4u) + 0x04))
     75          
     76          #define  CSP_GPIO_REG_PINMODE_ODx(port_nbr)     (*(CPU_REG32 *)(CSP_GPIO_ADDR_PINMODE + (     (port_nbr) *  4u) + 0x14))
     77          
     78          
     79          #define  CSP_GPIO_REG_INT_STAT                  (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT))
     80          #define  CSP_GPIO_REG_INT_STAT_R(port_nbr)      (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x04))
     81          #define  CSP_GPIO_REG_INT_STAT_F(port_nbr)      (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x08))
     82          #define  CSP_GPIO_REG_INT_CLR(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x0C))
     83          #define  CSP_GPIO_REG_INT_EN_R(port_nbr)        (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x10))
     84          #define  CSP_GPIO_REG_INT_EN_F(port_nbr)        (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x14))
     85          #define  CSP_GPIO_REG_INT_CLR(port_nbr)         (*(CPU_REG32 *)(CSP_GPIO_ADDR_INT     + (     (port_nbr) * 16u) + 0x0C))
     86          
     87          
     88          #define  CSP_GPIO_PORT02_INT_PINS               (DEF_BIT_10 | \
     89                                                           DEF_BIT_11 | \
     90                                                           DEF_BIT_12 | \
     91                                                           DEF_BIT_13)
     92          
     93          
     94          /*
     95          *********************************************************************************************************
     96          *                                           LOCAL CONSTANTS
     97          *********************************************************************************************************
     98          */
     99          
    100          
    101          /*
    102          *********************************************************************************************************
    103          *                                          LOCAL DATA TYPES
    104          *********************************************************************************************************
    105          */
    106          
    107          
    108          /*
    109          *********************************************************************************************************
    110          *                                            LOCAL TABLES
    111          *********************************************************************************************************
    112          */
    113          
    114          
    115          /*
    116          *********************************************************************************************************
    117          *                                       LOCAL GLOBAL VARIABLES
    118          *********************************************************************************************************
    119          */
    120          
    121          
    122          /*
    123          *********************************************************************************************************
    124          *                                      LOCAL FUNCTION PROTOTYPES
    125          *********************************************************************************************************
    126          */
    127          
    128          
    129          /*
    130          *********************************************************************************************************
    131          *                                     LOCAL CONFIGURATION ERRORS
    132          *********************************************************************************************************
    133          */
    134          
    135          
    136          
    137          /*
    138          *********************************************************************************************************
    139          *********************************************************************************************************
    140          *                                           LOCAL FUNCTIONS
    141          *********************************************************************************************************
    142          *********************************************************************************************************
    143          */
    144          
    145          /*
    146          *********************************************************************************************************
    147          *                                          CSP_GPIO_Init()
    148          *
    149          * Description : Initialize general purpose I/O module.
    150          *
    151          * Argument(s) : none.
    152          *
    153          * Return(s)   : None.
    154          *
    155          * Caller(s)   : Application.
    156          *
    157          * Note(s)     : None.
    158          *********************************************************************************************************
    159          */
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void  CSP_GPIO_Init (void) 
    162          {
    163          
    164          }   
   \                     CSP_GPIO_Init: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    165          
    166          
    167          /*
    168          *********************************************************************************************************
    169          *                                          CSP_GPIO_Cfg()
    170          *
    171          * Description : Configure a set of pins for a specific I/O port
    172          *
    173          * Argument(s) : port_nbr    GPIO port number. (see note #1)
    174          *
    175          *               pins        Bit mask specifying which pins to configure.
    176          *
    177          *               dir         Pins direction :
    178          *                               CSP_GPIO_DIR_IN                  Pins are configured as inputs.
    179          *                               CSP_GPIO_DIR_OUT                 Pins are configured as outputs.
    180          *    
    181          *               drv_mode    Pins Drive mode flags:
    182          *                               CSP_GPIO_FLAG_MODE_NONE          Pins have neither pull-down nor pull-up.
    183          *                               CSP_GPIO_FLAG_MODE_PULLUP        Pins have a pull-up   resistor enabled.
    184          *                               CSP_GPIO_FLAG_MODE_PULLDOWN      Pins have a pull-down resistor enabled.
    185          *                               CSP_GPIO_FLAG_MODE_REPEATER      Pins have repeater mode enabled.
    186          *                               CSP_GPIO_FLAG_MODE_OPEN_DRAIN    Pins have open drain mode enabled.
    187          *
    188          *               int_en      Pin Interrupt enable (not supported.)
    189          *                               DEF_YES                          Pin interrupt is enabled.
    190          *                               DEF_NO                           Pin Interrupt is disabled.
    191          *              
    192          *               int_pol     Pin interrupt polarity:
    193          *                               CSP_INT_POL_LEVEL_HIGH           Pin interrupt is activated on a high level (if int_act = 'CSP_INT_ACT_LEVEL').
    194          *                               CSP_INT_POL_LEVEL_LOW            Pin interrupt is activated on a low level  (if int_act = 'CSP_INT_ACT_LEVEL').
    195          * 
    196          *                               CSP_INT_POL_EDGE_POSITIVE        Pin interrupt is activated on the positive edge. (if int_act = 'CSP_INT_ACT_EDGE').
    197          *                               CSP_INT_POL_EDGE_NEGATIVE        Pin interrupt is activated on the negative edge. (if int_act = 'CSP_INT_ACT_EDGE').
    198          *                               CSP_INT_POL_EDGE_BOTH            Pin interrupt is activated on both edges.        (if int_act = 'CSP_INT_ACT_EDGE').
    199          *
    200          *               fnct         Pins function :
    201          *                               CSP_GPIO_FNCT_00                 Pins are controlled by the GPIO Controller.
    202          *                               CSP_GPIO_FNCT_01                 Pins are controlled by the Peripheral in function 1.
    203          *                               CSP_GPIO_FNCT_02                 Pins are controlled by the Peripheral in function 2.
    204          *                               CSP_GPIO_FNCT_03                 Pins are controlled by the Peripheral in funciton 3.
    205          *
    206          *               opt          Pins extra options:
    207          *                                CSP_GPIO_OPT_RD_WR_DIS          Controlled pin is not affected by writes to the port's.
    208          *                                CSP_GPIO_OPT_RD_WR_EN           Controlled pin is     affected by writes to the port's.
    209          *
    210          * Return(s)   : DEF_OK    If the pins were configured successfully.
    211          *               DEF_FAIL  If the pins could not be configured successfully.
    212          *
    213          * Caller(s)   : Application.
    214          *
    215          * Note(s)     : (1) The 'port_nbr' argument depends on the number of GPIO ports available for this 
    216          *                   family definition.
    217          *
    218          *                   (a) Port numbers identifiers can be found in 'csp.h':
    219          *
    220          *                           CSP_GPIO_PORT_NBR_00
    221          *                           CSP_GPIO_PORT_NBR_01
    222          *                           CSP_GPIO_PORT_NBR_A
    223          *                           CSP_GPIO_PORT_NBR_B
    224          *
    225          *                (2) Some architectures multiplex general purpose pins with peripheral functions the 
    226          *                    'fnct' parameter defines the GPIO function. 
    227          *
    228          *                   (a) GPIO function identifier can be found in csp.h:
    229          *
    230          *                           CSP_GPIO_FNCT_00
    231          *                           CSP_GPIO_FNCT_01
    232          *                           CSP_GPIO_FNCT_02
    233          *                           CSP_GPIO_FNCT_03
    234          *********************************************************************************************************
    235          */
    236          

   \                                 In section .text, align 2, keep-with-next
    237          CPU_BOOLEAN  CSP_GPIO_Cfg (CSP_DEV_NBR    port_nbr,
    238                                     CSP_GPIO_MSK   pins,
    239                                     CSP_OPT        dir,                                    
    240                                     CSP_OPT_FLAGS  drv_mode,
    241                                     CPU_BOOLEAN    int_en,
    242                                     CSP_OPT        int_pol,
    243                                     CSP_OPT        fnct)                           
    244          {   
   \                     CSP_GPIO_Cfg: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    245              CPU_INT08U  opt_pinsel;
    246              CPU_INT08U  opt_pinmode;
    247              CPU_INT08U  pin_nbr;
    248              CPU_INT32U  pin_bit_pos;
    249              CPU_INT32U  pin_mode_high;
    250              CPU_INT32U  pin_mode_low;
    251              CPU_INT32U  pin_sel_high;
    252              CPU_INT32U  pin_sel_low;    
    253              CPU_SR_ALLOC();
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    254          
    255                                                                          /* -------------- ARGUMENTS CHECKING ---------------- */
    256          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)
    257              switch (port_nbr) {
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD006             BEQ.N    ??CSP_GPIO_Cfg_0
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xD004             BEQ.N    ??CSP_GPIO_Cfg_0
   \   00000018   0xD312             BCC.N    ??CSP_GPIO_Cfg_1
   \   0000001A   0x2C04             CMP      R4,#+4
   \   0000001C   0xD010             BEQ.N    ??CSP_GPIO_Cfg_1
   \   0000001E   0xD30F             BCC.N    ??CSP_GPIO_Cfg_1
   \   00000020   0xE015             B.N      ??CSP_GPIO_Cfg_2
    258                  case CSP_GPIO_PORT_NBR_00:
    259                  case CSP_GPIO_PORT_NBR_02:
    260          
    261                       if ( (int_en  == DEF_ENABLED           ) &&        /* Only level sensitive interrupts can be configured.   */
    262                           ((int_pol == CSP_INT_POL_LEVEL_HIGH) ||
    263                            (int_pol == CSP_INT_POL_LEVEL_LOW ))) {                 
   \                     ??CSP_GPIO_Cfg_0: (+1)
   \   00000022   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD109             BNE.N    ??CSP_GPIO_Cfg_3
   \   0000002A   0xF8BD 0x003C      LDRH     R0,[SP, #+60]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD003             BEQ.N    ??CSP_GPIO_Cfg_4
   \   00000032   0xF8BD 0x003C      LDRH     R0,[SP, #+60]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD101             BNE.N    ??CSP_GPIO_Cfg_3
    264                           return (DEF_FAIL);
   \                     ??CSP_GPIO_Cfg_4: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE1BF             B.N      ??CSP_GPIO_Cfg_5
    265                       }
    266                       break;
   \                     ??CSP_GPIO_Cfg_3: (+1)
   \   0000003E   0xE008             B.N      ??CSP_GPIO_Cfg_6
    267                  
    268                  case CSP_GPIO_PORT_NBR_01:                              /* Only pins of PORT 0 and PORT 2 can generate int.     */
    269                  case CSP_GPIO_PORT_NBR_03:
    270                  case CSP_GPIO_PORT_NBR_04:             
    271                       if (int_en == DEF_ENABLED) {
   \                     ??CSP_GPIO_Cfg_1: (+1)
   \   00000040   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD101             BNE.N    ??CSP_GPIO_Cfg_7
    272                           return (DEF_FAIL);
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE1B8             B.N      ??CSP_GPIO_Cfg_5
    273                       }
    274                       break;
   \                     ??CSP_GPIO_Cfg_7: (+1)
   \   0000004C   0xE001             B.N      ??CSP_GPIO_Cfg_6
    275          
    276                  default:
    277                       return (DEF_FAIL);
   \                     ??CSP_GPIO_Cfg_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE1B5             B.N      ??CSP_GPIO_Cfg_5
    278              }
    279          #endif
    280          
    281                                                                          /* -------------- PIN MODE DECODIFICATION ------------- */
    282                                                                          /* Px.y MODE register defines (Port x Pin y) ...        */
    283                                                                          /* ... '00b' Px.y pin has a pull-up resistor enabled.   */
    284                                                                          /* ... '01b' Px.y pin has repeater mode enabled.        */
    285                                                                          /* ... '10b' Px.y pin has neither pull-up nor pull-down.*/
    286                                                                          /* ... '11b' Px.y has a pull-down resistor enabled.     */
    287              switch (drv_mode & ~CSP_GPIO_FLAG_MODE_OPEN_DRAIN) {        
   \                     ??CSP_GPIO_Cfg_6: (+1)
   \   00000052   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000056   0xF030 0x0010      BICS     R0,R0,#0x10
   \   0000005A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD006             BEQ.N    ??CSP_GPIO_Cfg_8
   \   00000060   0x2802             CMP      R0,#+2
   \   00000062   0xD008             BEQ.N    ??CSP_GPIO_Cfg_9
   \   00000064   0x2804             CMP      R0,#+4
   \   00000066   0xD00A             BEQ.N    ??CSP_GPIO_Cfg_10
   \   00000068   0x2808             CMP      R0,#+8
   \   0000006A   0xD00C             BEQ.N    ??CSP_GPIO_Cfg_11
   \   0000006C   0xE00F             B.N      ??CSP_GPIO_Cfg_12
    288                  case CSP_GPIO_FLAG_MODE_NONE:
    289                       opt_pinmode = 2u;                                  
   \                     ??CSP_GPIO_Cfg_8: (+1)
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0xF88D 0x0000      STRB     R0,[SP, #+0]
    290                       break;
   \   00000074   0xE00D             B.N      ??CSP_GPIO_Cfg_13
    291                       
    292                  case CSP_GPIO_FLAG_MODE_PULLUP:
    293                       opt_pinmode = 0u;
   \                     ??CSP_GPIO_Cfg_9: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF88D 0x0000      STRB     R0,[SP, #+0]
    294                       break;
   \   0000007C   0xE009             B.N      ??CSP_GPIO_Cfg_13
    295                       
    296                  case CSP_GPIO_FLAG_MODE_PULLDOWN:
    297                       opt_pinmode = 3u;
   \                     ??CSP_GPIO_Cfg_10: (+1)
   \   0000007E   0x2003             MOVS     R0,#+3
   \   00000080   0xF88D 0x0000      STRB     R0,[SP, #+0]
    298                       break;
   \   00000084   0xE005             B.N      ??CSP_GPIO_Cfg_13
    299                       
    300                  case CSP_GPIO_FLAG_MODE_REPEATER:
    301                       opt_pinmode = 1u;
   \                     ??CSP_GPIO_Cfg_11: (+1)
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xF88D 0x0000      STRB     R0,[SP, #+0]
    302                       break;
   \   0000008C   0xE001             B.N      ??CSP_GPIO_Cfg_13
    303          
    304                  default:
    305                       return (DEF_FAIL);
   \                     ??CSP_GPIO_Cfg_12: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE195             B.N      ??CSP_GPIO_Cfg_5
    306              }
    307                                                                          /* ----------- PIN DIRECTION DECODIFICATION ----------- */
    308              switch (fnct) {
   \                     ??CSP_GPIO_Cfg_13: (+1)
   \   00000092   0xF8BD 0x0040      LDRH     R0,[SP, #+64]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD005             BEQ.N    ??CSP_GPIO_Cfg_14
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD030             BEQ.N    ??CSP_GPIO_Cfg_15
   \   0000009E   0xD32B             BCC.N    ??CSP_GPIO_Cfg_16
   \   000000A0   0x2803             CMP      R0,#+3
   \   000000A2   0xD031             BEQ.N    ??CSP_GPIO_Cfg_17
   \   000000A4   0xE034             B.N      ??CSP_GPIO_Cfg_18
    309                  case CSP_GPIO_FNCT_00:
    310                       opt_pinsel = 0u;                                   /* '00b' GPIO Function PINSELx register.                */
   \                     ??CSP_GPIO_Cfg_14: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF88D 0x0001      STRB     R0,[SP, #+1]
    311                   
    312                       CPU_CRITICAL_ENTER();
   \   000000AC   0x.... 0x....      BL       CPU_SR_Save
   \   000000B0   0x9001             STR      R0,[SP, #+4]
   \   000000B2   0x.... 0x....      BL       CPU_IntDisMeasStart
    313                       if (dir == CSP_GPIO_DIR_IN) {                      /* Pin direction decodification.                        */
   \   000000B6   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD10B             BNE.N    ??CSP_GPIO_Cfg_19
    314                           DEF_BIT_CLR(CSP_GPIO_REG_FIODIRx(port_nbr), pins);
   \   000000BE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000C0   0x0160             LSLS     R0,R4,#+5
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable6  ;; 0x2009c000
   \   000000C6   0x5808             LDR      R0,[R1, R0]
   \   000000C8   0x43A8             BICS     R0,R0,R5
   \   000000CA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000CC   0x0161             LSLS     R1,R4,#+5
   \   000000CE   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x2009c000
   \   000000D2   0x5050             STR      R0,[R2, R1]
   \   000000D4   0xE00A             B.N      ??CSP_GPIO_Cfg_20
    315                       } else {
    316                           DEF_BIT_SET(CSP_GPIO_REG_FIODIRx(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_19: (+1)
   \   000000D6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000D8   0x0160             LSLS     R0,R4,#+5
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable6  ;; 0x2009c000
   \   000000DE   0x5808             LDR      R0,[R1, R0]
   \   000000E0   0x4328             ORRS     R0,R5,R0
   \   000000E2   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000E4   0x0161             LSLS     R1,R4,#+5
   \   000000E6   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x2009c000
   \   000000EA   0x5050             STR      R0,[R2, R1]
    317                       }
    318          
    319                       CPU_CRITICAL_EXIT();
   \                     ??CSP_GPIO_Cfg_20: (+1)
   \   000000EC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000F0   0x9801             LDR      R0,[SP, #+4]
   \   000000F2   0x.... 0x....      BL       CPU_SR_Restore
    320                       break;
   \   000000F6   0xE00D             B.N      ??CSP_GPIO_Cfg_21
    321                  
    322                  case CSP_GPIO_FNCT_01:
    323                       opt_pinsel = 1u;                                   /* '01b' Function 01 PINSELx register.                  */
   \                     ??CSP_GPIO_Cfg_16: (+1)
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0xF88D 0x0001      STRB     R0,[SP, #+1]
    324                       break;
   \   000000FE   0xE009             B.N      ??CSP_GPIO_Cfg_21
    325                  
    326                  case CSP_GPIO_FNCT_02:
    327                       opt_pinsel = 2u;                                   /* '10b' Function 02 PINSELx register.                  */
   \                     ??CSP_GPIO_Cfg_15: (+1)
   \   00000100   0x2002             MOVS     R0,#+2
   \   00000102   0xF88D 0x0001      STRB     R0,[SP, #+1]
    328                       break;
   \   00000106   0xE005             B.N      ??CSP_GPIO_Cfg_21
    329                       
    330                  case CSP_GPIO_FNCT_03:
    331                       opt_pinsel = 3u;                                   /* '11b' Function 03 PINSELx register.                  */
   \                     ??CSP_GPIO_Cfg_17: (+1)
   \   00000108   0x2003             MOVS     R0,#+3
   \   0000010A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    332                       break;
   \   0000010E   0xE001             B.N      ??CSP_GPIO_Cfg_21
    333                       
    334                  default:
    335                       return (DEF_FAIL);
   \                     ??CSP_GPIO_Cfg_18: (+1)
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xE154             B.N      ??CSP_GPIO_Cfg_5
    336              }
    337              
    338              CPU_CRITICAL_ENTER();
   \                     ??CSP_GPIO_Cfg_21: (+1)
   \   00000114   0x.... 0x....      BL       CPU_SR_Save
   \   00000118   0x9001             STR      R0,[SP, #+4]
   \   0000011A   0x.... 0x....      BL       CPU_IntDisMeasStart
    339              if (DEF_BIT_IS_SET(drv_mode, CSP_GPIO_FLAG_MODE_OPEN_DRAIN)) {
   \   0000011E   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000124   0x0900             LSRS     R0,R0,#+4
   \   00000126   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD00B             BEQ.N    ??CSP_GPIO_Cfg_22
    340                  DEF_BIT_SET(CSP_GPIO_REG_PINMODE_ODx(port_nbr), pins);
   \   0000012E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x4002c054
   \   00000134   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000138   0x4328             ORRS     R0,R5,R0
   \   0000013A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x4002c054
   \   00000140   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000144   0xE00A             B.N      ??CSP_GPIO_Cfg_23
    341              } else {
    342                  DEF_BIT_CLR(CSP_GPIO_REG_PINMODE_ODx(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_22: (+1)
   \   00000146   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x4002c054
   \   0000014C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000150   0x43A8             BICS     R0,R0,R5
   \   00000152   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x4002c054
   \   00000158   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    343              }
    344              CPU_CRITICAL_EXIT();
   \                     ??CSP_GPIO_Cfg_23: (+1)
   \   0000015C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000160   0x9801             LDR      R0,[SP, #+4]
   \   00000162   0x.... 0x....      BL       CPU_SR_Restore
    345               
    346              pin_mode_low  = CSP_GPIO_REG_PINMODELx(port_nbr);
   \   00000166   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x4002c040
   \   0000016C   0xF850 0x0034      LDR      R0,[R0, R4, LSL #+3]
   \   00000170   0x0007             MOVS     R7,R0
    347              pin_mode_high = CSP_GPIO_REG_PINMODEHx(port_nbr);
   \   00000172   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4002c044
   \   00000178   0xF850 0x0034      LDR      R0,[R0, R4, LSL #+3]
   \   0000017C   0x4681             MOV      R9,R0
    348              pin_sel_low   = CSP_GPIO_REG_PINSELLx(port_nbr);    
   \   0000017E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x4002c000
   \   00000184   0xF850 0x0034      LDR      R0,[R0, R4, LSL #+3]
   \   00000188   0x4680             MOV      R8,R0
    349              pin_sel_high  = CSP_GPIO_REG_PINSELHx(port_nbr);
   \   0000018A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x4002c004
   \   00000190   0xF850 0x0034      LDR      R0,[R0, R4, LSL #+3]
   \   00000194   0x4682             MOV      R10,R0
    350                  
    351              for (pin_nbr = 0u; pin_nbr < 16u; pin_nbr++) {
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x4683             MOV      R11,R0
   \                     ??CSP_GPIO_Cfg_24: (+1)
   \   0000019A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000019E   0xF1BB 0x0F10      CMP      R11,#+16
   \   000001A2   0xD252             BCS.N    ??CSP_GPIO_Cfg_25
    352                  pin_bit_pos = pin_nbr * 2u;
   \   000001A4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001A8   0xEA5F 0x004B      LSLS     R0,R11,#+1
   \   000001AC   0x0006             MOVS     R6,R0
    353                  if (DEF_BIT_IS_SET(pins, DEF_BIT(pin_nbr))) {           /* Configure the pins 0 .. 15                           */            
   \   000001AE   0x2001             MOVS     R0,#+1
   \   000001B0   0xFA10 0xF00B      LSLS     R0,R0,R11
   \   000001B4   0x2800             CMP      R0,#+0
   \   000001B6   0xD00A             BEQ.N    ??CSP_GPIO_Cfg_26
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0xFA10 0xF00B      LSLS     R0,R0,R11
   \   000001BE   0x4028             ANDS     R0,R0,R5
   \   000001C0   0x2101             MOVS     R1,#+1
   \   000001C2   0xFA11 0xF10B      LSLS     R1,R1,R11
   \   000001C6   0x4288             CMP      R0,R1
   \   000001C8   0xD101             BNE.N    ??CSP_GPIO_Cfg_26
   \   000001CA   0x2001             MOVS     R0,#+1
   \   000001CC   0xE000             B.N      ??CSP_GPIO_Cfg_27
   \                     ??CSP_GPIO_Cfg_26: (+1)
   \   000001CE   0x2000             MOVS     R0,#+0
   \                     ??CSP_GPIO_Cfg_27: (+1)
   \   000001D0   0x2800             CMP      R0,#+0
   \   000001D2   0xD00F             BEQ.N    ??CSP_GPIO_Cfg_28
    354                      DEF_BIT_CLR(pin_mode_low, DEF_BIT_FIELD(2u, pin_bit_pos));
   \   000001D4   0x2003             MOVS     R0,#+3
   \   000001D6   0x40B0             LSLS     R0,R0,R6
   \   000001D8   0x4387             BICS     R7,R7,R0
    355                      DEF_BIT_CLR(pin_sel_low,  DEF_BIT_FIELD(2u, pin_bit_pos));
   \   000001DA   0x2003             MOVS     R0,#+3
   \   000001DC   0x40B0             LSLS     R0,R0,R6
   \   000001DE   0xEA38 0x0800      BICS     R8,R8,R0
    356          
    357                      DEF_BIT_SET(pin_mode_low, DEF_BIT_MASK(opt_pinmode, pin_bit_pos));
   \   000001E2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001E6   0x40B0             LSLS     R0,R0,R6
   \   000001E8   0x4307             ORRS     R7,R0,R7
    358                      DEF_BIT_SET(pin_sel_low,  DEF_BIT_MASK(opt_pinsel,  pin_bit_pos));
   \   000001EA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001EE   0x40B0             LSLS     R0,R0,R6
   \   000001F0   0xEA50 0x0808      ORRS     R8,R0,R8
    359                  }
    360                                                                       
    361                  if (DEF_BIT_IS_SET(pins, DEF_BIT(pin_nbr + 16u))) {     /* Configure the pins 16 .. 32                          */
   \                     ??CSP_GPIO_Cfg_28: (+1)
   \   000001F4   0x2001             MOVS     R0,#+1
   \   000001F6   0xF11B 0x0110      ADDS     R1,R11,#+16
   \   000001FA   0x4088             LSLS     R0,R0,R1
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xD00C             BEQ.N    ??CSP_GPIO_Cfg_29
   \   00000200   0x2001             MOVS     R0,#+1
   \   00000202   0xF11B 0x0110      ADDS     R1,R11,#+16
   \   00000206   0x4088             LSLS     R0,R0,R1
   \   00000208   0x4028             ANDS     R0,R0,R5
   \   0000020A   0x2101             MOVS     R1,#+1
   \   0000020C   0xF11B 0x0210      ADDS     R2,R11,#+16
   \   00000210   0x4091             LSLS     R1,R1,R2
   \   00000212   0x4288             CMP      R0,R1
   \   00000214   0xD101             BNE.N    ??CSP_GPIO_Cfg_29
   \   00000216   0x2001             MOVS     R0,#+1
   \   00000218   0xE000             B.N      ??CSP_GPIO_Cfg_30
   \                     ??CSP_GPIO_Cfg_29: (+1)
   \   0000021A   0x2000             MOVS     R0,#+0
   \                     ??CSP_GPIO_Cfg_30: (+1)
   \   0000021C   0x2800             CMP      R0,#+0
   \   0000021E   0xD011             BEQ.N    ??CSP_GPIO_Cfg_31
    362                      DEF_BIT_CLR(pin_mode_high, DEF_BIT_FIELD(2u, pin_bit_pos));
   \   00000220   0x2003             MOVS     R0,#+3
   \   00000222   0x40B0             LSLS     R0,R0,R6
   \   00000224   0xEA39 0x0900      BICS     R9,R9,R0
    363                      DEF_BIT_CLR(pin_sel_high,  DEF_BIT_FIELD(2u, pin_bit_pos));
   \   00000228   0x2003             MOVS     R0,#+3
   \   0000022A   0x40B0             LSLS     R0,R0,R6
   \   0000022C   0xEA3A 0x0A00      BICS     R10,R10,R0
    364          
    365                      DEF_BIT_SET(pin_mode_high, DEF_BIT_MASK(opt_pinmode, pin_bit_pos));        
   \   00000230   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000234   0x40B0             LSLS     R0,R0,R6
   \   00000236   0xEA50 0x0909      ORRS     R9,R0,R9
    366                      DEF_BIT_SET(pin_sel_high,  DEF_BIT_MASK(opt_pinsel,  pin_bit_pos));                    
   \   0000023A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000023E   0x40B0             LSLS     R0,R0,R6
   \   00000240   0xEA50 0x0A0A      ORRS     R10,R0,R10
    367                  }    
    368              }
   \                     ??CSP_GPIO_Cfg_31: (+1)
   \   00000244   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000248   0xE7A7             B.N      ??CSP_GPIO_Cfg_24
    369              
    370              CPU_CRITICAL_ENTER();
   \                     ??CSP_GPIO_Cfg_25: (+1)
   \   0000024A   0x.... 0x....      BL       CPU_SR_Save
   \   0000024E   0x9001             STR      R0,[SP, #+4]
   \   00000250   0x.... 0x....      BL       CPU_IntDisMeasStart
    371          
    372              CSP_GPIO_REG_PINMODELx(port_nbr) = pin_mode_low;
   \   00000254   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000256   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x4002c040
   \   0000025A   0xF840 0x7034      STR      R7,[R0, R4, LSL #+3]
    373              CSP_GPIO_REG_PINMODEHx(port_nbr) = pin_mode_high;
   \   0000025E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x4002c044
   \   00000264   0xF840 0x9034      STR      R9,[R0, R4, LSL #+3]
    374              CSP_GPIO_REG_PINSELLx(port_nbr)  = pin_sel_low;
   \   00000268   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000026A   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x4002c000
   \   0000026E   0xF840 0x8034      STR      R8,[R0, R4, LSL #+3]
    375              CSP_GPIO_REG_PINSELHx(port_nbr)  = pin_sel_high;
   \   00000272   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x4002c004
   \   00000278   0xF840 0xA034      STR      R10,[R0, R4, LSL #+3]
    376          
    377              CPU_CRITICAL_EXIT();
   \   0000027C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000280   0x9801             LDR      R0,[SP, #+4]
   \   00000282   0x.... 0x....      BL       CPU_SR_Restore
    378          
    379              if ((port_nbr == CSP_GPIO_PORT_NBR_00) ||
    380                  (port_nbr == CSP_GPIO_PORT_NBR_02)) {
   \   00000286   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000288   0x2C00             CMP      R4,#+0
   \   0000028A   0xD003             BEQ.N    ??CSP_GPIO_Cfg_32
   \   0000028C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000028E   0x2C02             CMP      R4,#+2
   \   00000290   0xF040 0x8094      BNE.W    ??CSP_GPIO_Cfg_33
    381                  
    382                  CPU_CRITICAL_ENTER();
   \                     ??CSP_GPIO_Cfg_32: (+1)
   \   00000294   0x.... 0x....      BL       CPU_SR_Save
   \   00000298   0x9001             STR      R0,[SP, #+4]
   \   0000029A   0x.... 0x....      BL       CPU_IntDisMeasStart
    383                  
    384                  if (int_en == DEF_YES) {
   \   0000029E   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   000002A2   0x2801             CMP      R0,#+1
   \   000002A4   0xD173             BNE.N    ??CSP_GPIO_Cfg_34
    385                      switch (int_pol) {
   \   000002A6   0xF8BD 0x003C      LDRH     R0,[SP, #+60]
   \   000002AA   0x2800             CMP      R0,#+0
   \   000002AC   0xD006             BEQ.N    ??CSP_GPIO_Cfg_35
   \   000002AE   0x2802             CMP      R0,#+2
   \   000002B0   0xD022             BEQ.N    ??CSP_GPIO_Cfg_36
   \   000002B2   0xD312             BCC.N    ??CSP_GPIO_Cfg_37
   \   000002B4   0x2804             CMP      R0,#+4
   \   000002B6   0xD04F             BEQ.N    ??CSP_GPIO_Cfg_38
   \   000002B8   0xD336             BCC.N    ??CSP_GPIO_Cfg_39
   \   000002BA   0xE067             B.N      ??CSP_GPIO_Cfg_40
    386                          case CSP_INT_POL_LEVEL_HIGH:
    387                               DEF_BIT_CLR(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \                     ??CSP_GPIO_Cfg_35: (+1)
   \   000002BC   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400fc148
   \   000002BE   0x6800             LDR      R0,[R0, #+0]
   \   000002C0   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   000002C4   0x4388             BICS     R0,R0,R1
   \   000002C6   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400fc148
   \   000002C8   0x6008             STR      R0,[R1, #+0]
    388                               DEF_BIT_SET(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u)); 
   \   000002CA   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400fc14c
   \   000002CC   0x6800             LDR      R0,[R0, #+0]
   \   000002CE   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   000002D2   0x4308             ORRS     R0,R1,R0
   \   000002D4   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400fc14c
   \   000002D6   0x6008             STR      R0,[R1, #+0]
    389                               break;
   \   000002D8   0xE06B             B.N      ??CSP_GPIO_Cfg_41
    390          
    391                          case CSP_INT_POL_LEVEL_LOW:
    392                               DEF_BIT_CLR(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \                     ??CSP_GPIO_Cfg_37: (+1)
   \   000002DA   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400fc148
   \   000002DC   0x6800             LDR      R0,[R0, #+0]
   \   000002DE   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   000002E2   0x4388             BICS     R0,R0,R1
   \   000002E4   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400fc148
   \   000002E6   0x6008             STR      R0,[R1, #+0]
    393                               DEF_BIT_CLR(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \   000002E8   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400fc14c
   \   000002EA   0x6800             LDR      R0,[R0, #+0]
   \   000002EC   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   000002F0   0x4388             BICS     R0,R0,R1
   \   000002F2   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400fc14c
   \   000002F4   0x6008             STR      R0,[R1, #+0]
    394                               break;
   \   000002F6   0xE05C             B.N      ??CSP_GPIO_Cfg_41
    395                          
    396                          case CSP_INT_POL_EDGE_POSITIVE:
    397                               DEF_BIT_SET(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_36: (+1)
   \   000002F8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000002FA   0x0120             LSLS     R0,R4,#+4
   \   000002FC   0x....             LDR.N    R1,??DataTable6_8  ;; 0x40028090
   \   000002FE   0x5808             LDR      R0,[R1, R0]
   \   00000300   0x4328             ORRS     R0,R5,R0
   \   00000302   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000304   0x0121             LSLS     R1,R4,#+4
   \   00000306   0x....             LDR.N    R2,??DataTable6_8  ;; 0x40028090
   \   00000308   0x5050             STR      R0,[R2, R1]
    398                               DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \   0000030A   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400fc148
   \   0000030C   0x6800             LDR      R0,[R0, #+0]
   \   0000030E   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   00000312   0x4308             ORRS     R0,R1,R0
   \   00000314   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400fc148
   \   00000316   0x6008             STR      R0,[R1, #+0]
    399                               DEF_BIT_SET(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u)); 
   \   00000318   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400fc14c
   \   0000031A   0x6800             LDR      R0,[R0, #+0]
   \   0000031C   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   00000320   0x4308             ORRS     R0,R1,R0
   \   00000322   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400fc14c
   \   00000324   0x6008             STR      R0,[R1, #+0]
    400                               break;
   \   00000326   0xE044             B.N      ??CSP_GPIO_Cfg_41
    401          
    402                          case CSP_INT_POL_EDGE_NEGATIVE:
    403                               DEF_BIT_SET(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_39: (+1)
   \   00000328   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000032A   0x0120             LSLS     R0,R4,#+4
   \   0000032C   0x....             LDR.N    R1,??DataTable6_9  ;; 0x40028094
   \   0000032E   0x5808             LDR      R0,[R1, R0]
   \   00000330   0x4328             ORRS     R0,R5,R0
   \   00000332   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000334   0x0121             LSLS     R1,R4,#+4
   \   00000336   0x....             LDR.N    R2,??DataTable6_9  ;; 0x40028094
   \   00000338   0x5050             STR      R0,[R2, R1]
    404                               DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \   0000033A   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400fc148
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   00000342   0x4308             ORRS     R0,R1,R0
   \   00000344   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400fc148
   \   00000346   0x6008             STR      R0,[R1, #+0]
    405                               DEF_BIT_CLR(CSP_GPIO_REG_EXT_POLAR, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \   00000348   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400fc14c
   \   0000034A   0x6800             LDR      R0,[R0, #+0]
   \   0000034C   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   00000350   0x4388             BICS     R0,R0,R1
   \   00000352   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400fc14c
   \   00000354   0x6008             STR      R0,[R1, #+0]
    406                               break;
   \   00000356   0xE02C             B.N      ??CSP_GPIO_Cfg_41
    407          
    408                          case CSP_INT_POL_EDGE_BOTH:
    409                               DEF_BIT_SET(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_38: (+1)
   \   00000358   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000035A   0x0120             LSLS     R0,R4,#+4
   \   0000035C   0x....             LDR.N    R1,??DataTable6_8  ;; 0x40028090
   \   0000035E   0x5808             LDR      R0,[R1, R0]
   \   00000360   0x4328             ORRS     R0,R5,R0
   \   00000362   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000364   0x0121             LSLS     R1,R4,#+4
   \   00000366   0x....             LDR.N    R2,??DataTable6_8  ;; 0x40028090
   \   00000368   0x5050             STR      R0,[R2, R1]
    410                               DEF_BIT_SET(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   \   0000036A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000036C   0x0120             LSLS     R0,R4,#+4
   \   0000036E   0x....             LDR.N    R1,??DataTable6_9  ;; 0x40028094
   \   00000370   0x5808             LDR      R0,[R1, R0]
   \   00000372   0x4328             ORRS     R0,R5,R0
   \   00000374   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000376   0x0121             LSLS     R1,R4,#+4
   \   00000378   0x....             LDR.N    R2,??DataTable6_9  ;; 0x40028094
   \   0000037A   0x5050             STR      R0,[R2, R1]
    411                               DEF_BIT_SET(CSP_GPIO_REG_EXT_MODE, (pins >> 10u) & DEF_BIT_FIELD(4u, 0u));
   \   0000037C   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400fc148
   \   0000037E   0x6800             LDR      R0,[R0, #+0]
   \   00000380   0xF3C5 0x2183      UBFX     R1,R5,#+10,#+4
   \   00000384   0x4308             ORRS     R0,R1,R0
   \   00000386   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400fc148
   \   00000388   0x6008             STR      R0,[R1, #+0]
    412                               break;
   \   0000038A   0xE012             B.N      ??CSP_GPIO_Cfg_41
    413          
    414                          default:
    415                               break;
   \                     ??CSP_GPIO_Cfg_40: (+1)
   \   0000038C   0xE011             B.N      ??CSP_GPIO_Cfg_41
    416                      }
    417                  } else {
    418                      DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_R(port_nbr), pins);
   \                     ??CSP_GPIO_Cfg_34: (+1)
   \   0000038E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000390   0x0120             LSLS     R0,R4,#+4
   \   00000392   0x....             LDR.N    R1,??DataTable6_8  ;; 0x40028090
   \   00000394   0x5808             LDR      R0,[R1, R0]
   \   00000396   0x43A8             BICS     R0,R0,R5
   \   00000398   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000039A   0x0121             LSLS     R1,R4,#+4
   \   0000039C   0x....             LDR.N    R2,??DataTable6_8  ;; 0x40028090
   \   0000039E   0x5050             STR      R0,[R2, R1]
    419                      DEF_BIT_CLR(CSP_GPIO_REG_INT_EN_F(port_nbr), pins);
   \   000003A0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000003A2   0x0120             LSLS     R0,R4,#+4
   \   000003A4   0x....             LDR.N    R1,??DataTable6_9  ;; 0x40028094
   \   000003A6   0x5808             LDR      R0,[R1, R0]
   \   000003A8   0x43A8             BICS     R0,R0,R5
   \   000003AA   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000003AC   0x0121             LSLS     R1,R4,#+4
   \   000003AE   0x....             LDR.N    R2,??DataTable6_9  ;; 0x40028094
   \   000003B0   0x5050             STR      R0,[R2, R1]
    420                  }
    421          
    422                  CPU_CRITICAL_EXIT();
   \                     ??CSP_GPIO_Cfg_41: (+1)
   \   000003B2   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000003B6   0x9801             LDR      R0,[SP, #+4]
   \   000003B8   0x.... 0x....      BL       CPU_SR_Restore
    423              }
    424          
    425              return (DEF_OK);
   \                     ??CSP_GPIO_Cfg_33: (+1)
   \   000003BC   0x2001             MOVS     R0,#+1
   \                     ??CSP_GPIO_Cfg_5: (+1)
   \   000003BE   0xB005             ADD      SP,SP,#+20
   \   000003C0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    426          }
    427          
    428          
    429          /*
    430          *********************************************************************************************************
    431          *                                         CSP_GPIO_BitClr()
    432          *
    433          * Description : Clear a group of pins for a specific I/O port.
    434          *
    435          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    436          *
    437          *               pins        Bit mask specifying which pins to clear.
    438          *
    439          * Return(s)   : none
    440          *
    441          * Caller(s)   : Application.
    442          *
    443          * Note(s)     : none.                   
    444          *********************************************************************************************************
    445          */
    446          

   \                                 In section .text, align 2, keep-with-next
    447          void  CSP_GPIO_BitClr (CSP_DEV_NBR   port_nbr,
    448                                 CSP_GPIO_MSK  pins)
    449          {
   \                     CSP_GPIO_BitClr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    450              CPU_SR_ALLOC();
   \   00000006   0x2600             MOVS     R6,#+0
    451          
    452          
    453          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    454              if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x2C05             CMP      R4,#+5
   \   0000000C   0xDA0D             BGE.N    ??CSP_GPIO_BitClr_0
    455                  return;
    456              }
    457          #endif
    458              
    459              CPU_CRITICAL_ENTER();
   \                     ??CSP_GPIO_BitClr_1: (+1)
   \   0000000E   0x.... 0x....      BL       CPU_SR_Save
   \   00000012   0x0006             MOVS     R6,R0
   \   00000014   0x.... 0x....      BL       CPU_IntDisMeasStart
    460              CSP_GPIO_REG_FIOCLRx(port_nbr) = pins;            
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x0160             LSLS     R0,R4,#+5
   \   0000001C   0x....             LDR.N    R1,??DataTable6_10  ;; 0x2009c01c
   \   0000001E   0x500D             STR      R5,[R1, R0]
    461              CPU_CRITICAL_EXIT();
   \   00000020   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       CPU_SR_Restore
    462          }
   \                     ??CSP_GPIO_BitClr_0: (+1)
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    463          
    464          
    465          /*
    466          *********************************************************************************************************
    467          *                                         CSP_GPIO_BitSet()
    468          *
    469          * Description : Set a group of pins for a specific I/O port
    470          *
    471          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    472          *
    473          *               pins        Bit mask specifying which pins to set.
    474          *
    475          * Return(s)   : none
    476          *
    477          * Caller(s)   : Application.
    478          *
    479          * Note(s)     : none.                   
    480          *********************************************************************************************************
    481          */
    482          

   \                                 In section .text, align 2, keep-with-next
    483          void  CSP_GPIO_BitSet (CSP_DEV_NBR    port_nbr,
    484                                 CSP_GPIO_MSK  pins)
    485          {
   \                     CSP_GPIO_BitSet: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    486              CPU_SR_ALLOC();
   \   00000006   0x2600             MOVS     R6,#+0
    487          
    488          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    489              if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x2C05             CMP      R4,#+5
   \   0000000C   0xDA0D             BGE.N    ??CSP_GPIO_BitSet_0
    490                  return;
    491              }
    492          #endif
    493              
    494              CPU_CRITICAL_ENTER();
   \                     ??CSP_GPIO_BitSet_1: (+1)
   \   0000000E   0x.... 0x....      BL       CPU_SR_Save
   \   00000012   0x0006             MOVS     R6,R0
   \   00000014   0x.... 0x....      BL       CPU_IntDisMeasStart
    495              CSP_GPIO_REG_FIOSETx(port_nbr) = pins;            
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x0160             LSLS     R0,R4,#+5
   \   0000001C   0x....             LDR.N    R1,??DataTable6_11  ;; 0x2009c018
   \   0000001E   0x500D             STR      R5,[R1, R0]
    496              CPU_CRITICAL_EXIT();
   \   00000020   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       CPU_SR_Restore
    497          }
   \                     ??CSP_GPIO_BitSet_0: (+1)
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    498          
    499          
    500          /*
    501          *********************************************************************************************************
    502          *                                         CSP_GPIO_BitToggle()
    503          *
    504          * Description : Toggle a group of pins for a specific I/O port.
    505          *
    506          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    507          *
    508          *               pins        Bit mask specifying which pins to Toggle.
    509          *
    510          * Return(s)   : none
    511          *
    512          * Caller(s)   : Application.
    513          *
    514          * Note(s)     : none.                   
    515          *********************************************************************************************************
    516          */
    517          

   \                                 In section .text, align 2, keep-with-next
    518          void  CSP_GPIO_BitToggle (CSP_DEV_NBR    port_nbr,
    519                                    CSP_GPIO_MSK  pins)                          
    520          {
   \                     CSP_GPIO_BitToggle: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    521              CSP_GPIO_MSK  pins_set;
    522              CSP_GPIO_MSK  pins_clr;
    523              CPU_SR_ALLOC();
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    524              
    525          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)    
    526              if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x2C05             CMP      R4,#+5
   \   00000010   0xDA1E             BGE.N    ??CSP_GPIO_BitToggle_0
    527                  return;
    528              }
    529          #endif
    530              
    531              pins_clr                       =  (CSP_GPIO_REG_FIOPINx(port_nbr)) & pins;    
   \                     ??CSP_GPIO_BitToggle_1: (+1)
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x0160             LSLS     R0,R4,#+5
   \   00000016   0x....             LDR.N    R1,??DataTable6_12  ;; 0x2009c014
   \   00000018   0x5808             LDR      R0,[R1, R0]
   \   0000001A   0x4028             ANDS     R0,R5,R0
   \   0000001C   0x0007             MOVS     R7,R0
    532              pins_set                       = ~(CSP_GPIO_REG_FIOPINx(port_nbr)) & pins;
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x0160             LSLS     R0,R4,#+5
   \   00000022   0x....             LDR.N    R1,??DataTable6_12  ;; 0x2009c014
   \   00000024   0x5808             LDR      R0,[R1, R0]
   \   00000026   0xEA35 0x0000      BICS     R0,R5,R0
   \   0000002A   0x0006             MOVS     R6,R0
    533              
    534              CPU_CRITICAL_ENTER();
   \   0000002C   0x.... 0x....      BL       CPU_SR_Save
   \   00000030   0x4680             MOV      R8,R0
   \   00000032   0x.... 0x....      BL       CPU_IntDisMeasStart
    535              CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x0160             LSLS     R0,R4,#+5
   \   0000003A   0x....             LDR.N    R1,??DataTable6_10  ;; 0x2009c01c
   \   0000003C   0x500F             STR      R7,[R1, R0]
    536              CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;    
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x0160             LSLS     R0,R4,#+5
   \   00000042   0x....             LDR.N    R1,??DataTable6_11  ;; 0x2009c018
   \   00000044   0x500E             STR      R6,[R1, R0]
    537              CPU_CRITICAL_EXIT();
   \   00000046   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000004A   0x4640             MOV      R0,R8
   \   0000004C   0x.... 0x....      BL       CPU_SR_Restore
    538          }
   \                     ??CSP_GPIO_BitToggle_0: (+1)
   \   00000050   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    539          
    540          
    541          /*
    542          *********************************************************************************************************
    543          *                                         CSP_GPIO_Rd()
    544          *
    545          * Description : Read the current value of the port.
    546          *
    547          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    548          *
    549          * Return(s)   : The current value of the port.
    550          *
    551          * Caller(s)   : Application.
    552          *
    553          * Note(s)     : none.                   
    554          *********************************************************************************************************
    555          */
    556          

   \                                 In section .text, align 2, keep-with-next
    557          CSP_GPIO_MSK  CSP_GPIO_Rd (CSP_DEV_NBR  port_nbr)
    558          {
   \                     CSP_GPIO_Rd: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    559              CSP_GPIO_MSK  port_val;
    560          
    561          
    562          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    563              if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0x2905             CMP      R1,#+5
   \   00000006   0xDB01             BLT.N    ??CSP_GPIO_Rd_0
    564                  return (CSP_GPIO_MSK)(0);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE005             B.N      ??CSP_GPIO_Rd_1
    565              }
    566          #endif
    567          
    568              port_val = CSP_GPIO_REG_FIOPINx(port_nbr);
   \                     ??CSP_GPIO_Rd_0: (+1)
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x0148             LSLS     R0,R1,#+5
   \   00000010   0x....             LDR.N    R3,??DataTable6_12  ;; 0x2009c014
   \   00000012   0x5818             LDR      R0,[R3, R0]
   \   00000014   0x0002             MOVS     R2,R0
    569              
    570              return (port_val);
   \   00000016   0x0010             MOVS     R0,R2
   \                     ??CSP_GPIO_Rd_1: (+1)
   \   00000018   0x4770             BX       LR               ;; return
    571          }
    572          
    573          
    574          /*
    575          *********************************************************************************************************
    576          *                                         CSP_GPIO_Wr()
    577          *
    578          * Description : Write a value to a specific port.
    579          *
    580          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    581          *
    582          *               val         Value to be written in the port.
    583          *
    584          * Return(s)   : The current value of the port.
    585          *
    586          * Caller(s)   : Application.
    587          *
    588          * Note(s)     : None.
    589          *********************************************************************************************************
    590          */
    591          

   \                                 In section .text, align 2, keep-with-next
    592          void  CSP_GPIO_Wr (CSP_DEV_NBR   port_nbr,
    593                             CSP_GPIO_MSK  val)
    594          {
   \                     CSP_GPIO_Wr: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    595              CPU_INT32U  pins_clr;
    596              CPU_INT32U  pins_set;
    597              
    598          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)     
    599              if (port_nbr > CSP_GPIO_PORT_NBR_04) {
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x2805             CMP      R0,#+5
   \   00000006   0xDA0A             BGE.N    ??CSP_GPIO_Wr_0
    600                  return;
    601              }
    602          #endif
    603              
    604              pins_set =  val;
   \                     ??CSP_GPIO_Wr_1: (+1)
   \   00000008   0x000B             MOVS     R3,R1
    605              pins_clr = ~val;
   \   0000000A   0x43CC             MVNS     R4,R1
   \   0000000C   0x0022             MOVS     R2,R4
    606              CSP_GPIO_REG_FIOSETx(port_nbr) = pins_set;
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x0144             LSLS     R4,R0,#+5
   \   00000012   0x....             LDR.N    R5,??DataTable6_11  ;; 0x2009c018
   \   00000014   0x512B             STR      R3,[R5, R4]
    607              CSP_GPIO_REG_FIOCLRx(port_nbr) = pins_clr;
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x0144             LSLS     R4,R0,#+5
   \   0000001A   0x....             LDR.N    R5,??DataTable6_10  ;; 0x2009c01c
   \   0000001C   0x512A             STR      R2,[R5, R4]
    608          }
   \                     ??CSP_GPIO_Wr_0: (+1)
   \   0000001E   0xBC30             POP      {R4,R5}
   \   00000020   0x4770             BX       LR               ;; return
    609          
    610          
    611          /*
    612          *********************************************************************************************************
    613          *                                         CSP_GPIO_IntClr()
    614          *
    615          * Description : Clear pending interrupts for a specific port.
    616          *
    617          * Argument(s) : port_nbr    GPIO port number. (See 'CSP_GPIO_Cfg()' note #1).
    618          *
    619          * Return(s)   : Interrupt status.
    620          *
    621          * Caller(s)   : Application.
    622          *
    623          * Note(s)     : None.
    624          *********************************************************************************************************
    625          */
    626          

   \                                 In section .text, align 2, keep-with-next
    627          CSP_GPIO_MSK  CSP_GPIO_IntClr (CSP_DEV_NBR  port_nbr)
    628          {
   \                     CSP_GPIO_IntClr: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    629              CPU_INT32U   int_stat;
    630              
    631          
    632              int_stat = DEF_BIT_NONE;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x0010             MOVS     R0,R2
    633              
    634              switch (port_nbr) {
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD006             BEQ.N    ??CSP_GPIO_IntClr_0
   \   0000000C   0x2902             CMP      R1,#+2
   \   0000000E   0xD014             BEQ.N    ??CSP_GPIO_IntClr_1
   \   00000010   0xD302             BCC.N    ??CSP_GPIO_IntClr_2
   \   00000012   0x2904             CMP      R1,#+4
   \   00000014   0xD000             BEQ.N    ??CSP_GPIO_IntClr_2
   \   00000016   0xD271             BCS.N    ??CSP_GPIO_IntClr_3
    635                  case CSP_GPIO_PORT_NBR_01:
    636                  case CSP_GPIO_PORT_NBR_03:
    637                  case CSP_GPIO_PORT_NBR_04:
    638                       break;
   \                     ??CSP_GPIO_IntClr_2: (+1)
   \   00000018   0xE070             B.N      ??CSP_GPIO_IntClr_4
    639          
    640                  case CSP_GPIO_PORT_NBR_00:
    641                       if (DEF_BIT_IS_CLR(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
   \                     ??CSP_GPIO_IntClr_0: (+1)
   \   0000001A   0x....             LDR.N    R2,??DataTable6_13  ;; 0x40028080
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000022   0xF092 0x0201      EORS     R2,R2,#0x1
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD167             BNE.N    ??CSP_GPIO_IntClr_4
    642                           break;
    643                       }
    644                       int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_00);
   \                     ??CSP_GPIO_IntClr_5: (+1)
   \   0000002C   0x....             LDR.N    R2,??DataTable6_14  ;; 0x40028084
   \   0000002E   0x6812             LDR      R2,[R2, #+0]
   \   00000030   0x0010             MOVS     R0,R2
    645                       int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_00);             
   \   00000032   0x....             LDR.N    R2,??DataTable6_15  ;; 0x40028088
   \   00000034   0x6812             LDR      R2,[R2, #+0]
   \   00000036   0x4310             ORRS     R0,R2,R0
    646                       break;
   \   00000038   0xE060             B.N      ??CSP_GPIO_IntClr_4
    647          
    648                  case CSP_GPIO_PORT_NBR_02:
    649                       if (DEF_BIT_IS_SET(CSP_GPIO_REG_INT_STAT, DEF_BIT_00)) {
   \                     ??CSP_GPIO_IntClr_1: (+1)
   \   0000003A   0x....             LDR.N    R2,??DataTable6_13  ;; 0x40028080
   \   0000003C   0x6812             LDR      R2,[R2, #+0]
   \   0000003E   0x07D2             LSLS     R2,R2,#+31
   \   00000040   0xD505             BPL.N    ??CSP_GPIO_IntClr_6
    650                           int_stat  = CSP_GPIO_REG_INT_STAT_R(CSP_GPIO_PORT_NBR_02);
   \   00000042   0x....             LDR.N    R2,??DataTable6_16  ;; 0x400280a4
   \   00000044   0x6812             LDR      R2,[R2, #+0]
   \   00000046   0x0010             MOVS     R0,R2
    651                           int_stat |= CSP_GPIO_REG_INT_STAT_F(CSP_GPIO_PORT_NBR_02);
   \   00000048   0x....             LDR.N    R2,??DataTable6_17  ;; 0x400280a8
   \   0000004A   0x6812             LDR      R2,[R2, #+0]
   \   0000004C   0x4310             ORRS     R0,R2,R0
    652                       }
    653                       
    654                       if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 20u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
    655                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_00)                            == DEF_YES) &&
    656                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_00)                            == DEF_YES)) {
   \                     ??CSP_GPIO_IntClr_6: (+1)
   \   0000004E   0x....             LDR.N    R2,??DataTable6_18  ;; 0x4002c010
   \   00000050   0x6812             LDR      R2,[R2, #+0]
   \   00000052   0xF3C2 0x5201      UBFX     R2,R2,#+20,#+2
   \   00000056   0x2A01             CMP      R2,#+1
   \   00000058   0xD10A             BNE.N    ??CSP_GPIO_IntClr_7
   \   0000005A   0x....             LDR.N    R2,??DataTable6_6  ;; 0x400fc148
   \   0000005C   0x6812             LDR      R2,[R2, #+0]
   \   0000005E   0x07D2             LSLS     R2,R2,#+31
   \   00000060   0xD506             BPL.N    ??CSP_GPIO_IntClr_7
   \   00000062   0x....             LDR.N    R2,??DataTable6_19  ;; 0x400fc140
   \   00000064   0x6812             LDR      R2,[R2, #+0]
   \   00000066   0x07D2             LSLS     R2,R2,#+31
   \   00000068   0xD502             BPL.N    ??CSP_GPIO_IntClr_7
    657                           CSP_GPIO_REG_EXT_INT = DEF_BIT_00;
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x....             LDR.N    R3,??DataTable6_19  ;; 0x400fc140
   \   0000006E   0x601A             STR      R2,[R3, #+0]
    658                       }
    659                       if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 22u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
    660                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_01)                            == DEF_YES) &&
    661                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_01)                            == DEF_YES)) {
   \                     ??CSP_GPIO_IntClr_7: (+1)
   \   00000070   0x....             LDR.N    R2,??DataTable6_18  ;; 0x4002c010
   \   00000072   0x6812             LDR      R2,[R2, #+0]
   \   00000074   0xF3C2 0x5281      UBFX     R2,R2,#+22,#+2
   \   00000078   0x2A01             CMP      R2,#+1
   \   0000007A   0xD110             BNE.N    ??CSP_GPIO_IntClr_8
   \   0000007C   0x....             LDR.N    R2,??DataTable6_6  ;; 0x400fc148
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0x0852             LSRS     R2,R2,#+1
   \   00000082   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000086   0x2A00             CMP      R2,#+0
   \   00000088   0xD009             BEQ.N    ??CSP_GPIO_IntClr_8
   \   0000008A   0x....             LDR.N    R2,??DataTable6_19  ;; 0x400fc140
   \   0000008C   0x6812             LDR      R2,[R2, #+0]
   \   0000008E   0x0852             LSRS     R2,R2,#+1
   \   00000090   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000094   0x2A00             CMP      R2,#+0
   \   00000096   0xD002             BEQ.N    ??CSP_GPIO_IntClr_8
    662                           CSP_GPIO_REG_EXT_INT = DEF_BIT_01;
   \   00000098   0x2202             MOVS     R2,#+2
   \   0000009A   0x....             LDR.N    R3,??DataTable6_19  ;; 0x400fc140
   \   0000009C   0x601A             STR      R2,[R3, #+0]
    663                       }
    664                       if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 24u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
    665                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_02)                            == DEF_YES) &&
    666                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_02)                            == DEF_YES)) {
   \                     ??CSP_GPIO_IntClr_8: (+1)
   \   0000009E   0x....             LDR.N    R2,??DataTable6_18  ;; 0x4002c010
   \   000000A0   0x6812             LDR      R2,[R2, #+0]
   \   000000A2   0xF3C2 0x6201      UBFX     R2,R2,#+24,#+2
   \   000000A6   0x2A01             CMP      R2,#+1
   \   000000A8   0xD110             BNE.N    ??CSP_GPIO_IntClr_9
   \   000000AA   0x....             LDR.N    R2,??DataTable6_6  ;; 0x400fc148
   \   000000AC   0x6812             LDR      R2,[R2, #+0]
   \   000000AE   0x0892             LSRS     R2,R2,#+2
   \   000000B0   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   000000B4   0x2A00             CMP      R2,#+0
   \   000000B6   0xD009             BEQ.N    ??CSP_GPIO_IntClr_9
   \   000000B8   0x....             LDR.N    R2,??DataTable6_19  ;; 0x400fc140
   \   000000BA   0x6812             LDR      R2,[R2, #+0]
   \   000000BC   0x0892             LSRS     R2,R2,#+2
   \   000000BE   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   000000C2   0x2A00             CMP      R2,#+0
   \   000000C4   0xD002             BEQ.N    ??CSP_GPIO_IntClr_9
    667                           CSP_GPIO_REG_EXT_INT = DEF_BIT_02;
   \   000000C6   0x2204             MOVS     R2,#+4
   \   000000C8   0x....             LDR.N    R3,??DataTable6_19  ;; 0x400fc140
   \   000000CA   0x601A             STR      R2,[R3, #+0]
    668                       }
    669                       if ((((CSP_GPIO_REG_PINSELLx(CSP_GPIO_PORT_NBR_02) >> 27u) & DEF_BIT_FIELD(2u, 0u)) == 1u     ) &&  
    670                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_MODE, DEF_BIT_03)                            == DEF_YES) &&
    671                             (DEF_BIT_IS_SET(CSP_GPIO_REG_EXT_INT , DEF_BIT_03)                            == DEF_YES)) {
   \                     ??CSP_GPIO_IntClr_9: (+1)
   \   000000CC   0x....             LDR.N    R2,??DataTable6_18  ;; 0x4002c010
   \   000000CE   0x6812             LDR      R2,[R2, #+0]
   \   000000D0   0xF3C2 0x62C1      UBFX     R2,R2,#+27,#+2
   \   000000D4   0x2A01             CMP      R2,#+1
   \   000000D6   0xD110             BNE.N    ??CSP_GPIO_IntClr_10
   \   000000D8   0x....             LDR.N    R2,??DataTable6_6  ;; 0x400fc148
   \   000000DA   0x6812             LDR      R2,[R2, #+0]
   \   000000DC   0x08D2             LSRS     R2,R2,#+3
   \   000000DE   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   000000E2   0x2A00             CMP      R2,#+0
   \   000000E4   0xD009             BEQ.N    ??CSP_GPIO_IntClr_10
   \   000000E6   0x....             LDR.N    R2,??DataTable6_19  ;; 0x400fc140
   \   000000E8   0x6812             LDR      R2,[R2, #+0]
   \   000000EA   0x08D2             LSRS     R2,R2,#+3
   \   000000EC   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   000000F0   0x2A00             CMP      R2,#+0
   \   000000F2   0xD002             BEQ.N    ??CSP_GPIO_IntClr_10
    672                           CSP_GPIO_REG_EXT_INT = DEF_BIT_03;
   \   000000F4   0x2208             MOVS     R2,#+8
   \   000000F6   0x....             LDR.N    R3,??DataTable6_19  ;; 0x400fc140
   \   000000F8   0x601A             STR      R2,[R3, #+0]
    673                       }             
    674                       break;
   \                     ??CSP_GPIO_IntClr_10: (+1)
   \   000000FA   0xE7FF             B.N      ??CSP_GPIO_IntClr_4
    675                  
    676                  default:
    677                       break;
    678                  
    679              }
    680          
    681              if (int_stat != DEF_BIT_NONE) {
   \                     ??CSP_GPIO_IntClr_3: (+1)
   \                     ??CSP_GPIO_IntClr_4: (+1)
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD003             BEQ.N    ??CSP_GPIO_IntClr_11
    682                  CSP_GPIO_REG_INT_CLR(port_nbr) = int_stat;
   \   00000100   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000102   0x010A             LSLS     R2,R1,#+4
   \   00000104   0x....             LDR.N    R3,??DataTable6_20  ;; 0x4002808c
   \   00000106   0x5098             STR      R0,[R3, R2]
    683              }
    684          
    685              return (int_stat);
   \                     ??CSP_GPIO_IntClr_11: (+1)
   \   00000108   0x4770             BX       LR               ;; return
    686          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x2009C000         DC32     0x2009c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4002C054         DC32     0x4002c054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x4002C040         DC32     0x4002c040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x4002C044         DC32     0x4002c044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4002C004         DC32     0x4002c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x400FC148         DC32     0x400fc148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x400FC14C         DC32     0x400fc14c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40028090         DC32     0x40028090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x40028094         DC32     0x40028094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x2009C01C         DC32     0x2009c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x2009C018         DC32     0x2009c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x2009C014         DC32     0x2009c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x40028080         DC32     0x40028080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x40028084         DC32     0x40028084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x40028088         DC32     0x40028088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x400280A4         DC32     0x400280a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x400280A8         DC32     0x400280a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x4002C010         DC32     0x4002c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x400FC140         DC32     0x400fc140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x4002808C         DC32     0x4002808c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CSP_GPIO_BitClr
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   CSP_GPIO_BitSet
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      24   CSP_GPIO_BitToggle
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
      56   CSP_GPIO_Cfg
        56   -> CPU_IntDisMeasStart
        56   -> CPU_IntDisMeasStop
        56   -> CPU_SR_Restore
        56   -> CPU_SR_Save
       0   CSP_GPIO_Init
       0   CSP_GPIO_IntClr
       0   CSP_GPIO_Rd
       8   CSP_GPIO_Wr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      44  CSP_GPIO_BitClr
      44  CSP_GPIO_BitSet
      84  CSP_GPIO_BitToggle
     964  CSP_GPIO_Cfg
       2  CSP_GPIO_Init
     266  CSP_GPIO_IntClr
      26  CSP_GPIO_Rd
      34  CSP_GPIO_Wr

 
 1 548 bytes in section .text
 
 1 548 bytes of CODE memory

Errors: none
Warnings: none
