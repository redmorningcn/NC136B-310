###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Sep/2017  21:02:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_pm.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_pm.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\csp_pm.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\csp_pm.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\uC-CSP\MCU\NXP\LPC17xx\csp_pm.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              uC/CSP
      4          *                                        Chip Support Package
      5          *
      6          *                            (c) Copyright 2010; Micrium, Inc.; Weston, FL
      7          *                         (c) Copyright 2003-2010; Micrium, Inc.; Weston, FL
      8          *
      9          *               All rights reserved. Protected by international copyright laws.
     10          *
     11          *               uC/CSP is provided in source form to registered licensees ONLY.  It is
     12          *               illegal to distribute this source code to any third party unless you receive
     13          *               written permission by an authorized Micrium representative.  Knowledge of
     14          *               the source code may NOT be used to develop a similar product.
     15          *
     16          *               Please help us continue to provide the Embedded community with the finest
     17          *               software available.  Your honesty is greatly appreciated.
     18          *
     19          *               You can contact us at www.micrium.com.
     20          *********************************************************************************************************
     21          */
     22          
     23          /*
     24          *********************************************************************************************************
     25          *
     26          *                                       POWER & CLOCK MANAGEMENT
     27          *                                            NXP  LPC17XX
     28          *
     29          * Filename      : csp_pm.c
     30          * Version       : V1.00
     31          * Programmer(s) : FT
     32          *********************************************************************************************************
     33          * Note(s)       : 
     34          *********************************************************************************************************
     35          */
     36          
     37          
     38          /*
     39          *********************************************************************************************************
     40          *                                            INCLUDE FILES
     41          *********************************************************************************************************
     42          */
     43          
     44          #define    CSP_PM_MODULE
     45          #include   <csp.h>
     46          
     47          /*
     48          *********************************************************************************************************
     49          *                                            LOCAL DEFINES
     50          *********************************************************************************************************
     51          */
     52          
     53                                                                          /* ---------- PCONP REGISTERS RESERVED VALUES -------- */
     54          #define  CSP_PM_PER_CLK_NBR_PCONP_RSVD0               0u
     55          #define  CSP_PM_PER_CLK_NBR_PCONP_RSVD1               5u
     56          #define  CSP_PM_PER_CLK_NBR_PCONP_RSVD2              11u
     57          #define  CSP_PM_PER_CLK_NBR_PCONP_RSVD3              20u
     58          #define  CSP_PM_PER_CLK_NBR_PCONP_RSVD4              28u
     59          
     60                                                                          /* --------- PCLKSEL REGISTERS RESERVED VALUES -------- */
     61          #define  CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD0             5u  
     62          #define  CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD1             9u  
     63          #define  CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD2            20u  
     64          #define  CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD3            28u  
     65          
     66                                                                          /* ---------------- REGISTER DEFINES ------------------ */
     67          #define  CSP_PM_ADDR_PLL0                       ( (CPU_INT32U )0x400FC080)
     68          #define  CSP_PM_ADDR_PLL1                       ( (CPU_INT32U )0x400FC0A0)
     69            
     70          #define  CSP_PM_REG_PLLCTRL0                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL0 + 0x00))
     71          #define  CSP_PM_REG_PLLCFG0                     (*(CPU_REG32 *)(CSP_PM_ADDR_PLL0 + 0x04))
     72          #define  CSP_PM_REG_PLLSTAT0                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL0 + 0x08))
     73          #define  CSP_PM_REG_PLLFEED0                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL0 + 0x0C))
     74          
     75          #define  CSP_PM_REG_PLLCTRL1                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL1 + 0x00))
     76          #define  CSP_PM_REG_PLLCFG1                     (*(CPU_REG32 *)(CSP_PM_ADDR_PLL1 + 0x04))
     77          #define  CSP_PM_REG_PLLSTAT1                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL1 + 0x08))
     78          #define  CSP_PM_REG_PLLFEED1                    (*(CPU_REG32 *)(CSP_PM_ADDR_PLL1 + 0x0C))
     79          
     80                                                                          /* ---------- POWER CONTROL REGISTER DEFINES ---------- */
     81          #define  CSP_PM_REG_PCON                        (*(CPU_REG32 *)(0x400FC0C0))
     82          #define  CSP_PM_REG_PCONP                       (*(CPU_REG32 *)(0x400FC0C4))
     83          
     84                                                                          /* -------- CLOCK SOURCE SELECT REGISTER DEFINE ------- */
     85          #define  CSP_PM_REG_CLKSRCSEL                   (*(CPU_REG32 *)(0x400FC10Cu))
     86          
     87                                                                          /* ---------- PLL STATUS REGISTER BIT DEFINES --------- */
     88          #define  CSP_PM_MSK_PLLSTAT0_MSEL               DEF_BIT_FIELD(15,  0)
     89          #define  CSP_PM_MSK_PLLSTAT0_PSEL               DEF_BIT_FIELD(8 , 16)
     90          #define  CSP_PM_MSK_PLLSTAT0_PLLE               DEF_BIT_24      /* Read-back for the PLL enable bit.                    */
     91          #define  CSP_PM_MSK_PLLSTAT0_PLLC               DEF_BIT_25      /* Read-back for the PLL connect bit.                   */
     92          #define  CSP_PM_MSK_PLLSTAT0_PLOCK              DEF_BIT_26      /* Refkect the PLL lock status.                         */
     93          
     94          #define  CSP_PM_MSK_PLLSTAT1_MSEL               DEF_BIT_FIELD(5,  0)
     95          #define  CSP_PM_MSK_PLLSTAT1_PSEL               DEF_BIT_FIELD(2 , 5)
     96          #define  CSP_PM_MSK_PLLSTAT1_PLLE               DEF_BIT_08      /* Read-back for the PLL enable bit.                    */
     97          #define  CSP_PM_MSK_PLLSTAT1_PLLC               DEF_BIT_09      /* Read-back for the PLL connect bit.                   */
     98          #define  CSP_PM_MSK_PLLSTAT1_PLOCK              DEF_BIT_10      /* Refkect the PLL lock status.                         */
     99          
    100          
    101                                                                          /* --------- CLOCK DIVIDERS REGISTER DEFINITION ------- */
    102          #define  CSP_PM_REG_CCLKCFG                     (*(CPU_REG32 *)(0x400FC104))
    103          #define  CSP_PM_REG_USBCLKCFG                   (*(CPU_REG32 *)(0x400FC108))
    104          #define  CSP_PM_REG_IRCTRIM                     (*(CPU_REG32 *)(0x400FC1A4))
    105          #define  CSP_PM_REG_PCLKSEL0                    (*(CPU_REG32 *)(0x400FC1A8))
    106          #define  CSP_PM_REG_PCLKSEL1                    (*(CPU_REG32 *)(0x400FC1AC))
    107          
    108                                                                          /* ------ INTERNAL OSCILLATOR/CLOCK FREQUENCY ------- */
    109          #define  CSP_PM_INT_RC_OSC_FREQ_HZ               4000000L       /* IRC frequency is 4Mhz.                             */
    110                                                                          /* RTC oscillator frequency                           */
    111          #define  CSP_PM_INT_RTC_OSC_FREQ_HZ              CSP_CFG_PM_SLOW_XTAL_FREQ_HZ
    112          
    113          
    114          /*
    115          *********************************************************************************************************
    116          *                                           LOCAL CONSTANTS
    117          *********************************************************************************************************
    118          */
    119          
    120          
    121          /*
    122          *********************************************************************************************************
    123          *                                          LOCAL DATA TYPES
    124          *********************************************************************************************************
    125          */
    126          
    127          
    128          /*
    129          *********************************************************************************************************
    130          *                                            LOCAL TABLES
    131          *********************************************************************************************************
    132          */
    133          
    134          
    135          /*
    136          *********************************************************************************************************
    137          *                                       LOCAL GLOBAL VARIABLES
    138          *********************************************************************************************************
    139          */
    140          
    141          
    142          /*
    143          *********************************************************************************************************
    144          *                                            LOCAL MACRO's
    145          *********************************************************************************************************
    146          */
    147          
    148          
    149          /*
    150          *********************************************************************************************************
    151          *                                      LOCAL FUNCTION PROTOTYPES
    152          *********************************************************************************************************
    153          */
    154          
    155          
    156          /*
    157          *********************************************************************************************************
    158          *                                     LOCAL CONFIGURATION ERRORS
    159          *********************************************************************************************************
    160          */
    161          
    162          
    163          /*
    164          *********************************************************************************************************
    165          *********************************************************************************************************
    166          *                                           LOCAL FUNCTIONS
    167          *********************************************************************************************************
    168          *********************************************************************************************************
    169          */
    170          
    171          /*
    172          *********************************************************************************************************
    173          *                                            CSP_PM_Init()
    174          *
    175          * Description : Initialize power management module.
    176          *
    177          * Argument(s) : none.
    178          *
    179          * Return(s)   : None.
    180          *
    181          * Caller(s)   : Application.
    182          *
    183          * Note(s)     : None.
    184          *********************************************************************************************************
    185          */
    186          

   \                                 In section .text, align 2, keep-with-next
    187          void  CSP_PM_Init (void) 
    188          {
    189          
    190          } 
   \                     CSP_PM_Init: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    191          
    192          
    193          /*
    194          *********************************************************************************************************
    195          *                                         CSP_PM_CPU_ClkFreqGet()
    196          *
    197          * Description : Return the CPU clock frequency.
    198          *                   
    199          * Argument(s) : none
    200          *  
    201          * Return(s)   : The CPU frequency in Hertz.
    202          *
    203          * Caller(s)   : Application.
    204          *
    205          * Note(s)     : none.              
    206          *********************************************************************************************************
    207          */
    208          

   \                                 In section .text, align 2, keep-with-next
    209          CPU_INT32U  CSP_PM_CPU_ClkFreqGet (void)
    210          {
   \                     CSP_PM_CPU_ClkFreqGet: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    211              CPU_INT32U  cpu_freq;
    212              CPU_INT08U  cpu_div;
    213              CPU_INT16U  pll_mul;
    214              CPU_INT08U  pll_div;
    215              CPU_INT32U  reg_val;
    216          
    217          
    218              reg_val = CSP_PM_REG_CLKSRCSEL & DEF_BIT_FIELD(2u, 0u);
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x400fc10c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000000A   0x0005             MOVS     R5,R0
    219           
    220              switch (reg_val) {
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD003             BEQ.N    ??CSP_PM_CPU_ClkFreqGet_0
   \   00000010   0x2D02             CMP      R5,#+2
   \   00000012   0xD007             BEQ.N    ??CSP_PM_CPU_ClkFreqGet_1
   \   00000014   0xD303             BCC.N    ??CSP_PM_CPU_ClkFreqGet_2
   \   00000016   0xE009             B.N      ??CSP_PM_CPU_ClkFreqGet_3
    221                  case 0u:
    222                       cpu_freq = CSP_PM_INT_RC_OSC_FREQ_HZ;
   \                     ??CSP_PM_CPU_ClkFreqGet_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable4_1  ;; 0x3d0900
   \   0000001A   0x0001             MOVS     R1,R0
    223                       break;
   \   0000001C   0xE008             B.N      ??CSP_PM_CPU_ClkFreqGet_4
    224              
    225                  case 1u:
    226                       cpu_freq = CSP_CFG_PM_MAIN_XTAL_FREQ_HZ;
   \                     ??CSP_PM_CPU_ClkFreqGet_2: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable4_2  ;; 0xb71b00
   \   00000020   0x0001             MOVS     R1,R0
    227                       break;
   \   00000022   0xE005             B.N      ??CSP_PM_CPU_ClkFreqGet_4
    228          
    229                  case 2u:
    230                       cpu_freq = CSP_PM_INT_RTC_OSC_FREQ_HZ;
   \                     ??CSP_PM_CPU_ClkFreqGet_1: (+1)
   \   00000024   0xF44F 0x4000      MOV      R0,#+32768
   \   00000028   0x0001             MOVS     R1,R0
    231                       break;
   \   0000002A   0xE001             B.N      ??CSP_PM_CPU_ClkFreqGet_4
    232                            
    233                  default:
    234                       return ((CPU_INT32U)(0u));
   \                     ??CSP_PM_CPU_ClkFreqGet_3: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE025             B.N      ??CSP_PM_CPU_ClkFreqGet_5
    235              }
    236           
    237              pll_mul =   ((CSP_PM_REG_PLLSTAT0 & CSP_PM_MSK_PLLSTAT0_MSEL)          + 1u);
   \                     ??CSP_PM_CPU_ClkFreqGet_4: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400fc088
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000036   0x0C40             LSRS     R0,R0,#+17
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x0003             MOVS     R3,R0
    238              pll_div = ((((CSP_PM_REG_PLLSTAT0 & CSP_PM_MSK_PLLSTAT0_PSEL)) >> 16u) + 1u);
   \   0000003C   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400fc088
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x0C00             LSRS     R0,R0,#+16
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x0004             MOVS     R4,R0
    239          
    240              if (DEF_BIT_IS_SET(CSP_PM_REG_PLLSTAT0, (CSP_PM_MSK_PLLSTAT0_PLLE | 
    241                                                       CSP_PM_MSK_PLLSTAT0_PLLC |
    242                                                       CSP_PM_MSK_PLLSTAT0_PLOCK ))) {
   \   00000046   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400fc088
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF010 0x60E0      ANDS     R0,R0,#0x7000000
   \   0000004E   0xF1B0 0x6FE0      CMP      R0,#+117440512
   \   00000052   0xD101             BNE.N    ??CSP_PM_CPU_ClkFreqGet_6
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE000             B.N      ??CSP_PM_CPU_ClkFreqGet_7
   \                     ??CSP_PM_CPU_ClkFreqGet_6: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??CSP_PM_CPU_ClkFreqGet_7: (+1)
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD006             BEQ.N    ??CSP_PM_CPU_ClkFreqGet_8
    243                  cpu_freq = ((cpu_freq * 2u * pll_mul) / pll_div);
   \   0000005E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000060   0xFB03 0xF001      MUL      R0,R3,R1
   \   00000064   0x0040             LSLS     R0,R0,#+1
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0xFBB0 0xF1F4      UDIV     R1,R0,R4
    244              }
    245                  
    246              cpu_div = CSP_PM_REG_CCLKCFG & DEF_BIT_FIELD(8u, 0u); 
   \                     ??CSP_PM_CPU_ClkFreqGet_8: (+1)
   \   0000006C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x400fc104
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x0002             MOVS     R2,R0
    247              cpu_div++;
   \   00000072   0x1C52             ADDS     R2,R2,#+1
    248              
    249              cpu_freq /= cpu_div;
   \   00000074   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0xFBB1 0xF1F2      UDIV     R1,R1,R2
    250                  
    251              return (cpu_freq);
   \   0000007A   0x0008             MOVS     R0,R1
   \                     ??CSP_PM_CPU_ClkFreqGet_5: (+1)
   \   0000007C   0xBC30             POP      {R4,R5}
   \   0000007E   0x4770             BX       LR               ;; return
    252          
    253          }
    254          
    255          /*
    256          *********************************************************************************************************
    257          *                                       CSP_PM_PerClkDivCfg()
    258          *
    259          * Description : Configure peripheral clock divider.
    260          *                   
    261          * Argument(s) : clk_nbr     Peripheral clock id (see note #1).
    262          *  
    263          *               clk_div     Peripheral clock divider.
    264          *
    265          * Return(s)   : DEF_OK,   If the clock was configured correctly.
    266          *               DEF_FAIL, Otherwise.
    267          *
    268          * Caller(s)   : Application.
    269          *
    270          * Note(s)     : (1) Peripheral clk number are defined in 'csp_grp.h'.
    271          *
    272          *                       CSP_PER_CLK_NBR_XX  where 'XX' is the peripheral name.
    273          *
    274          *               (2) A divider of value '6' divider can be only used with the following clks:
    275          *                             CSP_PM_PER_CLK_NBR_CAN1          
    276          *                             CSP_PM_PER_CLK_NBR_CAN2          
    277          *                             CSP_PM_PER_CLK_NBR_ACF              
    278          *********************************************************************************************************
    279          */
    280          

   \                                 In section .text, align 2, keep-with-next
    281          CPU_BOOLEAN  CSP_PM_PerClkDivCfg (CSP_DEV_NBR    clk_nbr,
    282                                            CPU_SIZE_T     clk_div)
    283          
    284          {
   \                     CSP_PM_PerClkDivCfg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    285              CPU_INT08U  pclk_sel;
    286              CPU_SR_ALLOC();
   \   00000006   0x2700             MOVS     R7,#+0
    287          
    288          
    289                                                                          /* ------------------- ARGUMENTS CHECKING ------------- */
    290          #if (CSP_CFG_ARG_CHK_EN == DEF_ENABLED)         
    291              if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0x2C20             CMP      R4,#+32
   \   0000000C   0xDB01             BLT.N    ??CSP_PM_PerClkDivCfg_0
    292                  return (DEF_FAIL);    
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE070             B.N      ??CSP_PM_PerClkDivCfg_1
    293              }
    294          
    295              switch (clk_nbr) {
   \                     ??CSP_PM_PerClkDivCfg_0: (+1)
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x2805             CMP      R0,#+5
   \   00000018   0xD005             BEQ.N    ??CSP_PM_PerClkDivCfg_2
   \   0000001A   0x2809             CMP      R0,#+9
   \   0000001C   0xD003             BEQ.N    ??CSP_PM_PerClkDivCfg_2
   \   0000001E   0x2814             CMP      R0,#+20
   \   00000020   0xD001             BEQ.N    ??CSP_PM_PerClkDivCfg_2
   \   00000022   0x281C             CMP      R0,#+28
   \   00000024   0xD101             BNE.N    ??CSP_PM_PerClkDivCfg_3
    296                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD0:
    297                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD1:
    298                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD2:
    299                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD3:
    300                       return (DEF_FAIL);
   \                     ??CSP_PM_PerClkDivCfg_2: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE064             B.N      ??CSP_PM_PerClkDivCfg_1
    301                 
    302                  default:
    303                       break;    
    304              }
    305          #endif
    306              
    307              switch (clk_div) {
   \                     ??CSP_PM_PerClkDivCfg_3: (+1)
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD008             BEQ.N    ??CSP_PM_PerClkDivCfg_4
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD009             BEQ.N    ??CSP_PM_PerClkDivCfg_5
   \   00000034   0x2804             CMP      R0,#+4
   \   00000036   0xD00A             BEQ.N    ??CSP_PM_PerClkDivCfg_6
   \   00000038   0x2806             CMP      R0,#+6
   \   0000003A   0xD00B             BEQ.N    ??CSP_PM_PerClkDivCfg_7
   \   0000003C   0x2808             CMP      R0,#+8
   \   0000003E   0xD013             BEQ.N    ??CSP_PM_PerClkDivCfg_8
   \   00000040   0xE01B             B.N      ??CSP_PM_PerClkDivCfg_9
    308                  case 1u:
    309                       pclk_sel = 1u;
   \                     ??CSP_PM_PerClkDivCfg_4: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x0006             MOVS     R6,R0
    310                       break;
   \   00000046   0xE01A             B.N      ??CSP_PM_PerClkDivCfg_10
    311                       
    312                  case 2u:
    313                       pclk_sel = 2u;
   \                     ??CSP_PM_PerClkDivCfg_5: (+1)
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x0006             MOVS     R6,R0
    314                       break;
   \   0000004C   0xE017             B.N      ??CSP_PM_PerClkDivCfg_10
    315                       
    316                  case 4u:
    317                       pclk_sel = 0u;
   \                     ??CSP_PM_PerClkDivCfg_6: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x0006             MOVS     R6,R0
    318                       break;
   \   00000052   0xE014             B.N      ??CSP_PM_PerClkDivCfg_10
    319                       
    320                  case 6u:
    321                       switch (clk_nbr) {                                 /* See note #2.                                         */
   \                     ??CSP_PM_PerClkDivCfg_7: (+1)
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x380D             SUBS     R0,R0,#+13
   \   0000005A   0x2802             CMP      R0,#+2
   \   0000005C   0xD802             BHI.N    ??CSP_PM_PerClkDivCfg_11
    322                           case CSP_PM_PER_CLK_NBR_CAN_01:
    323                           case CSP_PM_PER_CLK_NBR_CAN_02:
    324                           case CSP_PM_PER_CLK_NBR_ACF_00:
    325                                pclk_sel = 3u;
   \                     ??CSP_PM_PerClkDivCfg_12: (+1)
   \   0000005E   0x2003             MOVS     R0,#+3
   \   00000060   0x0006             MOVS     R6,R0
    326                                break;
    327                           
    328                           default:
    329                                return (DEF_FAIL);     
    330                       }
    331                       break;
   \   00000062   0xE00C             B.N      ??CSP_PM_PerClkDivCfg_10
   \                     ??CSP_PM_PerClkDivCfg_11: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xE045             B.N      ??CSP_PM_PerClkDivCfg_1
    332                       
    333                  case 8u:                                                /* See note #2.                                         */
    334                       switch (clk_nbr) {
   \                     ??CSP_PM_PerClkDivCfg_8: (+1)
   \   00000068   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x380D             SUBS     R0,R0,#+13
   \   0000006E   0x2802             CMP      R0,#+2
   \   00000070   0xD801             BHI.N    ??CSP_PM_PerClkDivCfg_13
    335                           case CSP_PM_PER_CLK_NBR_CAN_01:
    336                           case CSP_PM_PER_CLK_NBR_CAN_02:
    337                           case CSP_PM_PER_CLK_NBR_ACF_00:
    338                                return (DEF_FAIL);
   \                     ??CSP_PM_PerClkDivCfg_14: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xE03E             B.N      ??CSP_PM_PerClkDivCfg_1
    339          
    340                           default:
    341                                pclk_sel = 3u;
   \                     ??CSP_PM_PerClkDivCfg_13: (+1)
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0x0006             MOVS     R6,R0
    342                                break;
    343                        }
    344          
    345                  default:
    346                       return (DEF_FAIL);
   \                     ??CSP_PM_PerClkDivCfg_9: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xE03A             B.N      ??CSP_PM_PerClkDivCfg_1
    347              }
    348                            
    349              CPU_CRITICAL_ENTER();
   \                     ??CSP_PM_PerClkDivCfg_10: (+1)
   \   0000007E   0x.... 0x....      BL       CPU_SR_Save
   \   00000082   0x0007             MOVS     R7,R0
   \   00000084   0x.... 0x....      BL       CPU_IntDisMeasStart
    350              
    351              if (clk_nbr < 16u) {
   \   00000088   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000008A   0x2C10             CMP      R4,#+16
   \   0000008C   0xD215             BCS.N    ??CSP_PM_PerClkDivCfg_15
    352                  DEF_BIT_CLR(CSP_PM_REG_PCLKSEL0, DEF_BIT_FIELD(2u,       clk_nbr       * 2u));
   \   0000008E   0x....             LDR.N    R0,??DataTable4_5  ;; 0x400fc1a8
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x2103             MOVS     R1,#+3
   \   00000094   0x0022             MOVS     R2,R4
   \   00000096   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000098   0x0052             LSLS     R2,R2,#+1
   \   0000009A   0x4091             LSLS     R1,R1,R2
   \   0000009C   0x4388             BICS     R0,R0,R1
   \   0000009E   0x....             LDR.N    R1,??DataTable4_5  ;; 0x400fc1a8
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    353                  DEF_BIT_SET(CSP_PM_REG_PCLKSEL0, DEF_BIT_MASK(pclk_sel,  clk_nbr       * 2u));                
   \   000000A2   0x....             LDR.N    R0,??DataTable4_5  ;; 0x400fc1a8
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   0x0021             MOVS     R1,R4
   \   000000AA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AC   0x0049             LSLS     R1,R1,#+1
   \   000000AE   0xFA16 0xF101      LSLS     R1,R6,R1
   \   000000B2   0x4308             ORRS     R0,R1,R0
   \   000000B4   0x....             LDR.N    R1,??DataTable4_5  ;; 0x400fc1a8
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0xE016             B.N      ??CSP_PM_PerClkDivCfg_16
    354              } else {
    355                  DEF_BIT_CLR(CSP_PM_REG_PCLKSEL1, DEF_BIT_FIELD(2u,      (clk_nbr - 16u) * 2u));
   \                     ??CSP_PM_PerClkDivCfg_15: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable4_6  ;; 0x400fc1ac
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0x2103             MOVS     R1,#+3
   \   000000C0   0x0022             MOVS     R2,R4
   \   000000C2   0x3A10             SUBS     R2,R2,#+16
   \   000000C4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000C6   0x0052             LSLS     R2,R2,#+1
   \   000000C8   0x4091             LSLS     R1,R1,R2
   \   000000CA   0x4388             BICS     R0,R0,R1
   \   000000CC   0x....             LDR.N    R1,??DataTable4_6  ;; 0x400fc1ac
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    356                  DEF_BIT_SET(CSP_PM_REG_PCLKSEL1, DEF_BIT_MASK(pclk_sel, (clk_nbr - 16u) * 2u));                        
   \   000000D0   0x....             LDR.N    R0,??DataTable4_6  ;; 0x400fc1ac
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D6   0x0021             MOVS     R1,R4
   \   000000D8   0x3910             SUBS     R1,R1,#+16
   \   000000DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DC   0x0049             LSLS     R1,R1,#+1
   \   000000DE   0xFA16 0xF101      LSLS     R1,R6,R1
   \   000000E2   0x4308             ORRS     R0,R1,R0
   \   000000E4   0x....             LDR.N    R1,??DataTable4_6  ;; 0x400fc1ac
   \   000000E6   0x6008             STR      R0,[R1, #+0]
    357              }
    358              
    359              CPU_CRITICAL_EXIT();    
   \                     ??CSP_PM_PerClkDivCfg_16: (+1)
   \   000000E8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000EC   0x0038             MOVS     R0,R7
   \   000000EE   0x.... 0x....      BL       CPU_SR_Restore
    360              
    361              return (DEF_OK);
   \   000000F2   0x2001             MOVS     R0,#+1
   \                     ??CSP_PM_PerClkDivCfg_1: (+1)
   \   000000F4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    362          }    
    363          
    364          
    365          /*
    366          *********************************************************************************************************
    367          *                                          CSP_PM_PerClkEn()
    368          *
    369          * Description : Enable a peripheral clock.
    370          *                   
    371          * Argument(s) : clk_nbr     Peripheral clock number (see 'CSP_PM_PerClkDivCfg()' note #1).
    372          *
    373          * Return(s)   : None.
    374          *
    375          * Caller(s)   : Application.
    376          *
    377          * Note(s)     : None.               
    378          *********************************************************************************************************
    379          */
    380          

   \                                 In section .text, align 2, keep-with-next
    381          void  CSP_PM_PerClkEn (CSP_DEV_NBR clk_nbr)
    382          {
   \                     CSP_PM_PerClkEn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    383              CPU_SR_ALLOC();
   \   00000004   0x2500             MOVS     R5,#+0
    384          
    385          
    386              if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x2C20             CMP      R4,#+32
   \   0000000A   0xDA1D             BGE.N    ??CSP_PM_PerClkEn_0
    387                  return;    
    388              }
    389              
    390              switch (clk_nbr) {
   \                     ??CSP_PM_PerClkEn_1: (+1)
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD007             BEQ.N    ??CSP_PM_PerClkEn_2
   \   00000014   0x2805             CMP      R0,#+5
   \   00000016   0xD005             BEQ.N    ??CSP_PM_PerClkEn_2
   \   00000018   0x280B             CMP      R0,#+11
   \   0000001A   0xD003             BEQ.N    ??CSP_PM_PerClkEn_2
   \   0000001C   0x2814             CMP      R0,#+20
   \   0000001E   0xD001             BEQ.N    ??CSP_PM_PerClkEn_2
   \   00000020   0x281C             CMP      R0,#+28
   \   00000022   0xD100             BNE.N    ??CSP_PM_PerClkEn_3
    391                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD0:
    392                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD1:
    393                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD2:
    394                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
    395                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
    396                       return;
   \                     ??CSP_PM_PerClkEn_2: (+1)
   \   00000024   0xE010             B.N      ??CSP_PM_PerClkEn_0
    397                 
    398                  default:
    399                       break;    
    400              }
    401              
    402              CPU_CRITICAL_ENTER();
   \                     ??CSP_PM_PerClkEn_3: (+1)
   \   00000026   0x.... 0x....      BL       CPU_SR_Save
   \   0000002A   0x0005             MOVS     R5,R0
   \   0000002C   0x.... 0x....      BL       CPU_IntDisMeasStart
    403              DEF_BIT_SET(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
   \   00000030   0x....             LDR.N    R0,??DataTable4_7  ;; 0x400fc0c4
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x40A1             LSLS     R1,R1,R4
   \   00000038   0x4308             ORRS     R0,R1,R0
   \   0000003A   0x....             LDR.N    R1,??DataTable4_7  ;; 0x400fc0c4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    404              CPU_CRITICAL_EXIT();    
   \   0000003E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       CPU_SR_Restore
    405          }
   \                     ??CSP_PM_PerClkEn_0: (+1)
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    406          
    407          
    408          /*
    409          *********************************************************************************************************
    410          *                                         CSP_PM_PerClkDis()
    411          *
    412          * Description : Disable a peripheral clock.
    413          *                   
    414          * Argument(s) : clk_nbr     Peripheral clock number (see 'CSP_PM_PerClkDivCfg()' note #1).
    415          *
    416          * Return(s)   : None.
    417          *
    418          * Caller(s)   : Application.
    419          *
    420          * Note(s)     : None.
    421          *********************************************************************************************************
    422          */
    423          

   \                                 In section .text, align 2, keep-with-next
    424          void  CSP_PM_PerClkDis (CSP_DEV_NBR clk_nbr)
    425          {
   \                     CSP_PM_PerClkDis: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    426              CPU_SR_ALLOC();
   \   00000004   0x2500             MOVS     R5,#+0
    427          
    428          
    429              if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x2C20             CMP      R4,#+32
   \   0000000A   0xDA1D             BGE.N    ??CSP_PM_PerClkDis_0
    430                  return;
    431              }
    432              
    433              switch (clk_nbr) {
   \                     ??CSP_PM_PerClkDis_1: (+1)
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD007             BEQ.N    ??CSP_PM_PerClkDis_2
   \   00000014   0x2805             CMP      R0,#+5
   \   00000016   0xD005             BEQ.N    ??CSP_PM_PerClkDis_2
   \   00000018   0x280B             CMP      R0,#+11
   \   0000001A   0xD003             BEQ.N    ??CSP_PM_PerClkDis_2
   \   0000001C   0x2814             CMP      R0,#+20
   \   0000001E   0xD001             BEQ.N    ??CSP_PM_PerClkDis_2
   \   00000020   0x281C             CMP      R0,#+28
   \   00000022   0xD100             BNE.N    ??CSP_PM_PerClkDis_3
    434                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD0:
    435                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD1:
    436                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD2:
    437                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD3:
    438                  case CSP_PM_PER_CLK_NBR_PCONP_RSVD4:
    439                       return;
   \                     ??CSP_PM_PerClkDis_2: (+1)
   \   00000024   0xE010             B.N      ??CSP_PM_PerClkDis_0
    440                 
    441                  default:
    442                       break;    
    443              }
    444              
    445              CPU_CRITICAL_ENTER();
   \                     ??CSP_PM_PerClkDis_3: (+1)
   \   00000026   0x.... 0x....      BL       CPU_SR_Save
   \   0000002A   0x0005             MOVS     R5,R0
   \   0000002C   0x.... 0x....      BL       CPU_IntDisMeasStart
    446              DEF_BIT_CLR(CSP_PM_REG_PCONP, DEF_BIT(clk_nbr));
   \   00000030   0x....             LDR.N    R0,??DataTable4_7  ;; 0x400fc0c4
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x40A1             LSLS     R1,R1,R4
   \   00000038   0x4388             BICS     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable4_7  ;; 0x400fc0c4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    447              CPU_CRITICAL_EXIT();    
   \   0000003E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       CPU_SR_Restore
    448          }
   \                     ??CSP_PM_PerClkDis_0: (+1)
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    449          
    450          
    451          /*
    452          *********************************************************************************************************
    453          *                                        CSP_PM_PerClkFreqGet()
    454          *
    455          * Description : Return the Peripheral clock
    456          *                   
    457          * Argument(s) : clk_nbr     Peripheral clock number. (see 'CSP_PM_PerClkDivCfg()' note #1).
    458          *
    459          * Return(s)   : The peripheral clock frequency.
    460          *
    461          * Caller(s)   : Application.
    462          *
    463          * Note(s)     : None.
    464          *********************************************************************************************************
    465          */
    466          

   \                                 In section .text, align 2, keep-with-next
    467          CPU_INT32U  CSP_PM_PerClkFreqGet  (CSP_DEV_NBR  clk_nbr)
    468          {
   \                     CSP_PM_PerClkFreqGet: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    469              CPU_INT32U  clk_freq;    
    470              CPU_INT08U  clk_div;
    471            
    472          
    473              if (clk_nbr >= CSP_PM_PER_CLK_NBR_MAX) {
   \   00000004   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000006   0x2C20             CMP      R4,#+32
   \   00000008   0xDB01             BLT.N    ??CSP_PM_PerClkFreqGet_0
    474                  return (DEF_FAIL);    
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE048             B.N      ??CSP_PM_PerClkFreqGet_1
    475              }
    476          
    477              switch (clk_nbr) {
   \                     ??CSP_PM_PerClkFreqGet_0: (+1)
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD005             BEQ.N    ??CSP_PM_PerClkFreqGet_2
   \   00000016   0x2809             CMP      R0,#+9
   \   00000018   0xD003             BEQ.N    ??CSP_PM_PerClkFreqGet_2
   \   0000001A   0x2814             CMP      R0,#+20
   \   0000001C   0xD001             BEQ.N    ??CSP_PM_PerClkFreqGet_2
   \   0000001E   0x281C             CMP      R0,#+28
   \   00000020   0xD101             BNE.N    ??CSP_PM_PerClkFreqGet_3
    478                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD0:
    479                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD1:
    480                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD2:
    481                  case CSP_PM_PER_CLK_NBR_PCLKSEL_RSVD3:
    482                       return (DEF_FAIL);
   \                     ??CSP_PM_PerClkFreqGet_2: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE03C             B.N      ??CSP_PM_PerClkFreqGet_1
    483                 
    484                  default:
    485                       break;    
    486              }
    487              
    488              if (clk_nbr < 16u) {
   \                     ??CSP_PM_PerClkFreqGet_3: (+1)
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x2C10             CMP      R4,#+16
   \   0000002A   0xD209             BCS.N    ??CSP_PM_PerClkFreqGet_4
    489                  clk_div = (CPU_INT08U)((CSP_PM_REG_PCLKSEL0 >> ( clk_nbr       * 2)) & DEF_BIT_FIELD(2, 0));
   \   0000002C   0x....             LDR.N    R0,??DataTable4_5  ;; 0x400fc1a8
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0049             LSLS     R1,R1,#+1
   \   00000036   0x40C8             LSRS     R0,R0,R1
   \   00000038   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000003C   0x0006             MOVS     R6,R0
   \   0000003E   0xE009             B.N      ??CSP_PM_PerClkFreqGet_5
    490              } else {
    491                  clk_div = (CPU_INT08U)((CSP_PM_REG_PCLKSEL0 >> ((clk_nbr - 16) * 2)) & DEF_BIT_FIELD(2, 0));    
   \                     ??CSP_PM_PerClkFreqGet_4: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable4_5  ;; 0x400fc1a8
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x0021             MOVS     R1,R4
   \   00000046   0x3910             SUBS     R1,R1,#+16
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0x0049             LSLS     R1,R1,#+1
   \   0000004C   0x40C8             LSRS     R0,R0,R1
   \   0000004E   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000052   0x0006             MOVS     R6,R0
    492              }
    493          
    494              switch (clk_div) {
   \                     ??CSP_PM_PerClkFreqGet_5: (+1)
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E00             CMP      R6,#+0
   \   00000058   0xD005             BEQ.N    ??CSP_PM_PerClkFreqGet_6
   \   0000005A   0x2E02             CMP      R6,#+2
   \   0000005C   0xD009             BEQ.N    ??CSP_PM_PerClkFreqGet_7
   \   0000005E   0xD305             BCC.N    ??CSP_PM_PerClkFreqGet_8
   \   00000060   0x2E03             CMP      R6,#+3
   \   00000062   0xD009             BEQ.N    ??CSP_PM_PerClkFreqGet_9
   \   00000064   0xE013             B.N      ??CSP_PM_PerClkFreqGet_10
    495                  case 0u:
    496                       clk_div = 4u;
   \                     ??CSP_PM_PerClkFreqGet_6: (+1)
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0x0006             MOVS     R6,R0
    497                       break;
   \   0000006A   0xE012             B.N      ??CSP_PM_PerClkFreqGet_11
    498                       
    499                  case 1u:
    500                       clk_div = 1u;
   \                     ??CSP_PM_PerClkFreqGet_8: (+1)
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x0006             MOVS     R6,R0
    501                       break;
   \   00000070   0xE00F             B.N      ??CSP_PM_PerClkFreqGet_11
    502                       
    503                  case 2u:
    504                       clk_div = 2u;
   \                     ??CSP_PM_PerClkFreqGet_7: (+1)
   \   00000072   0x2002             MOVS     R0,#+2
   \   00000074   0x0006             MOVS     R6,R0
    505                       break;
   \   00000076   0xE00C             B.N      ??CSP_PM_PerClkFreqGet_11
    506                       
    507                  case 3u:
    508                       switch (clk_nbr) {
   \                     ??CSP_PM_PerClkFreqGet_9: (+1)
   \   00000078   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007A   0x0020             MOVS     R0,R4
   \   0000007C   0x380D             SUBS     R0,R0,#+13
   \   0000007E   0x2802             CMP      R0,#+2
   \   00000080   0xD802             BHI.N    ??CSP_PM_PerClkFreqGet_12
    509                           case CSP_PM_PER_CLK_NBR_CAN_01:
    510                           case CSP_PM_PER_CLK_NBR_CAN_02:
    511                           case CSP_PM_PER_CLK_NBR_ACF_00:
    512                                clk_div = 6u;
   \                     ??CSP_PM_PerClkFreqGet_13: (+1)
   \   00000082   0x2006             MOVS     R0,#+6
   \   00000084   0x0006             MOVS     R6,R0
    513                                break;
   \   00000086   0xE001             B.N      ??CSP_PM_PerClkFreqGet_14
    514                                
    515                           default:
    516                                clk_div = 8u;
   \                     ??CSP_PM_PerClkFreqGet_12: (+1)
   \   00000088   0x2008             MOVS     R0,#+8
   \   0000008A   0x0006             MOVS     R6,R0
    517                                break;
    518                       }
    519                       break;
   \                     ??CSP_PM_PerClkFreqGet_14: (+1)
   \   0000008C   0xE001             B.N      ??CSP_PM_PerClkFreqGet_11
    520                       
    521                  default:
    522                       return ((CPU_INT32U)0);
   \                     ??CSP_PM_PerClkFreqGet_10: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE006             B.N      ??CSP_PM_PerClkFreqGet_1
    523                  
    524              }
    525              
    526              clk_freq  = CSP_PM_CPU_ClkFreqGet();
   \                     ??CSP_PM_PerClkFreqGet_11: (+1)
   \   00000092   0x.... 0x....      BL       CSP_PM_CPU_ClkFreqGet
   \   00000096   0x0005             MOVS     R5,R0
    527              clk_freq /= clk_div;
   \   00000098   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009A   0xFBB5 0xF5F6      UDIV     R5,R5,R6
    528              
    529              return (clk_freq);
   \   0000009E   0x0028             MOVS     R0,R5
   \                     ??CSP_PM_PerClkFreqGet_1: (+1)
   \   000000A0   0xBD70             POP      {R4-R6,PC}       ;; return
    530          }
    531          
    532          
    533          /*
    534          *********************************************************************************************************
    535          *                                        CSP_PM_SysClkEn()
    536          *
    537          * Description : Enable a System Clock.
    538          *                   
    539          * Argument(s) : clk_nbr     System clock number (see note #1)                            
    540          *
    541          * Return(s)   : none.
    542          *
    543          * Caller(s)   : Application.
    544          *
    545          * Note(s)     : (1) Sytem clk number are defined in 'csp_grp.h'.
    546          *
    547          *                       CSP_SYS_CLK_NBR_XX  where 'XX' is the system clk name.
    548          *
    549          *                (2) The USB clock is the only system system clock found on the LPC17xx family. This clock is 
    550          *                   enabled and configured trougth the PLL1 or PLL 0 and the USB clock divider.
    551          *                   Since these is part of the startup code, System clock functionality is not implemented for
    552          *                   this family.
    553          *********************************************************************************************************
    554          */
    555          

   \                                 In section .text, align 2, keep-with-next
    556          void  CSP_PM_SysClkEn (CSP_DEV_NBR  clk_nbr)
    557          {
    558              (void)clk_nbr;
    559          }
   \                     CSP_PM_SysClkEn: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    560          
    561          
    562          /*
    563          *********************************************************************************************************
    564          *                                        CSP_PM_SysClkDis()
    565          *
    566          * Description : Disable a System Clock
    567          *                   
    568          * Argument(s) : clk_nbr     System clock number (see 'CSP_PM_SysClkEn()' note #1)
    569          *
    570          * Return(s)   : None.
    571          *
    572          * Caller(s)   : Application.
    573          *
    574          * Note(s)     : None.
    575          *********************************************************************************************************
    576          */
    577          

   \                                 In section .text, align 2, keep-with-next
    578          void  CSP_PM_SysClkDis (CSP_DEV_NBR clk_nbr)
    579          {
    580              (void)clk_nbr;
    581          }
   \                     CSP_PM_SysClkDis: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    582          
    583          
    584          /*
    585          *********************************************************************************************************
    586          *                                         CSP_PM_SysClkDivCfg()
    587          *
    588          * Description : Configure peripheral clock divider.
    589          *                   
    590          * Argument(s) : clk_nbr     System clock number (see 'CSP_PM_SysClkEn()' note #1)
    591          *  
    592          *               clk_div     System clock divider.
    593          *
    594          * Return(s)   : DEF_OK,    If the clock was configured,
    595          *               DEF_FAIL,  otherwise.
    596          *
    597          * Caller(s)   : Application.
    598          *
    599          * Note(s)     : None.
    600          *********************************************************************************************************
    601          */
    602          

   \                                 In section .text, align 2, keep-with-next
    603          CPU_BOOLEAN  CSP_PM_SysClkDivCfg (CSP_DEV_NBR  clk_nbr,
    604                                            CPU_SIZE_T   clk_div)
    605          {
   \                     CSP_PM_SysClkDivCfg: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
    606              (void)&clk_nbr;
   \   00000002   0x4668             MOV      R0,SP
    607              (void)&clk_div;
   \   00000004   0xA801             ADD      R0,SP,#+4
    608              
    609              return (DEF_OK);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xB002             ADD      SP,SP,#+8
   \   0000000A   0x4770             BX       LR               ;; return
    610          }
    611          
    612          
    613          /*
    614          *********************************************************************************************************
    615          *                                        CSP_PM_SysClkFreqGet()
    616          *
    617          * Description : Return system clock frequency.
    618          *                   
    619          * Argument(s) : clk_nbr     System clock number (see 'CSP_PM_SysClkEn()' note #1)
    620          *
    621          * Return(s)   : System clock frequency.
    622          *
    623          * Caller(s)   : Application.
    624          *
    625          * Note(s)     : None.
    626          *********************************************************************************************************
    627          */
    628          

   \                                 In section .text, align 2, keep-with-next
    629          CPU_INT32U  CSP_PM_SysClkFreqGet (CSP_DEV_NBR  clk_nbr)
    630          {
   \                     CSP_PM_SysClkFreqGet: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    631              (void)clk_nbr;
    632              
    633              return ((CPU_INT32U)0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    634          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400FC10C         DC32     0x400fc10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x00B71B00         DC32     0xb71b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x400FC088         DC32     0x400fc088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x400FC104         DC32     0x400fc104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x400FC1AC         DC32     0x400fc1ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CSP_PM_CPU_ClkFreqGet
       0   CSP_PM_Init
      16   CSP_PM_PerClkDis
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      24   CSP_PM_PerClkDivCfg
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
      16   CSP_PM_PerClkEn
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      16   CSP_PM_PerClkFreqGet
        16   -> CSP_PM_CPU_ClkFreqGet
       0   CSP_PM_SysClkDis
       8   CSP_PM_SysClkDivCfg
       0   CSP_PM_SysClkEn
       0   CSP_PM_SysClkFreqGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
     128  CSP_PM_CPU_ClkFreqGet
       2  CSP_PM_Init
      74  CSP_PM_PerClkDis
     246  CSP_PM_PerClkDivCfg
      74  CSP_PM_PerClkEn
     162  CSP_PM_PerClkFreqGet
       2  CSP_PM_SysClkDis
      12  CSP_PM_SysClkDivCfg
       2  CSP_PM_SysClkEn
       6  CSP_PM_SysClkFreqGet

 
 740 bytes in section .text
 
 740 bytes of CODE memory

Errors: none
Warnings: none
