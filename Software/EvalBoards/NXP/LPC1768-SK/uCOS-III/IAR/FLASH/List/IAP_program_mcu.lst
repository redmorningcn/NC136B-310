###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/Aug/2017  14:18:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\iap\IAP_program_mcu.C
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\iap\IAP_program_mcu.C
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\IAP_program_mcu.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\IAP_program_mcu.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\iap\IAP_program_mcu.C
      1          #include  "includes.h"
      2          
      3          //#define	CVI	0
      4          
      5          #define	USER_APP_START_ADDR		0x00040000	
      6          #define	USER_APP_PRO_SIZE		0x0002FFFF	
      7          
      8          #define	IAP_DATA_LEN		    128
      9          #define SEC_DIV_TIMENS          (IAP_WRITE_1024/IAP_DATA_LEN)
     10          
     11          //存放IAP参数地址
     12          //#define	IAP_PARA_START_ADDR     0x00070000	
     13          //#define	IAP_PARA_PRO_SIZE		0x00010000	
     14          #define	IAP_PARA_START_ADDR     0x00070000	
     15          #define	IAP_PARA_PRO_SIZE		0x0000FFFF	
     16          
     17          #define zyIrqDisable()  __disable_irq()
     18          #define zyIrqEnable()   __enable_irq()
     19          
     20          
     21          /*******************************************************************************
     22           * TYPEDEFS
     23           */
     24          typedef  struct   _stcIAPCtrl_
     25          {
     26              char    buf[1024];      //数据区
     27              int     addr;           //数据地址
     28          }stcIAPCtrl;
     29          
     30          typedef  struct   _stcIAPPara_
     31          {
     32              uint16  hardver;        //硬件版本
     33              uint16  softver;        //软件版本
     34              uint32  softsize;       //软件大小
     35              uint32  addr;           //当前地址
     36              uint32  framenum;       //帧序号
     37              uint16  code;           //指令码 01，标示有正确的可用
     38              uint16  crc16;
     39          }stcIAPPara;
     40          
     41          /*******************************************************************************
     42           * LOCAL VARIABLES
     43           */

   \                                 In section .bss, align 4
     44          stcIAPPara  gsIAPPara;
   \                     gsIAPPara:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     45          stcIAPCtrl  gsIAPCtrl;      //升级参数
   \                     gsIAPCtrl:
   \   00000000                      DS8 1028
     46          
     47          /*******************************************************************************
     48           * 名    称： IAP_ReadDeviceInfo
     49           * 功    能： 读芯片信息
     50           * 入口参数： 无
     51           * 出口参数： 无
     52           * 作　　者： redmorningcn.
     53           * 创建日期： 2017-08-08
     54           * 修    改：
     55           * 修改日期：
     56           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     57          void    IAP_ReadDeviceInfo(void)
     58          {
   \                     IAP_ReadDeviceInfo: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     59              IAP_STATUS_CODE status;    
     60              uint8_t ver_major, ver_minor; 
     61              uint32_t result[4];
     62          
     63              zyIrqDisable();										//关中断
   \   00000004   0xB672             CPSID    I
     64              
     65              status = ReadPartID(result);                        //读芯片ID
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      BL       ReadPartID
   \   0000000C   0x0004             MOVS     R4,R0
     66              status = ReadBootCodeVer(&ver_major, &ver_minor);   //读启动代码版本
   \   0000000E   0x4669             MOV      R1,SP
   \   00000010   0xF10D 0x0001      ADD      R0,SP,#+1
   \   00000014   0x.... 0x....      BL       ReadBootCodeVer
   \   00000018   0x0004             MOVS     R4,R0
     67              status = ReadDeviceSerialNum(result);               //读设备ID号    
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       ReadDeviceSerialNum
   \   00000020   0x0004             MOVS     R4,R0
     68              
     69              zyIrqEnable();                                      //写flash完成时，开全局中断
   \   00000022   0xB662             CPSIE    I
     70          }
   \   00000024   0xB006             ADD      SP,SP,#+24
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     71          
     72          /*******************************************************************************
     73           * 名    称： IAP_WriteParaFlash
     74           * 功    能： 将IAP参数数据写入Flash区
     75           * 入口参数： stcIAPCtrl
     76           * 出口参数： 无
     77           * 作　　者： redmorningcn.
     78           * 创建日期： 2017-08-08
     79           * 修    改：
     80           * 修改日期：
     81           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          void    IAP_WriteParaFlash(stcIAPPara *sIAPPara)
     83          {
   \                     IAP_WriteParaFlash: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
     84              IAP_STATUS_CODE status;
     85              uint32_t result[4];
     86          
     87              uint32_t flash_prog_area_sec_start;
     88              uint32_t flash_prog_area_sec_end;
     89              
     90              zyIrqDisable();										                                //关中断
   \   00000006   0xB672             CPSID    I
     91          
     92              flash_prog_area_sec_start   = 	GetSecNum(IAP_PARA_START_ADDR);
   \   00000008   0xF45F 0x20E0      MOVS     R0,#+458752
   \   0000000C   0x.... 0x....      BL       GetSecNum
   \   00000010   0x0006             MOVS     R6,R0
     93              flash_prog_area_sec_end 	=  	GetSecNum(IAP_PARA_START_ADDR + IAP_PARA_PRO_SIZE); //准备擦除
   \   00000012   0x....             LDR.N    R0,??DataTable3  ;; 0x7ffff
   \   00000014   0x.... 0x....      BL       GetSecNum
   \   00000018   0x0007             MOVS     R7,R0
     94          
     95              status = EraseSector(flash_prog_area_sec_start, flash_prog_area_sec_end);           //一次所写区间
   \   0000001A   0x0039             MOVS     R1,R7
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x.... 0x....      BL       EraseSector
   \   00000022   0x0005             MOVS     R5,R0
     96              status = BlankCheckSector(flash_prog_area_sec_start, flash_prog_area_sec_end,
     97                          &result[0], &result[1]);
   \   00000024   0xAB01             ADD      R3,SP,#+4
   \   00000026   0x466A             MOV      R2,SP
   \   00000028   0x0039             MOVS     R1,R7
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0x.... 0x....      BL       BlankCheckSector
   \   00000030   0x0005             MOVS     R5,R0
     98              
     99              //开始flash编写,写入整块数据
    100              status 	= CopyRAM2Flash( (uint8_t *)IAP_PARA_START_ADDR,
    101                                            (uint8 *)sIAPPara,
    102                                             256
    103                                      );                                                          //拷贝数据
   \   00000032   0xF44F 0x7280      MOV      R2,#+256
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0xF45F 0x20E0      MOVS     R0,#+458752
   \   0000003C   0x.... 0x....      BL       CopyRAM2Flash
   \   00000040   0x0005             MOVS     R5,R0
    104              
    105              status =  Compare((uint8_t *)IAP_PARA_START_ADDR,
    106                                      (uint8 *)sIAPPara,
    107                                      sizeof(stcIAPPara)
    108                              );                                                                  //比较数据
   \   00000042   0x2214             MOVS     R2,#+20
   \   00000044   0x0021             MOVS     R1,R4
   \   00000046   0xF45F 0x20E0      MOVS     R0,#+458752
   \   0000004A   0x.... 0x....      BL       Compare
   \   0000004E   0x0005             MOVS     R5,R0
    109                      
    110              zyIrqEnable();                                                                      //写flash完成时，开全局中断
   \   00000050   0xB662             CPSIE    I
    111          }
   \   00000052   0xB005             ADD      SP,SP,#+20
   \   00000054   0xBDF0             POP      {R4-R7,PC}       ;; return
    112          
    113          
    114          /*******************************************************************************
    115           * 名    称： IAP_WriteParaFlash
    116           * 功    能： 将IAP参数数据写入Flash区
    117           * 入口参数： stcIAPCtrl
    118           * 出口参数： 无
    119           * 作　　者： redmorningcn.
    120           * 创建日期： 2017-08-08
    121           * 修    改：
    122           * 修改日期：
    123           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    124          void    IAP_ReadParaFlash(stcIAPPara *sIAPPara)
    125          {
   \                     IAP_ReadParaFlash: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    126              IAP_STATUS_CODE status;
    127              uint32_t result[4];
    128              
    129              uint32_t flash_prog_area_sec_start;
    130              uint32_t flash_prog_area_sec_end;
    131              
    132              zyIrqDisable();                                 //关中断
   \   00000004   0xB672             CPSID    I
    133                                                              //数据copy
    134              memcpy((uint8 *)sIAPPara,(uint8 *)IAP_PARA_START_ADDR,sizeof(stcIAPPara));
   \   00000006   0x2514             MOVS     R5,#+20
   \   00000008   0xF45F 0x26E0      MOVS     R6,#+458752
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x0031             MOVS     R1,R6
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
    135                      
    136              zyIrqEnable();                                  //开全局中断
   \   00000016   0xB662             CPSIE    I
    137          }
   \   00000018   0xBD70             POP      {R4-R6,PC}       ;; return
    138          
    139          /*******************************************************************************
    140           * 名    称： IAP_WriteFlash
    141           * 功    能： 将数据写入Flash区
    142           * 入口参数： stcIAPCtrl
    143           * 出口参数： 无
    144           * 作　　者： redmorningcn.
    145           * 创建日期： 2017-08-08
    146           * 修    改：
    147           * 修改日期：
    148           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    149          void    IAP_WriteFlash(stcIAPCtrl *sIAPCtrl)
    150          {
   \                     IAP_WriteFlash: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    151              IAP_STATUS_CODE status;
    152              uint32_t result[4];
    153          
    154              uint32_t flash_prog_area_sec_start;
    155              uint32_t flash_prog_area_sec_end;
    156              
    157              zyIrqDisable();										//关中断
   \   00000006   0xB672             CPSID    I
    158          
    159              //如果从程序下载地址开始，则先插除所有IAP地址数据。
    160              if(sIAPCtrl->addr == USER_APP_START_ADDR)
   \   00000008   0xF8D4 0x0400      LDR      R0,[R4, #+1024]
   \   0000000C   0xF5B0 0x2F80      CMP      R0,#+262144
   \   00000010   0xD114             BNE.N    ??IAP_WriteFlash_0
    161              {
    162                  flash_prog_area_sec_start   = 	GetSecNum(USER_APP_START_ADDR);
   \   00000012   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000016   0x.... 0x....      BL       GetSecNum
   \   0000001A   0x0006             MOVS     R6,R0
    163                  flash_prog_area_sec_end 	=  	GetSecNum(USER_APP_START_ADDR + USER_APP_PRO_SIZE);//准备擦除
   \   0000001C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x6ffff
   \   0000001E   0x.... 0x....      BL       GetSecNum
   \   00000022   0x0007             MOVS     R7,R0
    164          
    165                  status = EraseSector(flash_prog_area_sec_start, flash_prog_area_sec_end);           //一次性擦除所有
   \   00000024   0x0039             MOVS     R1,R7
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x.... 0x....      BL       EraseSector
   \   0000002C   0x0005             MOVS     R5,R0
    166          
    167                  status = BlankCheckSector(flash_prog_area_sec_start, flash_prog_area_sec_end,
    168                                &result[0], &result[1]);
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x466A             MOV      R2,SP
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0x.... 0x....      BL       BlankCheckSector
   \   0000003A   0x0005             MOVS     R5,R0
    169              }
    170              
    171              //开始flash编写
    172              status 	= CopyRAM2Flash((uint8 *)sIAPCtrl->addr,
    173                                               sIAPCtrl->buf,
    174                                               IAP_WRITE_1024
    175                                      );                      //拷贝数据
   \                     ??IAP_WriteFlash_0: (+1)
   \   0000003C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0xF8D4 0x0400      LDR      R0,[R4, #+1024]
   \   00000046   0x.... 0x....      BL       CopyRAM2Flash
   \   0000004A   0x0005             MOVS     R5,R0
    176              
    177              status =  Compare((uint8 *) sIAPCtrl->addr,
    178                                          sIAPCtrl->buf,
    179                                          IAP_WRITE_1024);    //比较数据
   \   0000004C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000050   0x0021             MOVS     R1,R4
   \   00000052   0xF8D4 0x0400      LDR      R0,[R4, #+1024]
   \   00000056   0x.... 0x....      BL       Compare
   \   0000005A   0x0005             MOVS     R5,R0
    180              
    181              sIAPCtrl->addr += IAP_WRITE_1024;              //数据地址累加  
   \   0000005C   0xF8D4 0x0400      LDR      R0,[R4, #+1024]
   \   00000060   0xF510 0x6080      ADDS     R0,R0,#+1024
   \   00000064   0xF8C4 0x0400      STR      R0,[R4, #+1024]
    182                  
    183              zyIrqEnable();                                  //写flash完成时，开全局中断
   \   00000068   0xB662             CPSIE    I
    184          }
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xBDF0             POP      {R4-R7,PC}       ;; return
    185                                 
    186                                 
    187          void Boot( void );
    188          
    189          /*******************************************************************************
    190           * 名    称： IAP_PragramDeal
    191           * 功    能： 对传入数据处理
    192           * 入口参数： 数据区，数据长度
    193           * 出口参数： 指令成功，返回0；（发在指令后一位返回）
    194                  否则，返回错误值
    195                          1，发送帧序号不连续
    196                          2，指令不识别
    197                          3，程序大小不符
    198           * 作　　者： redmorningcn.
    199           * 创建日期： 2017-08-08
    200           * 修    改：
    201           * 修改日期：
    202           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    203          int8    IAP_PragramDeal(uint8 *databuf,char datalen)
    204          {
   \                     IAP_PragramDeal: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    205              uint16  iapcode;                                        //升级命令字
    206              uint16  iapnum;                                         //升级序号
    207              uint16  crc16;
    208              static  uint16  lastiapnum = 0;                         //上一帧序号
    209              static  uint8   times = 0;
    210              static  uint16  bufsize = 0;
    211              
    212              if(datalen < 2 || datalen > 256)                        //数据异常，退出
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D02             CMP      R5,#+2
   \   0000000E   0xDA01             BGE.N    ??IAP_PragramDeal_0
    213                  return  0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE0C3             B.N      ??IAP_PragramDeal_1
    214              
    215              memcpy((char *)&iapcode,databuf,sizeof(iapcode));       //取升级命令字
   \                     ??IAP_PragramDeal_0: (+1)
   \   00000014   0x2602             MOVS     R6,#+2
   \   00000016   0xF10D 0x0702      ADD      R7,SP,#+2
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0x0038             MOVS     R0,R7
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy
    216              
    217              switch(iapcode & 0xff)                                 //地8位指令区
   \   00000024   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD008             BEQ.N    ??IAP_PragramDeal_2
   \   00000030   0xF0C0 0x80AD      BCC.W    ??IAP_PragramDeal_3
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD071             BEQ.N    ??IAP_PragramDeal_4
   \   00000038   0xD312             BCC.N    ??IAP_PragramDeal_5
   \   0000003A   0x2804             CMP      R0,#+4
   \   0000003C   0xF000 0x80A1      BEQ.W    ??IAP_PragramDeal_6
   \   00000040   0xE0A5             B.N      ??IAP_PragramDeal_3
    218              {
    219                  case 0x01:                                          //开始升级指令（考虑断续传）
    220                                                                      //端点续传，更改地址。（如需考虑，根据序号计算地址）
    221                      gsIAPCtrl.addr = USER_APP_START_ADDR;           //开始发送时，初始化地址。
   \                     ??IAP_PragramDeal_2: (+1)
   \   00000042   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000046   0x....             LDR.N    R1,??DataTable3_2
   \   00000048   0xF8C1 0x0400      STR      R0,[R1, #+1024]
    222                      
    223                      memcpy(&gsIAPPara,&databuf[sizeof(iapcode)],2+2+4+4+2); //cpoy硬件版本，软件版本，程序大小，当前地址，当前帧号
   \   0000004C   0x260E             MOVS     R6,#+14
   \   0000004E   0x1CA7             ADDS     R7,R4,#+2
   \   00000050   0x.... 0x....      LDR.W    R8,??DataTable3_3
   \   00000054   0x0032             MOVS     R2,R6
   \   00000056   0x0039             MOVS     R1,R7
   \   00000058   0x4640             MOV      R0,R8
   \   0000005A   0x.... 0x....      BL       __aeabi_memcpy
    224                      
    225                      break;
   \   0000005E   0xE09A             B.N      ??IAP_PragramDeal_7
    226                  case 0x02:                                          //传输数据包
    227                      memcpy((char *)&iapnum,&databuf[sizeof(iapcode)],sizeof(iapnum));   //取帧序号
   \                     ??IAP_PragramDeal_5: (+1)
   \   00000060   0x2602             MOVS     R6,#+2
   \   00000062   0x1CA7             ADDS     R7,R4,#+2
   \   00000064   0x46E8             MOV      R8,SP
   \   00000066   0x0032             MOVS     R2,R6
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy
    228                      
    229                      if( iapnum )                                    //序号大于0，需判断前后帧序号连续性。(数据连续性判断)
   \   00000070   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD050             BEQ.N    ??IAP_PragramDeal_8
    230                      {
    231                          if(     iapnum == lastiapnum+1 
    232                              ||  iapnum == lastiapnum)                   //相同帧号，也可以
   \   00000078   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000007C   0x....             LDR.N    R1,??DataTable3_4
   \   0000007E   0x8809             LDRH     R1,[R1, #+0]
   \   00000080   0x1C49             ADDS     R1,R1,#+1
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD005             BEQ.N    ??IAP_PragramDeal_9
   \   00000086   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000008A   0x....             LDR.N    R1,??DataTable3_4
   \   0000008C   0x8809             LDRH     R1,[R1, #+0]
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xD13F             BNE.N    ??IAP_PragramDeal_10
    233                          {
    234                              lastiapnum = iapnum;                            //序号赋值
   \                     ??IAP_PragramDeal_9: (+1)
   \   00000092   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000096   0x....             LDR.N    R1,??DataTable3_4
   \   00000098   0x8008             STRH     R0,[R1, #+0]
    235          
    236                              memcpy(&gsIAPCtrl.buf[(iapnum % SEC_DIV_TIMENS)*IAP_DATA_LEN],
    237                              &databuf[2+2],
    238                              datalen - 4);                                //拷贝数据到升级缓冲区
   \   0000009A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009C   0x1F2E             SUBS     R6,R5,#+4
   \   0000009E   0x1D27             ADDS     R7,R4,#+4
   \   000000A0   0x....             LDR.N    R0,??DataTable3_2
   \   000000A2   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000A6   0x2208             MOVS     R2,#+8
   \   000000A8   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   000000AC   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   000000B0   0x2180             MOVS     R1,#+128
   \   000000B2   0xFB01 0x0803      MLA      R8,R1,R3,R0
   \   000000B6   0x0032             MOVS     R2,R6
   \   000000B8   0x0039             MOVS     R1,R7
   \   000000BA   0x4640             MOV      R0,R8
   \   000000BC   0x.... 0x....      BL       __aeabi_memcpy
    239          
    240                              bufsize += datalen - 4;
   \   000000C0   0x....             LDR.N    R0,??DataTable3_5
   \   000000C2   0x8800             LDRH     R0,[R0, #+0]
   \   000000C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C6   0x1F29             SUBS     R1,R5,#+4
   \   000000C8   0x1808             ADDS     R0,R1,R0
   \   000000CA   0x....             LDR.N    R1,??DataTable3_5
   \   000000CC   0x8008             STRH     R0,[R1, #+0]
    241                              //准备数据
    242                              if(     (iapnum % SEC_DIV_TIMENS ) == (SEC_DIV_TIMENS - 1) 
    243                                  || (datalen -4) != IAP_DATA_LEN )                 //如果数据凑满1024字节，或者升级结束。进行写flash操作。
   \   000000CE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000D2   0x2108             MOVS     R1,#+8
   \   000000D4   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000D8   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000DC   0x2A07             CMP      R2,#+7
   \   000000DE   0xD003             BEQ.N    ??IAP_PragramDeal_11
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x1F28             SUBS     R0,R5,#+4
   \   000000E4   0x2880             CMP      R0,#+128
   \   000000E6   0xD018             BEQ.N    ??IAP_PragramDeal_8
    244                              {
    245                                  if((datalen - 4) != IAP_DATA_LEN)                 //如果升级结束，将1024字节剩余空间写0xff
   \                     ??IAP_PragramDeal_11: (+1)
   \   000000E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EA   0x1F28             SUBS     R0,R5,#+4
   \   000000EC   0x2880             CMP      R0,#+128
   \   000000EE   0xD009             BEQ.N    ??IAP_PragramDeal_12
    246                                  {
    247                                      for(int i = bufsize;i < IAP_WRITE_1024;i++ )
   \   000000F0   0x....             LDR.N    R0,??DataTable3_5
   \   000000F2   0x8800             LDRH     R0,[R0, #+0]
   \                     ??IAP_PragramDeal_13: (+1)
   \   000000F4   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000F8   0xDA04             BGE.N    ??IAP_PragramDeal_12
    248                                      gsIAPCtrl.buf[i] = 0xff;	
   \   000000FA   0x21FF             MOVS     R1,#+255
   \   000000FC   0x....             LDR.N    R2,??DataTable3_2
   \   000000FE   0x5481             STRB     R1,[R0, R2]
   \   00000100   0x1C40             ADDS     R0,R0,#+1
   \   00000102   0xE7F7             B.N      ??IAP_PragramDeal_13
    249                                  }
    250          
    251                                  IAP_WriteFlash(&gsIAPCtrl);                 //写数据(地址，gsIAPCtrl.addr依次写入)
   \                     ??IAP_PragramDeal_12: (+1)
   \   00000104   0x....             LDR.N    R0,??DataTable3_2
   \   00000106   0x.... 0x....      BL       IAP_WriteFlash
    252          
    253                                  bufsize = 0;
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x....             LDR.N    R1,??DataTable3_5
   \   0000010E   0x8008             STRH     R0,[R1, #+0]
   \   00000110   0xE003             B.N      ??IAP_PragramDeal_8
    254                              }
    255                          }
    256                          else
    257                          {
    258                              databuf[1] = 1;
   \                     ??IAP_PragramDeal_10: (+1)
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0x7060             STRB     R0,[R4, #+1]
    259                              return 1; 
   \   00000116   0x2001             MOVS     R0,#+1
   \   00000118   0xE040             B.N      ??IAP_PragramDeal_1
    260                          }
    261                      }
    262          
    263                      
    264                      break;
   \                     ??IAP_PragramDeal_8: (+1)
   \   0000011A   0xE03C             B.N      ??IAP_PragramDeal_7
    265                      
    266                   //结束升级指令   //做升级后程序完整性判断。程序大小？ //写程序完成标示
    267                  case 0x03:                                          
    268                                                                      
    269                      if( bufsize )                                   //最后的数据未写入，补充写入
   \                     ??IAP_PragramDeal_4: (+1)
   \   0000011C   0x....             LDR.N    R0,??DataTable3_5
   \   0000011E   0x8800             LDRH     R0,[R0, #+0]
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD002             BEQ.N    ??IAP_PragramDeal_14
    270                      {
    271                           IAP_WriteFlash(&gsIAPCtrl);                 //写数据(地址，gsIAPCtrl.addr依次写入)
   \   00000124   0x....             LDR.N    R0,??DataTable3_2
   \   00000126   0x.... 0x....      BL       IAP_WriteFlash
    272                      }
    273                          
    274                      memcpy(&gsIAPPara,&databuf[sizeof(iapcode)],2+2+4+4+2); //cpoy硬件版本，软件版本，程序大小，当前地址，当前帧号
   \                     ??IAP_PragramDeal_14: (+1)
   \   0000012A   0x260E             MOVS     R6,#+14
   \   0000012C   0x1CA7             ADDS     R7,R4,#+2
   \   0000012E   0x.... 0x....      LDR.W    R8,??DataTable3_3
   \   00000132   0x0032             MOVS     R2,R6
   \   00000134   0x0039             MOVS     R1,R7
   \   00000136   0x4640             MOV      R0,R8
   \   00000138   0x.... 0x....      BL       __aeabi_memcpy
    275                     
    276                      if(     gsIAPPara.softsize > (gsIAPCtrl.addr - USER_APP_START_ADDR)     //程序大小不符，软件退出。
    277                         ||   (gsIAPCtrl.addr - USER_APP_START_ADDR - IAP_WRITE_1024) > gsIAPPara.softsize
    278                         )
   \   0000013C   0x....             LDR.N    R0,??DataTable3_2
   \   0000013E   0xF8D0 0x0400      LDR      R0,[R0, #+1024]
   \   00000142   0xF5B0 0x2080      SUBS     R0,R0,#+262144
   \   00000146   0x....             LDR.N    R1,??DataTable3_3
   \   00000148   0x6849             LDR      R1,[R1, #+4]
   \   0000014A   0x4288             CMP      R0,R1
   \   0000014C   0xD308             BCC.N    ??IAP_PragramDeal_15
   \   0000014E   0x....             LDR.N    R0,??DataTable3_3
   \   00000150   0x6840             LDR      R0,[R0, #+4]
   \   00000152   0x....             LDR.N    R1,??DataTable3_2
   \   00000154   0xF8D1 0x1400      LDR      R1,[R1, #+1024]
   \   00000158   0x....             LDR.N    R2,??DataTable3_6  ;; 0xfffbfc00
   \   0000015A   0x1851             ADDS     R1,R2,R1
   \   0000015C   0x4288             CMP      R0,R1
   \   0000015E   0xD203             BCS.N    ??IAP_PragramDeal_16
    279                      {
    280                          databuf[1] = 3;                         //返回状态
   \                     ??IAP_PragramDeal_15: (+1)
   \   00000160   0x2003             MOVS     R0,#+3
   \   00000162   0x7060             STRB     R0,[R4, #+1]
    281                          return 3;
   \   00000164   0x2003             MOVS     R0,#+3
   \   00000166   0xE019             B.N      ??IAP_PragramDeal_1
    282                      }
    283                      
    284                      //如果程序大小相符，认为下载正确。修改下载成功标示
    285                      gsIAPPara.code = 0x01;
   \                     ??IAP_PragramDeal_16: (+1)
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x....             LDR.N    R1,??DataTable3_3
   \   0000016C   0x8208             STRH     R0,[R1, #+16]
    286                      gsIAPPara.crc16 = GetCrc16Check((uint8 *)&gsIAPPara,sizeof(gsIAPPara)-2);
   \   0000016E   0x2112             MOVS     R1,#+18
   \   00000170   0x....             LDR.N    R0,??DataTable3_3
   \   00000172   0x.... 0x....      BL       GetCrc16Check
   \   00000176   0x....             LDR.N    R1,??DataTable3_3
   \   00000178   0x8248             STRH     R0,[R1, #+18]
    287                      IAP_WriteParaFlash(&gsIAPPara);
   \   0000017A   0x....             LDR.N    R0,??DataTable3_3
   \   0000017C   0x.... 0x....      BL       IAP_WriteParaFlash
    288                      
    289                      //Boot();                                         //程序跳转
    290                      break;
   \   00000180   0xE009             B.N      ??IAP_PragramDeal_7
    291                  case 0x04:                                          //终止升级指令
    292                      gsIAPCtrl.addr = USER_APP_START_ADDR;           //初始化地址。
   \                     ??IAP_PragramDeal_6: (+1)
   \   00000182   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000186   0x....             LDR.N    R1,??DataTable3_2
   \   00000188   0xF8C1 0x0400      STR      R0,[R1, #+1024]
    293          
    294                      break;  
   \   0000018C   0xE003             B.N      ??IAP_PragramDeal_7
    295                  default:    //其他指令，直接返回
    296                      databuf[1] = 2;
   \                     ??IAP_PragramDeal_3: (+1)
   \   0000018E   0x2002             MOVS     R0,#+2
   \   00000190   0x7060             STRB     R0,[R4, #+1]
    297                      return 2;
   \   00000192   0x2002             MOVS     R0,#+2
   \   00000194   0xE002             B.N      ??IAP_PragramDeal_1
    298                      ;
    299              }
    300              
    301              databuf[1] = 0;
   \                     ??IAP_PragramDeal_7: (+1)
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x7060             STRB     R0,[R4, #+1]
    302              return 0;
   \   0000019A   0x2000             MOVS     R0,#+0
   \                     ??IAP_PragramDeal_1: (+1)
   \   0000019C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    303          }

   \                                 In section .bss, align 2
   \                     ??lastiapnum:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??bufsize:
   \   00000000                      DS8 2
    304          
    305          
    306          typedef  void (*pFunction)(void);			    //定义一个函数类型的参数.
    307          
    308          /*******************************************************************************
    309           * LOCAL VARIABLES
    310           */
    311          /***********************************************
    312          * 描述：定义函数指针
    313          */

   \                                 In section .bss, align 4
    314          pFunction   pApp;
   \                     pApp:
   \   00000000                      DS8 4
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void Boot( void )
    317          {
   \                     Boot: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    318              u32     JumpAddress = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    319              u8      cpu_sr;
    320              //SCB->VTOR = USER_APP_START_ADDR & 0x1FFFFF80;	
    321          
    322          	//JMP_Boot(USER_APP_START_ADDR);
    323              
    324          //   __ASM void JMP_Boot( uint32_t address ){
    325          //   LDR SP, [R0]		;Load new stack pointer address
    326          //   LDR PC, [R0, #4]	;Load new program counter address
    327          //   }
    328          
    329              CPU_CRITICAL_ENTER();
   \   00000004   0x.... 0x....      BL       CPU_SR_Save
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0x.... 0x....      BL       CPU_IntDisMeasStart
    330          
    331              JumpAddress   =*(volatile u32*) (USER_APP_START_ADDR + 4); // 地址+4为PC地址
   \   0000000E   0xF05F 0x1004      MOVS     R0,#+262148
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x0004             MOVS     R4,R0
    332              pApp          = (pFunction)JumpAddress;                     // 函数指针指向APP
   \   00000016   0x....             LDR.N    R0,??DataTable3_7
   \   00000018   0x6004             STR      R4,[R0, #+0]
    333              __set_MSP       (*(volatile u32*) USER_APP_START_ADDR);    // 初始化主堆栈指针（MSP）
   \   0000001A   0xF45F 0x2080      MOVS     R0,#+262144
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF380 0x8808      MSR      MSP,R0
    334              __set_PSP       (*(volatile u32*) USER_APP_START_ADDR);    // 初始化进程堆栈指针（PSP）
   \   00000024   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF380 0x8809      MSR      PSP,R0
    335              __set_CONTROL   (0);                                        // 清零CONTROL
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF380 0x8814      MSR      CONTROL,R0
    336              
    337              pApp();                                                     //跳转运行
   \   00000034   0x....             LDR.N    R0,??DataTable3_7
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x4780             BLX      R0
    338              
    339              //(*pApp)();
    340              
    341              CPU_CRITICAL_EXIT();
   \   0000003A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x.... 0x....      BL       CPU_SR_Restore
    342          
    343          }
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x0007FFFF         DC32     0x7ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x0006FFFF         DC32     0x6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     gsIAPCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     gsIAPPara

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ??lastiapnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ??bufsize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xFFFBFC00         DC32     0xfffbfc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     pApp

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Boot
        16   -- Indirect call
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
      32   IAP_PragramDeal
        32   -> GetCrc16Check
        32   -> IAP_WriteFlash
        32   -> IAP_WriteParaFlash
        32   -> __aeabi_memcpy
      32   IAP_ReadDeviceInfo
        32   -> ReadBootCodeVer
        32   -> ReadDeviceSerialNum
        32   -> ReadPartID
      16   IAP_ReadParaFlash
        16   -> __aeabi_memcpy
      40   IAP_WriteFlash
        40   -> BlankCheckSector
        40   -> Compare
        40   -> CopyRAM2Flash
        40   -> EraseSector
        40   -> GetSecNum
      40   IAP_WriteParaFlash
        40   -> BlankCheckSector
        40   -> Compare
        40   -> CopyRAM2Flash
        40   -> EraseSector
        40   -> GetSecNum


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      72  Boot
     416  IAP_PragramDeal
      40  IAP_ReadDeviceInfo
      26  IAP_ReadParaFlash
     110  IAP_WriteFlash
      86  IAP_WriteParaFlash
       2  bufsize
    1028  gsIAPCtrl
      20  gsIAPPara
       2  lastiapnum
       4  pApp

 
 1 056 bytes in section .bss
   782 bytes in section .text
 
   782 bytes of CODE memory
 1 056 bytes of DATA memory

Errors: none
Warnings: 13
