###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       09/Oct/2017  10:56:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Software\uC-MB\Cfg\Template\mb_app_hooks.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Software\uC-MB\Cfg\Template\mb_app_hooks.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\mb_app_hooks.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\mb_app_hooks.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Software\uC-MB\Cfg\Template\mb_app_hooks.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                     uC/MB-III
      4          *                                                The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2010; Micrium, Inc.; Weston, FL
      7          *                          All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  APPLICATION HOOKS
     10          *
     11          * File    : MB_APP_HOOKS.C
     12          * By      : JJL
     13          * Version : V3.01.2
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *               uC/MB-III is provided in source form to reg_baseistered licensees ONLY.  It is
     18          *               illegal to distribute this source code to any third party unless you receive
     19          *               written permission by an authorized Micrium representative.  Knowledge of
     20          *               the source code may NOT be used to develop a similar product.
     21          *
     22          *               Please help us continue to provide the Embedded community with the finest
     23          *               software available.  Your honesty is greatly appreciated.
     24          *
     25          *               You can contact us at www.micrium.com.
     26          ************************************************************************************************************************
     27          */
     28          
     29          #include <app.h>
     30          #include <includes.h>
     31          #include <global.h>
     32          
     33          //extern BOOL App_SetParaToSensor(INT08U dev, INT32U addr, INT08U *dat, INT16U len);
     34          
     35          /*$PAGE*/
     36          /*
     37          ************************************************************************************************************************
     38          *                                              SET ALL APPLICATION HOOKS
     39          *
     40          * Description: Set ALL application hooks.
     41          *
     42          * Arguments  : none.
     43          *
     44          * Note(s)    : none
     45          ************************************************************************************************************************
     46          */
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void  App_MB_SetAllHooks (void)
     49          {
     50          #if MB_CFG_APP_HOOKS_EN > 0u
     51          
     52          #endif
     53          }
   \                     App_MB_SetAllHooks: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     54          
     55          /*$PAGE*/
     56          /*
     57          ************************************************************************************************************************
     58          *                                             CLEAR ALL APPLICATION HOOKS
     59          *
     60          * Description: Clear ALL application hooks.
     61          *
     62          * Arguments  : none.
     63          * 
     64          * Note(s)    : none
     65          *              
     66                          寄存器读。将寄存器的值读出。自己编写
     67          ************************************************************************************************************************
     68          */

   \                                 In section .text, align 2, keep-with-next
     69          CPU_INT08U  App_MB_RdNRegsHook    ( CPU_INT16U  reg_base,
     70                                              CPU_INT16U *prx_data,
     71                                              CPU_INT16U  reg_nbr,
     72                                              CPU_INT16U *perr)
     73          {
   \                     App_MB_RdNRegsHook: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     74              /***********************************************
     75              * 描述： 密码确认，通讯前先将MB_DATA_ACC_PASSWORD写入reg0
     76              */
     77              if(sCtrl.Password != MB_DATA_ACC_PASSWORD ) {
   \   0000000C   0x....             LDR.N    R0,??DataTable0
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xF641 0x015D      MOVW     R1,#+6237
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD003             BEQ.N    ??App_MB_RdNRegsHook_0
     78                  *perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x8038             STRH     R0,[R7, #+0]
     79                  return 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE06D             B.N      ??App_MB_RdNRegsHook_1
     80              }
     81              
     82              /***********************************************
     83              * 描述： 非浮点寄存器
     84              */
     85              if (reg_base < MODBUS_CFG_FP_START_IX) { 
   \                     ??App_MB_RdNRegsHook_0: (+1)
   \   00000020   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000022   0xF64F 0x70DC      MOVW     R0,#+65500
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xDA31             BGE.N    ??App_MB_RdNRegsHook_2
     86           //       CPU_INT16U *preg        = (CPU_INT16U *)&Ctrl.Para.buf2[0];
     87                  CPU_INT16U *preg        = (CPU_INT16U *)&sCtrl;
   \   0000002A   0x.... 0x....      LDR.W    R10,??DataTable0
     88                  
     89                  CPU_INT16U  reg         = reg_base + reg_nbr;
   \   0000002E   0xEB16 0x0804      ADDS     R8,R6,R4
     90          //        CPU_INT16U  reg_max     = sizeof(Ctrl) / 2;
     91                  CPU_INT16U  reg_max     = sizeof(sCtrl) / 2;
   \   00000032   0xF44F 0x6995      MOV      R9,#+1192
     92                  
     93                  /***********************************************
     94                  * 描述： 获取值
     95                  */
     96                  if ( reg < reg_max ) {
   \   00000036   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000003E   0x45C8             CMP      R8,R9
   \   00000040   0xD25B             BCS.N    ??App_MB_RdNRegsHook_3
     97                      preg    += reg_base;
   \   00000042   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000044   0xEB1A 0x0A44      ADDS     R10,R10,R4, LSL #+1
     98                      
     99                      CPU_SR_ALLOC();
   \   00000048   0xF05F 0x0B00      MOVS     R11,#+0
    100                      CPU_CRITICAL_ENTER();
   \   0000004C   0x.... 0x....      BL       CPU_SR_Save
   \   00000050   0x4683             MOV      R11,R0
   \   00000052   0x.... 0x....      BL       CPU_IntDisMeasStart
    101                      
    102                      for ( int i = 0; i < reg_nbr; i++,preg++ ) {
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??App_MB_RdNRegsHook_4: (+1)
   \   00000058   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005A   0x42B0             CMP      R0,R6
   \   0000005C   0xDA0E             BGE.N    ??App_MB_RdNRegsHook_5
    103                          prx_data[i]   = SW_INT16U(*preg);
   \   0000005E   0xF8BA 0x1000      LDRH     R1,[R10, #+0]
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x0A09             LSRS     R1,R1,#+8
   \   00000066   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   0xF8BA 0x2000      LDRH     R2,[R10, #+0]
   \   0000006C   0xEB11 0x2102      ADDS     R1,R1,R2, LSL #+8
   \   00000070   0xF825 0x1010      STRH     R1,[R5, R0, LSL #+1]
    104                      }
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \   0000007A   0xE7ED             B.N      ??App_MB_RdNRegsHook_4
    105                      CPU_CRITICAL_EXIT();
   \                     ??App_MB_RdNRegsHook_5: (+1)
   \   0000007C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000080   0x4658             MOV      R0,R11
   \   00000082   0x.... 0x....      BL       CPU_SR_Restore
    106                      *perr = MODBUS_ERR_NONE;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x8038             STRH     R0,[R7, #+0]
    107                      return TRUE;
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xE036             B.N      ??App_MB_RdNRegsHook_1
    108                  } else {
    109                  }
    110              /***********************************************
    111              * 描述： 浮点寄存器
    112              */
    113              } else {
    114          //        CPU_INT16U  *preg       = (CPU_INT16U *)&Ctrl.Sen.Para.buf2[0];
    115                  CPU_INT16U  *preg       = (CPU_INT16U *)&sCtrl;
   \                     ??App_MB_RdNRegsHook_2: (+1)
   \   0000008E   0x.... 0x....      LDR.W    R10,??DataTable0
    116                  
    117                  CPU_INT16U  reg         = reg_base + reg_nbr - MODBUS_CFG_FP_START_IX;
   \   00000092   0x1930             ADDS     R0,R6,R4
   \   00000094   0xF110 0x0824      ADDS     R8,R0,#+36
    118          //        CPU_INT16U  reg_max     = sizeof(UnionSenPara) / 2;
    119                  CPU_INT16U  reg_max     = sizeof(sCtrl) / 2;
   \   00000098   0xF44F 0x6995      MOV      R9,#+1192
    120                  
    121                  /***********************************************
    122                  * 描述： 获取值
    123                  */
    124                  if ( reg < reg_max ) {
   \   0000009C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A0   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000A4   0x45C8             CMP      R8,R9
   \   000000A6   0xD228             BCS.N    ??App_MB_RdNRegsHook_3
    125                      preg    += reg_base - MODBUS_CFG_FP_START_IX;
   \   000000A8   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AA   0xEB1A 0x0044      ADDS     R0,R10,R4, LSL #+1
   \   000000AE   0x....             LDR.N    R1,??DataTable0_1  ;; 0xfffe0048
   \   000000B0   0xEB11 0x0A00      ADDS     R10,R1,R0
    126                      CPU_SR_ALLOC();
   \   000000B4   0xF05F 0x0B00      MOVS     R11,#+0
    127                      CPU_CRITICAL_ENTER();
   \   000000B8   0x.... 0x....      BL       CPU_SR_Save
   \   000000BC   0x4683             MOV      R11,R0
   \   000000BE   0x.... 0x....      BL       CPU_IntDisMeasStart
    128                      
    129                      for ( int i = 0; i < reg_nbr; i++,preg++ ) {
   \   000000C2   0x2000             MOVS     R0,#+0
   \                     ??App_MB_RdNRegsHook_6: (+1)
   \   000000C4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C6   0x42B0             CMP      R0,R6
   \   000000C8   0xDA0E             BGE.N    ??App_MB_RdNRegsHook_7
    130                          prx_data[i]   = SW_INT16U(*preg);
   \   000000CA   0xF8BA 0x1000      LDRH     R1,[R10, #+0]
   \   000000CE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D0   0x0A09             LSRS     R1,R1,#+8
   \   000000D2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D4   0xF8BA 0x2000      LDRH     R2,[R10, #+0]
   \   000000D8   0xEB11 0x2102      ADDS     R1,R1,R2, LSL #+8
   \   000000DC   0xF825 0x1010      STRH     R1,[R5, R0, LSL #+1]
    131                      }
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \   000000E6   0xE7ED             B.N      ??App_MB_RdNRegsHook_6
    132                      
    133                      CPU_CRITICAL_EXIT();
   \                     ??App_MB_RdNRegsHook_7: (+1)
   \   000000E8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000EC   0x4658             MOV      R0,R11
   \   000000EE   0x.... 0x....      BL       CPU_SR_Restore
    134                      *perr = MODBUS_ERR_NONE;
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x8038             STRH     R0,[R7, #+0]
    135                      return TRUE;
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0xE000             B.N      ??App_MB_RdNRegsHook_1
    136                  } else {
    137                  }
    138              }
    139              
    140              return 0;
   \                     ??App_MB_RdNRegsHook_3: (+1)
   \   000000FA   0x2000             MOVS     R0,#+0
   \                     ??App_MB_RdNRegsHook_1: (+1)
   \   000000FC   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    141          }
    142          
    143          /*$PAGE*/
    144          /*
    145          ************************************************************************************************************************
    146          *                                             CLEAR ALL APPLICATION HOOKS
    147          *
    148          * Description: Clear ALL application hooks.
    149          *
    150          * Arguments  : none.
    151          *
    152          * Note(s)    : none
    153          ************************************************************************************************************************
    154          */

   \                                 In section .text, align 2, keep-with-next
    155          CPU_INT08U  App_MB_WrNRegsHook    ( CPU_INT16U reg_base,
    156                                              CPU_INT16U *prx_data,
    157                                              CPU_INT16U reg_nbr,
    158                                              CPU_INT16U  *perr)
    159          {
   \                     App_MB_WrNRegsHook: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0004             MOVS     R4,R0
    160              /***********************************************
    161              * 描述： 密码确认，通讯前先将MB_DATA_ACC_PASSWORD写入reg0
    162              */
    163          //    if ( ( Ctrl.Para.dat.Password == MB_DATA_ACC_PASSWORD ) ||
    164          //         ( ( reg_base == 0 ) && ( *prx_data == MB_DATA_ACC_PASSWORD ) ) ) {
    165          //    } else {
    166          //        *perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    167          //        return 1;
    168          //    }
    169              
    170          //    /***********************************************
    171          //    * 描述： 非浮点寄存器
    172          //    */
    173          //    if (reg_base < MODBUS_CFG_FP_START_IX) { 
    174          //        CPU_INT16U *preg        = (CPU_INT16U *)&Ctrl.Para.buf2[0];
    175          //        CPU_INT16U  reg         = reg_base + reg_nbr;
    176          //        /***********************************************
    177          //        * 描述： 写入值
    178          //        */
    179          //        if ( reg < sizeof(Ctrl) / 2 ) {
    180          //            preg    += reg_base;
    181          //            CPU_SR_ALLOC();
    182          //            CPU_CRITICAL_ENTER();
    183          //            for ( int i = 0; i < reg_nbr; i++,preg++ ) {
    184          //                *preg = SW_INT16U(prx_data[i]);
    185          //            }
    186          //            CPU_CRITICAL_EXIT();
    187          //            
    188          //            /***********************************************
    189          //            * 描述： 写入显示模块校准参数
    190          //            */
    191          //            CPU_INT16U __packed *pe     = &Ctrl.Para.buf2[127];
    192          //            CPU_INT16U __packed *pe2    = &Ctrl.Sen.Para.buf2[127];
    193          //            //CPU_INT16U __packed *pe3    = (INT16U *)&Ctrl.Tab.buf2;
    194                      
    195          //            // 传感器模块参数
    196          //            if ( ( preg >= Ctrl.Sen.Para.buf2 ) &&
    197          //               ( ( preg <= ( pe2 - reg_nbr * 2 ) ) ) ) {
    198          //                INT16U addr = 2 * ( preg - Ctrl.Sen.Para.buf2 );
    199          //                //INT08U *pb  = (INT08U *)&Ctrl.Sen.Para.buf2 + addr;
    200          //                
    201          //                //if ( !App_SetParaToSensor(1, 0, NULL, 256) ) {
    202          //                if ( !App_SetParaToSensor(1, addr, NULL, addr + reg_nbr<<1) ) {
    203          //                    *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    204          //                    return TRUE;
    205          //                }
    206          //            // 测量模块参数
    207          //            } else if ( ( preg >= Ctrl.Para.buf2 ) &&
    208          //               ( ( preg <= ( pe - reg_nbr * 2 ) ) ) ) {
    209          //                INT16U addr = 2 * ( preg - Ctrl.Para.buf2 );
    210          //                //INT08U *pb  = (INT08U *)&Ctrl.Para.buf2 + addr;
    211          //                //if ( !App_SetParaToSensor(2, 0, NULL, 256) ) {
    212          //                if ( !App_SetParaToSensor(2, addr, NULL, addr + reg_nbr<<1) ) {
    213          //                    *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    214          //                    return TRUE;
    215          //                }
    216                      // 容积表
    217          //            }// else if ( ( preg > (INT16U *)&Ctrl.Tab ) &&
    218                      //    ( ( preg <= ( pe3 - reg_nbr * 2 ) ) ) ) {
    219                      //    
    220                      //    INT16U addr = (preg - (INT16U *)&Ctrl.Tab)*2;
    221                      //    INT08U *pb  = (INT08U *)&Ctrl.Tab + addr;
    222                      //    //addr    += 256;
    223                      //    
    224                      //    if ( !App_SetParaToSensor(2, 256 + addr, NULL, addr + reg_nbr<<1) ) {
    225                      //        *perr = MODBUS_ERR_ILLEGAL_DATA_VAL;
    226                      //        return TRUE;
    227                      //    }
    228                      //}
    229                      
    230          //            /***********************************************
    231          //            * 描述： 
    232          //            */
    233          //            *perr = MODBUS_ERR_NONE;
    234          //            return TRUE;
    235          //        } else {
    236          //            //reg_val = 0;
    237          //            //*perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    238          //        }
    239          //    /***********************************************
    240          //    * 描述： 浮点寄存器
    241          //    */
    242          //    } else {
    243          //        CPU_INT16U  *preg       = (CPU_INT16U *)&Ctrl.Sen.Para.buf2[0];
    244          //        CPU_INT16U  reg         = reg_base + reg_nbr - MODBUS_CFG_FP_START_IX;
    245          //        
    246          //        /***********************************************
    247          //        * 描述： 获取值
    248          //        */
    249          //        if ( reg < sizeof(UnionSenPara) / 2 ) {
    250          //            preg    += reg_base - MODBUS_CFG_FP_START_IX;
    251          //            CPU_SR_ALLOC();
    252          //            CPU_CRITICAL_ENTER();
    253          //            memcpy((CPU_INT16U *)&preg[reg_base], (CPU_INT16U *)&prx_data[0], reg_nbr);
    254          //            CPU_CRITICAL_EXIT();
    255          //            *perr = MODBUS_ERR_NONE;
    256          //            return TRUE;
    257          //        } else {
    258          //            //reg_val = 0;
    259          //            //*perr = MODBUS_ERR_ILLEGAL_DATA_ADDR;
    260          //        }
    261          //    }
    262          //    
    263              return 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBC10             POP      {R4}
   \   00000008   0x4770             BX       LR               ;; return
    264          }
    265          
    266          /*$PAGE*/
    267          /*
    268          ************************************************************************************************************************
    269          *                                                APPLICATION TICK HOOK
    270          *
    271          * Description: This function is called every tick.
    272          *
    273          * Arguments  : none
    274          *
    275          * Note(s)    : 1) This function is assumed to be called from the Tick ISR.
    276          ************************************************************************************************************************
    277          */
    278          

   \                                 In section .text, align 2, keep-with-next
    279          void  App_MB_TimeTickHook (void)
    280          {
    281          
    282          }
   \                     App_MB_TimeTickHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     sCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0xFFFE0048         DC32     0xfffe0048

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   App_MB_RdNRegsHook
        40   -> CPU_IntDisMeasStart
        40   -> CPU_IntDisMeasStop
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
       0   App_MB_SetAllHooks
       0   App_MB_TimeTickHook
       4   App_MB_WrNRegsHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     256  App_MB_RdNRegsHook
       2  App_MB_SetAllHooks
       2  App_MB_TimeTickHook
      10  App_MB_WrNRegsHook

 
 278 bytes in section .text
 
 278 bytes of CODE memory

Errors: none
Warnings: none
