###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       19/Sep/2017  19:02:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC136B-310统计模块\Application\Library\csnr_package_deal\csnc_package_deal.c
#    Command line =  
#        F:\iar\NC136B-310统计模块\Application\Library\csnr_package_deal\csnc_package_deal.c
#        -lCN
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List
#        --diag_suppress Pa050 -o
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\LPC1768\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CSP\MCU\NXP\LPC17xx\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\CSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-LIB\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Source\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\uC-MB\Os\uCOS-III\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\OS\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\OSAL\Ports\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Protocol\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\Tasks\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\APP\AES\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\OS\OSAL\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\CSB\include\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\BSP\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\MX25L1602Drv\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\APP\OCM800600T80\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\User\BSP\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\CardOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\DataDeal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Driver\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\EquipmentOperations\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\Global\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\MastConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SlaveConTask\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\SpeedTest\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\csnr_package_deal\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\iap\
#        -I
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\..\..\..\..\..\..\Application\Library\tax\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\List\csnc_package_deal.lst
#    Object file  =  
#        F:\iar\NC136B-310统计模块\Software\EvalBoards\NXP\LPC1768-SK\uCOS-III\IAR\FLASH\Obj\csnc_package_deal.o
#
###############################################################################

F:\iar\NC136B-310统计模块\Application\Library\csnr_package_deal\csnc_package_deal.c
      1          #ifdef  CVI
      2          #include  <ansi_c.h>
      3          #endif
      4          
      5          #include  "csnc_package_deal.h"
      6          #include  "CrcCheck.h"
      7          
      8          
      9          //数据打包，根据stcCsnrProtocolPara信息，将数据打包成CNSR数据
     10          //

   \                                 In section .text, align 2, keep-with-next
     11          void	DataPackage_CSNC(stcCsncProtocolPara *sprotocolpara)
     12          {
   \                     DataPackage_CSNC: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
     13          	unsigned char	SumCheck8;
     14          	unsigned short	Crc16;
     15          	unsigned short	AddHeadNum;
     16          	unsigned short	i,j;
     17          	unsigned char	ByteStation;
     18          	unsigned char 	FramNum =0;						//序号
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
     19          	unsigned char	DataLen;
     20          
     21          	//////////////////////////////////////////////准备数据
     22          	ByteStation = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4681             MOV      R9,R0
     23          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD0;
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0x68A1             LDR      R1,[R4, #+8]
   \   00000012   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000016   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000001A   0xF119 0x0901      ADDS     R9,R9,#+1
     24          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD1;
   \   0000001E   0x2028             MOVS     R0,#+40
   \   00000020   0x68A1             LDR      R1,[R4, #+8]
   \   00000022   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000026   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000002A   0xF119 0x0901      ADDS     R9,R9,#+1
     25          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->sourceaddr;	 
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x68A1             LDR      R1,[R4, #+8]
   \   00000032   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000036   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000003A   0xF119 0x0901      ADDS     R9,R9,#+1
     26          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->destaddr;				//地址
   \   0000003E   0x7860             LDRB     R0,[R4, #+1]
   \   00000040   0x68A1             LDR      R1,[R4, #+8]
   \   00000042   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000046   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000004A   0xF119 0x0901      ADDS     R9,R9,#+1
     27          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->framnum;
   \   0000004E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000050   0x68A1             LDR      R1,[R4, #+8]
   \   00000052   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000056   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000005A   0xF119 0x0901      ADDS     R9,R9,#+1
     28          	sprotocolpara->rxtxbuf[ByteStation++] = (RS485_CHK_CRC<<4) + sprotocolpara->framcode;	
   \   0000005E   0x78E0             LDRB     R0,[R4, #+3]
   \   00000060   0x3010             ADDS     R0,R0,#+16
   \   00000062   0x68A1             LDR      R1,[R4, #+8]
   \   00000064   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000068   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000006C   0xF119 0x0901      ADDS     R9,R9,#+1
     29          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->datalen;
   \   00000070   0x7B20             LDRB     R0,[R4, #+12]
   \   00000072   0x68A1             LDR      R1,[R4, #+8]
   \   00000074   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000078   0xF809 0x0001      STRB     R0,[R9, R1]
   \   0000007C   0xF119 0x0901      ADDS     R9,R9,#+1
     30          	
     31          	DataLen = sprotocolpara->datalen;
   \   00000080   0x7B20             LDRB     R0,[R4, #+12]
   \   00000082   0xF88D 0x0000      STRB     R0,[SP, #+0]
     32          	
     33          	SumCheck8 = GetCheckSumNR(&sprotocolpara->rxtxbuf[2],5);		   	//索引区校验
   \   00000086   0x2105             MOVS     R1,#+5
   \   00000088   0x68A0             LDR      R0,[R4, #+8]
   \   0000008A   0x1C80             ADDS     R0,R0,#+2
   \   0000008C   0x.... 0x....      BL       GetCheckSumNR
   \   00000090   0xF88D 0x0001      STRB     R0,[SP, #+1]
     34          
     35          	sprotocolpara->rxtxbuf[ByteStation++] = SumCheck8;
   \   00000094   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000098   0x68A1             LDR      R1,[R4, #+8]
   \   0000009A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000009E   0xF809 0x0001      STRB     R0,[R9, R1]
   \   000000A2   0xF119 0x0901      ADDS     R9,R9,#+1
     36          
     37          	memcpy(&sprotocolpara->rxtxbuf[8],sprotocolpara->databuf,DataLen);
   \   000000A6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AA   0x9002             STR      R0,[SP, #+8]
   \   000000AC   0x6860             LDR      R0,[R4, #+4]
   \   000000AE   0x9001             STR      R0,[SP, #+4]
   \   000000B0   0x68A0             LDR      R0,[R4, #+8]
   \   000000B2   0xF110 0x0B08      ADDS     R11,R0,#+8
   \   000000B6   0x9A02             LDR      R2,[SP, #+8]
   \   000000B8   0x9901             LDR      R1,[SP, #+4]
   \   000000BA   0x4658             MOV      R0,R11
   \   000000BC   0x.... 0x....      BL       __aeabi_memcpy
     38          	ByteStation += DataLen; 
   \   000000C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C4   0xEB10 0x0909      ADDS     R9,R0,R9
     39          	
     40          	Crc16 = GetCrc16Check(&sprotocolpara->rxtxbuf[2],6+sprotocolpara->datalen);
   \   000000C8   0x7B20             LDRB     R0,[R4, #+12]
   \   000000CA   0x1D81             ADDS     R1,R0,#+6
   \   000000CC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CE   0x68A0             LDR      R0,[R4, #+8]
   \   000000D0   0x1C80             ADDS     R0,R0,#+2
   \   000000D2   0x.... 0x....      BL       GetCrc16Check
   \   000000D6   0x4682             MOV      R10,R0
     41          	
     42          	sprotocolpara->rxtxbuf[ByteStation+1] = (unsigned char)Crc16;
   \   000000D8   0x68A0             LDR      R0,[R4, #+8]
   \   000000DA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000DE   0xEB19 0x0000      ADDS     R0,R9,R0
   \   000000E2   0xF880 0xA001      STRB     R10,[R0, #+1]
     43          	sprotocolpara->rxtxbuf[ByteStation]   = (unsigned char)(Crc16>>8);
   \   000000E6   0x4650             MOV      R0,R10
   \   000000E8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EA   0x0A00             LSRS     R0,R0,#+8
   \   000000EC   0x68A1             LDR      R1,[R4, #+8]
   \   000000EE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000F2   0xF809 0x0001      STRB     R0,[R9, R1]
     44          	ByteStation += sizeof(Crc16);
   \   000000F6   0xF119 0x0902      ADDS     R9,R9,#+2
     45          	
     46          	////////////////////////////////////////////////			按照协议补位
     47          	AddHeadNum = 0;
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x0005             MOVS     R5,R0
     48          	for(i = 2; i< ByteStation;i++ )							//	数据，补移位 FRAM_HERD0
   \   000000FE   0x2002             MOVS     R0,#+2
   \   00000100   0x0006             MOVS     R6,R0
   \                     ??DataPackage_CSNC_0: (+1)
   \   00000102   0x4648             MOV      R0,R9
   \   00000104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000106   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000108   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010A   0x4286             CMP      R6,R0
   \   0000010C   0xD21B             BCS.N    ??DataPackage_CSNC_1
     49          	{
     50          		if(sprotocolpara->rxtxbuf[i] == FRAM_HERD0)
   \   0000010E   0x68A0             LDR      R0,[R4, #+8]
   \   00000110   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000112   0x5C30             LDRB     R0,[R6, R0]
   \   00000114   0x2810             CMP      R0,#+16
   \   00000116   0xD114             BNE.N    ??DataPackage_CSNC_2
     51          		{
     52          			for(j = ByteStation + AddHeadNum; j >i; j-- ) 	//	移位
   \   00000118   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000011C   0xEB15 0x0009      ADDS     R0,R5,R9
   \   00000120   0x0007             MOVS     R7,R0
   \                     ??DataPackage_CSNC_3: (+1)
   \   00000122   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000124   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000126   0x42BE             CMP      R6,R7
   \   00000128   0xD209             BCS.N    ??DataPackage_CSNC_4
     53          			{
     54          				sprotocolpara->rxtxbuf[j] = sprotocolpara->rxtxbuf[j-1];
   \   0000012A   0x68A0             LDR      R0,[R4, #+8]
   \   0000012C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000012E   0x1838             ADDS     R0,R7,R0
   \   00000130   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000134   0x68A1             LDR      R1,[R4, #+8]
   \   00000136   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000138   0x5478             STRB     R0,[R7, R1]
     55          			}
   \   0000013A   0x1E7F             SUBS     R7,R7,#+1
   \   0000013C   0xE7F1             B.N      ??DataPackage_CSNC_3
     56          			
     57          			i++;											//跳过移位字节
   \                     ??DataPackage_CSNC_4: (+1)
   \   0000013E   0x1C76             ADDS     R6,R6,#+1
     58          			AddHeadNum++;
   \   00000140   0x1C6D             ADDS     R5,R5,#+1
     59          		}
     60          	}
   \                     ??DataPackage_CSNC_2: (+1)
   \   00000142   0x1C76             ADDS     R6,R6,#+1
   \   00000144   0xE7DD             B.N      ??DataPackage_CSNC_0
     61          
     62          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum] 		= FRAM_END0;
   \                     ??DataPackage_CSNC_1: (+1)
   \   00000146   0x68A0             LDR      R0,[R4, #+8]
   \   00000148   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000014C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000014E   0xEB15 0x0109      ADDS     R1,R5,R9
   \   00000152   0x2210             MOVS     R2,#+16
   \   00000154   0x540A             STRB     R2,[R1, R0]
     63          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum+1] 	= FRAM_END1;  
   \   00000156   0x68A0             LDR      R0,[R4, #+8]
   \   00000158   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000015C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000015E   0xEB15 0x0109      ADDS     R1,R5,R9
   \   00000162   0x1808             ADDS     R0,R1,R0
   \   00000164   0x212C             MOVS     R1,#+44
   \   00000166   0x7041             STRB     R1,[R0, #+1]
     64          	
     65          	sprotocolpara->rxtxlen = (unsigned char)(ByteStation + AddHeadNum + 2);
   \   00000168   0xEB15 0x0009      ADDS     R0,R5,R9
   \   0000016C   0x1C80             ADDS     R0,R0,#+2
   \   0000016E   0x7360             STRB     R0,[R4, #+13]
     66          }
   \   00000170   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
     67          
     68          
     69          //数据解包，将接受到的数据解包到，stcCsnrProtocolPara信息
     70          //能简析，返回1；否则，返回0

   \                                 In section .text, align 2, keep-with-next
     71          unsigned char   DataUnpack_CSNC(stcCsncProtocolPara *sprotocolpara)
     72          {
   \                     DataUnpack_CSNC: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
     73              unsigned short			i,j,k;
     74              unsigned char			SumCheck8;
     75              unsigned char			Tmp;
     76              unsigned short			RecCRC16,Check16 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
     77          	int						DataLen = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
     78          	
     79          	if(sprotocolpara->rxtxlen< 2+6+2+2)
   \   0000000C   0x7B60             LDRB     R0,[R4, #+13]
   \   0000000E   0x280C             CMP      R0,#+12
   \   00000010   0xDA01             BGE.N    ??DataUnpack_CSNC_0
     80          		return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE0EB             B.N      ??DataUnpack_CSNC_1
     81          	
     82          	for(j = 0;j < sprotocolpara->rxtxlen;j++ )		    //去重复通讯首字节
   \                     ??DataUnpack_CSNC_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4681             MOV      R9,R0
   \                     ??DataUnpack_CSNC_2: (+1)
   \   0000001A   0x7B60             LDRB     R0,[R4, #+13]
   \   0000001C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0x4581             CMP      R9,R0
   \   00000024   0xD227             BCS.N    ??DataUnpack_CSNC_3
     83          	{
     84          		if(	 	
     85          				sprotocolpara->rxtxbuf[j] 	== FRAM_HERD0
     86          			&& 	sprotocolpara->rxtxbuf[j+1] == FRAM_HERD0
     87          		   )
   \   00000026   0x68A0             LDR      R0,[R4, #+8]
   \   00000028   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000002C   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xD11D             BNE.N    ??DataUnpack_CSNC_4
   \   00000034   0x68A0             LDR      R0,[R4, #+8]
   \   00000036   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000003A   0xEB19 0x0000      ADDS     R0,R9,R0
   \   0000003E   0x7840             LDRB     R0,[R0, #+1]
   \   00000040   0x2810             CMP      R0,#+16
   \   00000042   0xD115             BNE.N    ??DataUnpack_CSNC_4
     88          		{
     89          			for(k = j;k < sprotocolpara->rxtxlen; k++)
   \   00000044   0x46C8             MOV      R8,R9
   \                     ??DataUnpack_CSNC_5: (+1)
   \   00000046   0x7B60             LDRB     R0,[R4, #+13]
   \   00000048   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x4580             CMP      R8,R0
   \   00000050   0xD20E             BCS.N    ??DataUnpack_CSNC_4
     90          			{
     91          				Tmp	 = sprotocolpara->rxtxbuf[k+1];
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000058   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000005C   0x7840             LDRB     R0,[R0, #+1]
   \   0000005E   0x0005             MOVS     R5,R0
     92          				
     93          				sprotocolpara->rxtxbuf[k] = Tmp;
   \   00000060   0x68A0             LDR      R0,[R4, #+8]
   \   00000062   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000066   0xF808 0x5000      STRB     R5,[R8, R0]
     94          			}
   \   0000006A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000006E   0xE7EA             B.N      ??DataUnpack_CSNC_5
     95          		}
     96          	}
   \                     ??DataUnpack_CSNC_4: (+1)
   \   00000070   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000074   0xE7D1             B.N      ??DataUnpack_CSNC_2
     97          	
     98              for(i = 0; i < sprotocolpara->rxtxlen- 10;i++)					//循环遍历
   \                     ??DataUnpack_CSNC_3: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x4682             MOV      R10,R0
   \                     ??DataUnpack_CSNC_6: (+1)
   \   0000007A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000007E   0x7B60             LDRB     R0,[R4, #+13]
   \   00000080   0x380A             SUBS     R0,R0,#+10
   \   00000082   0x4582             CMP      R10,R0
   \   00000084   0xF280 0x80B2      BGE.W    ??DataUnpack_CSNC_7
     99              {
    100          		if(		((sprotocolpara->rxtxbuf[i+0]) == FRAM_HERD0) 
    101          			&& 	((sprotocolpara->rxtxbuf[i+1]) == FRAM_HERD1)		
    102          		  )															//报头
   \   00000088   0x68A0             LDR      R0,[R4, #+8]
   \   0000008A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000008E   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   00000092   0x2810             CMP      R0,#+16
   \   00000094   0xF040 0x80A7      BNE.W    ??DataUnpack_CSNC_8
   \   00000098   0x68A0             LDR      R0,[R4, #+8]
   \   0000009A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000009E   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000000A2   0x7840             LDRB     R0,[R0, #+1]
   \   000000A4   0x2828             CMP      R0,#+40
   \   000000A6   0xF040 0x809E      BNE.W    ??DataUnpack_CSNC_8
    103          		{
    104          			DataLen = sprotocolpara->rxtxbuf[i+6];
   \   000000AA   0x68A0             LDR      R0,[R4, #+8]
   \   000000AC   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000B0   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000000B4   0x7980             LDRB     R0,[R0, #+6]
   \   000000B6   0x0007             MOVS     R7,R0
    105          			
    106          			if(		
    107          			 		(sprotocolpara->rxtxbuf[i+10+DataLen] 	!= FRAM_END0)	||
    108          			 	 	(sprotocolpara->rxtxbuf[i+11+DataLen] 	!= FRAM_END1)
    109          			 )
   \   000000B8   0x68A0             LDR      R0,[R4, #+8]
   \   000000BA   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000BE   0xEB17 0x010A      ADDS     R1,R7,R10
   \   000000C2   0x1808             ADDS     R0,R1,R0
   \   000000C4   0x7A80             LDRB     R0,[R0, #+10]
   \   000000C6   0x2810             CMP      R0,#+16
   \   000000C8   0xD108             BNE.N    ??DataUnpack_CSNC_9
   \   000000CA   0x68A0             LDR      R0,[R4, #+8]
   \   000000CC   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000D0   0xEB17 0x010A      ADDS     R1,R7,R10
   \   000000D4   0x1808             ADDS     R0,R1,R0
   \   000000D6   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000D8   0x282C             CMP      R0,#+44
   \   000000DA   0xD004             BEQ.N    ??DataUnpack_CSNC_10
    110          			 {	
    111          			 	i = (unsigned short)(i + 10 + DataLen);								//地址不对或帧尾错误，跳过此帧
   \                     ??DataUnpack_CSNC_9: (+1)
   \   000000DC   0xF117 0x000A      ADDS     R0,R7,#+10
   \   000000E0   0xEB10 0x0A0A      ADDS     R10,R0,R10
    112          			 	continue;
   \   000000E4   0xE07F             B.N      ??DataUnpack_CSNC_8
    113          			 }
    114          			
    115          
    116          			DataLen = sprotocolpara->rxtxbuf[i+6];
   \                     ??DataUnpack_CSNC_10: (+1)
   \   000000E6   0x68A0             LDR      R0,[R4, #+8]
   \   000000E8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000EC   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000000F0   0x7980             LDRB     R0,[R0, #+6]
   \   000000F2   0x0007             MOVS     R7,R0
    117          			
    118          			SumCheck8 = GetCheckSumNR((unsigned char *)&sprotocolpara->rxtxbuf[i+2],5);		   				//索引区校验
   \   000000F4   0x2105             MOVS     R1,#+5
   \   000000F6   0x68A0             LDR      R0,[R4, #+8]
   \   000000F8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000FC   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   00000100   0x1C80             ADDS     R0,R0,#+2
   \   00000102   0x.... 0x....      BL       GetCheckSumNR
   \   00000106   0xF88D 0x0002      STRB     R0,[SP, #+2]
    119          						
    120          			RecCRC16 = ((unsigned short)sprotocolpara->rxtxbuf[i+8+DataLen]) *256 + sprotocolpara->rxtxbuf[i+9+DataLen];	//校验	
   \   0000010A   0x68A0             LDR      R0,[R4, #+8]
   \   0000010C   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000110   0xEB17 0x010A      ADDS     R1,R7,R10
   \   00000114   0x1808             ADDS     R0,R1,R0
   \   00000116   0x7A00             LDRB     R0,[R0, #+8]
   \   00000118   0xF44F 0x7180      MOV      R1,#+256
   \   0000011C   0x68A2             LDR      R2,[R4, #+8]
   \   0000011E   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000122   0xEB17 0x030A      ADDS     R3,R7,R10
   \   00000126   0x189A             ADDS     R2,R3,R2
   \   00000128   0x7A52             LDRB     R2,[R2, #+9]
   \   0000012A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000012E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    121          
    122          			switch(sprotocolpara->rxtxbuf[i+5]>>4)													//校验和算法判断
   \   00000132   0x68A0             LDR      R0,[R4, #+8]
   \   00000134   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000138   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   0000013C   0x7940             LDRB     R0,[R0, #+5]
   \   0000013E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000140   0x0900             LSRS     R0,R0,#+4
   \   00000142   0x2801             CMP      R0,#+1
   \   00000144   0xD004             BEQ.N    ??DataUnpack_CSNC_11
   \   00000146   0xD310             BCC.N    ??DataUnpack_CSNC_12
   \   00000148   0x2803             CMP      R0,#+3
   \   0000014A   0xD00E             BEQ.N    ??DataUnpack_CSNC_13
   \   0000014C   0xD20D             BCS.N    ??DataUnpack_CSNC_12
    123          			{
    124          					case	RS485_CHK_SUM:
    125          									//Check16 = GetCheckSum16(&sprotocolpara->rxtxbuf[i+2],6+DataLen);
    126          									////PrintfCOM0(("\r\n 16位校验和！");
    127          									break;
   \                     ??DataUnpack_CSNC_14: (+1)
   \   0000014E   0xE00C             B.N      ??DataUnpack_CSNC_12
    128          					case	RS485_CHK_CRC:
    129          									Check16 = GetCrc16Check(&sprotocolpara->rxtxbuf[i+2],(unsigned char )(6+DataLen));
   \                     ??DataUnpack_CSNC_11: (+1)
   \   00000150   0x1DB9             ADDS     R1,R7,#+6
   \   00000152   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000154   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000156   0x68A0             LDR      R0,[R4, #+8]
   \   00000158   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000015C   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   00000160   0x1C80             ADDS     R0,R0,#+2
   \   00000162   0x.... 0x....      BL       GetCrc16Check
   \   00000166   0x0006             MOVS     R6,R0
    130          									////PrintfCOM0(("\r\n CRC校验！");
    131          									break;
   \   00000168   0xE7FF             B.N      ??DataUnpack_CSNC_12
    132          					case	RS485_CHK_RESUM:
    133          									break;
    134          			}
    135          			
    136          			if(			
    137          						SumCheck8 == 	sprotocolpara->rxtxbuf[i+7] 
    138          					&& 	RecCRC16  ==	Check16 				
    139          			  )
   \                     ??DataUnpack_CSNC_13: (+1)
   \                     ??DataUnpack_CSNC_12: (+1)
   \   0000016A   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000016E   0x68A1             LDR      R1,[R4, #+8]
   \   00000170   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000174   0xEB1A 0x0101      ADDS     R1,R10,R1
   \   00000178   0x79C9             LDRB     R1,[R1, #+7]
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD133             BNE.N    ??DataUnpack_CSNC_8
   \   0000017E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000182   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000184   0x42B0             CMP      R0,R6
   \   00000186   0xD12E             BNE.N    ??DataUnpack_CSNC_8
    140          			{
    141          				sprotocolpara->sourceaddr 	= sprotocolpara->rxtxbuf[i+2];	
   \   00000188   0x68A0             LDR      R0,[R4, #+8]
   \   0000018A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000018E   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   00000192   0x7880             LDRB     R0,[R0, #+2]
   \   00000194   0x7020             STRB     R0,[R4, #+0]
    142          				sprotocolpara->destaddr 	= sprotocolpara->rxtxbuf[i+3];	
   \   00000196   0x68A0             LDR      R0,[R4, #+8]
   \   00000198   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000019C   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000001A0   0x78C0             LDRB     R0,[R0, #+3]
   \   000001A2   0x7060             STRB     R0,[R4, #+1]
    143          				sprotocolpara->framnum   	= sprotocolpara->rxtxbuf[i+4];
   \   000001A4   0x68A0             LDR      R0,[R4, #+8]
   \   000001A6   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000001AA   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000001AE   0x7900             LDRB     R0,[R0, #+4]
   \   000001B0   0x70A0             STRB     R0,[R4, #+2]
    144          				sprotocolpara->framcode  	= sprotocolpara->rxtxbuf[i+5]&0x0f;
   \   000001B2   0x68A0             LDR      R0,[R4, #+8]
   \   000001B4   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000001B8   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000001BC   0x7940             LDRB     R0,[R0, #+5]
   \   000001BE   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   000001C2   0x70E0             STRB     R0,[R4, #+3]
    145          				sprotocolpara->datalen     	= (unsigned char )DataLen; 
   \   000001C4   0x7327             STRB     R7,[R4, #+12]
    146          
    147          				memcpy(sprotocolpara->databuf,&sprotocolpara->rxtxbuf[i+8],DataLen);				//数据拷贝
   \   000001C6   0x68A0             LDR      R0,[R4, #+8]
   \   000001C8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000001CC   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   000001D0   0x3008             ADDS     R0,R0,#+8
   \   000001D2   0x9001             STR      R0,[SP, #+4]
   \   000001D4   0xF8D4 0xB004      LDR      R11,[R4, #+4]
   \   000001D8   0x003A             MOVS     R2,R7
   \   000001DA   0x9901             LDR      R1,[SP, #+4]
   \   000001DC   0x4658             MOV      R0,R11
   \   000001DE   0x.... 0x....      BL       __aeabi_memcpy
    148          				 
    149          				return	1;
   \   000001E2   0x2001             MOVS     R0,#+1
   \   000001E4   0xE003             B.N      ??DataUnpack_CSNC_1
    150          			}
    151          		}
    152          	}
   \                     ??DataUnpack_CSNC_8: (+1)
   \   000001E6   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000001EA   0xE746             B.N      ??DataUnpack_CSNC_6
    153            
    154              return	0;
   \                     ??DataUnpack_CSNC_7: (+1)
   \   000001EC   0x2000             MOVS     R0,#+0
   \                     ??DataUnpack_CSNC_1: (+1)
   \   000001EE   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    155          }
    156          
    157          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   DataPackage_CSNC
        48   -> GetCheckSumNR
        48   -> GetCrc16Check
        48   -> __aeabi_memcpy
      48   DataUnpack_CSNC
        48   -> GetCheckSumNR
        48   -> GetCrc16Check
        48   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     372  DataPackage_CSNC
     498  DataUnpack_CSNC

 
 870 bytes in section .text
 
 870 bytes of CODE memory

Errors: none
Warnings: 3
